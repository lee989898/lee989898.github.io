<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://lee989898.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lee989898.github.io/" rel="alternate" type="text/html" /><updated>2022-03-24T20:53:54+09:00</updated><id>https://lee989898.github.io/feed.xml</id><title type="html">LEE</title><subtitle>공부 블로그</subtitle><entry><title type="html">리눅스 사용자 계정과 권한 체계, 쉘 기본</title><link href="https://lee989898.github.io/sc2-03" rel="alternate" type="text/html" title="리눅스 사용자 계정과 권한 체계, 쉘 기본" /><published>2022-03-21T01:06:00+09:00</published><updated>2022-03-21T01:06:00+09:00</updated><id>https://lee989898.github.io/sc2-03</id><content type="html" xml:base="https://lee989898.github.io/sc2-03">&lt;h2 id=&quot;리눅스-사용자-계정과-권한-체계-쉘-기본&quot;&gt;&lt;strong&gt;리눅스: 사용자 계정과 권한 체계, 쉘 기본&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;리눅스유닉스-파일-시스템&quot;&gt;&lt;strong&gt;리눅스/유닉스 파일 시스템&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;리눅스/유닉스 파일 시스템은 디렉토리와 파일로 구성&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;디렉토리&lt;/th&gt;
      &lt;th&gt;내용&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;/&lt;/td&gt;
      &lt;td&gt;파일 시스템 트리 구조의 최상위 디렉토리이다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/etc&lt;/td&gt;
      &lt;td&gt;시스템의 환경 설정 및 주요 설정 파일을 담고있다 (passwd, shadow 등)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;dev&lt;/td&gt;
      &lt;td&gt;프린터 같은 물리적인 장치를 다루기 위한 특수 파일을 담고있다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/usr/bin&lt;/td&gt;
      &lt;td&gt;쉘 명령어 실행 파일 등 기본적으로 실행 가능한 파일을 담고 있다 (ls, mv, cp, pwd 등)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/usr/include&lt;/td&gt;
      &lt;td&gt;주요 라이브러리 헤더파일이 저장되는 디렉토리이다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/usr/lib&lt;/td&gt;
      &lt;td&gt;라이브러리에 대한 shared object 파일(.so)이 저장되는 디렉토리&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/usr/sbin&lt;/td&gt;
      &lt;td&gt;시스템 관리 명령어가 저장되는 디렉터리&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/home&lt;/td&gt;
      &lt;td&gt;사용자 홈 디렉터리가 저장되는 디렉터리&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tmp&lt;/td&gt;
      &lt;td&gt;프로그램 실행 및 설치 시 생성되는 임시 파일을 담고있다. 이 디렉터리에 파일을 저장하면 재부팅 시 임의로 삭제될 수 있다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/var&lt;/td&gt;
      &lt;td&gt;시스템 로그가 저장되는 디렉터리이다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/proc&lt;/td&gt;
      &lt;td&gt;실행중인 프로세스 정보를 담고 있는 파일들이 저장됨. 실행 중인 각 프로세스 id마다 파일이 존재&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;리눅스유닉스의-계정과-권한-체계&quot;&gt;&lt;strong&gt;리눅스/유닉스의 계정과 권한 체계&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;로그인: 아이디와 패스워드 입력을 통해 자신이 누군지 밝히고, 그에 따른 권한을 부여 받아 시스템 사용을 허가 받는 과정&lt;/li&gt;
  &lt;li&gt;리눅스 시스템의 계정과 권한 체계: root라고 불리는 관리자와 일반 사용자 계정으로 구분. 모든 계정 정보가 /etc/passwd 파일에 저장됨&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;vi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc3.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;/etc/passwd 파일&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc4.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;사용자 계정명&lt;/li&gt;
  &lt;li&gt;패스워드가 암호화되어 /etc/shadow 파일에 저장되어 있음을 나타냄&lt;/li&gt;
  &lt;li&gt;사용자 번호(UID, User ID)&lt;/li&gt;
  &lt;li&gt;그룹 번호(GID, Group ID)&lt;/li&gt;
  &lt;li&gt;사용자의 이름이다&lt;/li&gt;
  &lt;li&gt;사용자의 홈 디렉터리 나타냄
    &lt;ul&gt;
      &lt;li&gt;관리자의 홈 디렉터리는 /root이다&lt;/li&gt;
      &lt;li&gt;일반 사용자의 홈 디렉터리는 /hoom/seed 같이 /home 디렉터리 하위에 위치한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사용자 계정 로그인 쉘을 지정. 기본 설정은 /bin/bash 쉘&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;리눅스에서 관리자는 UID를 0번으로 부여받고 일반 사용자는 그 외의 번호를 부여 받는데 보통 500번 또는 1000번 이상을 부여 받는다&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;/etc/shadow 파일&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;각 사용자 계정의 패스워드가 암호화 된 상태로 저장되어 있음&lt;/li&gt;
  &lt;li&gt;사용자 계정 seed에 대한 정보 예&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc5.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;주요 필드&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;사용자 계정명&lt;/td&gt;
      &lt;td&gt;첫번째 필드는 사용자 계정명을 나타냄&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;암호화된 패스워드&lt;/td&gt;
      &lt;td&gt;두번째 필드는 암호화된 패스워드를 나타냄. $로 아래와 같이 추가 구분 &amp;lt;/br&amp;gt; $algoritihm_id$salt$hash_value_of_password &amp;lt;/br&amp;gt; &amp;gt; algorithm_id: 패스워드 해쉬값 계산에 사용된 암호학적 해쉬 함수 종류를 나타냄(MD5, BlowFish, SHA-256, SHA-512 등) &amp;lt;/br&amp;gt; &amp;gt; salt 패스워드 해쉬값 계산에 사용된 랜덤값 &amp;lt;/br&amp;gt; hash_value_of_password: 사용자 패스워드 및 salt를 입력으로 해쉬 함수를 통해 계산된 값 &amp;lt;/br&amp;gt; 패스워드 필드에 *, ! 등이 설정될 수도 있음 &amp;lt;/br&amp;gt; *: 패스워드가 잠긴 상태로 일반적인 방식의 로그인은 불가하지만 별도의 인증 방식을 사용하여 로그인을 하루 수는 있음 &amp;lt;/br&amp;gt; !: 패스워드가 잠긴 상태로 일반적인 방식의 로그인은 불가함. 또는 사용자 계정을 생성하고 패스워드를 설정하지 않은 상태이기도 함&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;마지막 변경&lt;/td&gt;
      &lt;td&gt;마지막으로 패스워드를 변경한 날을 1970년 1월1일 기준으로 일수로 표시함. 위 예에서는 마지막으로 패스워드를 변경한 날은 1970년 1월1일 이후 18950일이 지났음을 의미&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;패스워드 최소 사용기간&lt;/td&gt;
      &lt;td&gt;패스워드를 변경한 이후 최소 이 정도의 기간은 사용해야함을 의미&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;패스워드 최대 사용기간&lt;/td&gt;
      &lt;td&gt;패스워드를 변경한 이후 만료되는 일수를 나타냄. 보안을 위해 주기적으로 패스워드 변경이 필요한 경우 활용&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;경고&lt;/td&gt;
      &lt;td&gt;패스워드 만료일 몇일 전에 경고 알림할건지를 설정&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;비활성화&lt;/td&gt;
      &lt;td&gt;패스워드가 만료된 이후에 계정이 잠기기 전까지 비활성 일수를 나타냄. 해당 비활성 기간 동안 패스워드를 변경해야 계정이 잠기지 않음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;만료일&lt;/td&gt;
      &lt;td&gt;계정이 만료되는 날짜를 1970년 1월1일 기준으로 일수로 표시&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;패스워드 해쉬값 계산 과정&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc36.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;사용자 로그인 시 패스워드 검증 과정(/etc/shadow 파일에서 사용자 패스워드 해쉬값, 해쉬 함수 ID, salt 값을 읽어 온다)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc37.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;만약 salt 없이 패스워드만을 입력으로 해쉬값을 계산한다면?
    &lt;ul&gt;
      &lt;li&gt;패스워드가 동일하면 그 해쉬값도 동일하다&lt;/li&gt;
      &lt;li&gt;공격자는 shadow 파일에 해쉬값들을 비교하는 것만으로 동일한 패스워드가 사용된 사용자 계정을 알아낼 수 있다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;패스워드 크래킹 공격 비용을 높이는 효과
    &lt;ul&gt;
      &lt;li&gt;레인보우 테이블을 이용한 패스워드 크래킹 공격: 일반적으로 많이 사용되는 패턴의 패스워드에 대한 해쉬값을 미리 계산해두는 방식&lt;/li&gt;
      &lt;li&gt;만약 salt가 사용되지 않는다면 공격자는 모든 고려 대상 패스워드 각각에 대한 해쉬값을 게산하면 됨&lt;/li&gt;
      &lt;li&gt;salt가 사용되면 모든 고려 대상 패스워드 및 모든 가능한 salt 값에 대해 미리 해쉬값을 계산해두어야 함 -&amp;gt; 공격 비용이 훨씬 높아짐&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;al&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc38.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc39.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;파일 속성&lt;/th&gt;
      &lt;th&gt;파일 소유자&lt;/th&gt;
      &lt;th&gt;권한 그룹 권한&lt;/th&gt;
      &lt;th&gt;일반(Others)권한&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;d&lt;/td&gt;
      &lt;td&gt;rwx&lt;/td&gt;
      &lt;td&gt;r-x&lt;/td&gt;
      &lt;td&gt;r-x&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;문자&lt;/th&gt;
      &lt;th&gt;파일 속성&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;d&lt;/td&gt;
      &lt;td&gt;디렉터리 파일(Dirctory File)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;일반 정규 파일(Regular File)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;l&lt;/td&gt;
      &lt;td&gt;링크되어 있는 파일(Symbolic Link File)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;c&lt;/td&gt;
      &lt;td&gt;버퍼에 저장되지 않은 특수 파일(Character File)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;b&lt;/td&gt;
      &lt;td&gt;버퍼링된 특수 파일(Block File)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;s&lt;/td&gt;
      &lt;td&gt;소켓 기능을 하는 파일(Socket File)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;p&lt;/td&gt;
      &lt;td&gt;파이프 기능을 수행하는 파일(Pipe File)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;파일의 소유자에게 허용되는 권한
    &lt;ul&gt;
      &lt;li&gt;rwx는 파일의 소유자에 대한 접근 권한&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;파일 소유자와 같은 그룹에 속한 사용자에게 허용되는 권한
    &lt;ul&gt;
      &lt;li&gt;r-x는 그룹에 대한 접근 권한&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;일반(Others) 권한
    &lt;ul&gt;
      &lt;li&gt;r-x는 파일 소유자 및 그룹에 속하지 않는 사용자들(others)에 대한 접근 권한&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;rwx의 r,w,x는 각각 읽기(Read), 쓰기(Write), 실행하기(eXecution)가 해당 사용자에게 허용됨을 의미
    &lt;ul&gt;
      &lt;li&gt;read, write, execution 각각에 대해 허용할지 말지를 3개의 플래그 비트로 표현&lt;/li&gt;
      &lt;li&gt;r: 4(2진수 100)&lt;/li&gt;
      &lt;li&gt;w: 2(2진수 10)&lt;/li&gt;
      &lt;li&gt;x: 1(2진수 1)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;rwx = (2진수 111) = (10진수 7)
    &lt;ul&gt;
      &lt;li&gt;read, write, execution 권한이 모두 허용됨을 의미&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;rwxrwxrwx = (2진수 111111111) = (10진수 777)
    &lt;ul&gt;
      &lt;li&gt;파일의 소유자, 그룹, others 모두에 대해 해당 파일에 대한 읽기, 쓰기, 실행 권한이 허용됨을 의미&lt;/li&gt;
      &lt;li&gt;할 수 있으며, 권한을 777이라고 읽음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;rwxr-x-r-x = (2진수 111101001) = (10진수 755)
    &lt;ul&gt;
      &lt;li&gt;파일 소유자에게 읽기, 쓰기, 실행 권한 모두 허용됨&lt;/li&gt;
      &lt;li&gt;그룹 &amp;amp; others에게는 읽기, 실행 권한만 혀용되며, 쓰기 권한은 허용안됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;rwxr-x–x = (2진수 111101001) = (10진수 751)
    &lt;ul&gt;
      &lt;li&gt;파일 소유자에게는 읽기, 쓰기, 실행 권한 모두 허용됨&lt;/li&gt;
      &lt;li&gt;그룹에게는 읽기, 실행 권한만 허용되며, 쓰기 권한은 허용안됨&lt;/li&gt;
      &lt;li&gt;Others에게는 실행 권한만 허용되며, 읽기, 쓰기는 허용안됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;쉘shell&quot;&gt;&lt;strong&gt;쉘(shell)&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;사용자와 운영체제 간 상호 작용을 위한 command line interface를 제공하는 프로그램&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용자 입력 명령어 처리기(command line interpreter)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;쉘 종류
    &lt;ul&gt;
      &lt;li&gt;Windows PowerShell&lt;/li&gt;
      &lt;li&gt;Linux/Unix sh, csh, bash, ksh etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;쉘(shell): 기본 명령어&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;pwd: print working directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc6.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;cd: change directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc7.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ls: 현재 디렉터리에 속한 파일 및 서브 디렉터리를 나열해서 보여줌
    &lt;ul&gt;
      &lt;li&gt;ls -l: 퍼미션, 소유자, 그룹, 파일크기 등 파일에 대한 자세한 내용을 출력&lt;/li&gt;
      &lt;li&gt;ls -a: 숨겨진 파일이나 디렉터리도 보여줌&lt;/li&gt;
      &lt;li&gt;ls -al 같이 둘 이상의 옵션을 복합적으로 줄 수도 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc8.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mv: “move”의 약자로 파일이나 디렉토리를 원하는 곳으로 옮기거나, 이름을 변경할 떄 사용할 수 있는 명령어&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc9.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;cp: “copy”의 약자로 파일이나 디렉토리를 원하는 곳에 원하는 이름으로 복사하기 위한 명령어&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc10.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;echo: 인수로 주어진 문자열이나 환경변수 값을 출력해주는 명령어&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc11.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;cat: 하나 이상의 파일을 연결해서 출력해주는 명령어&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc12.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;tail: 파일의 마지막 행을 기준으로 지정한 행까지의 파일 내용 일부를 출력해준다. 아무 옵션을 주지 않으면 기본적으로 10개 행을 출력&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc13.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mkdir: “make directory”의 약자로 새로운 디렉토리를 만들 수 있는 명령어&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc14.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;touch &lt;파일명&gt; : 현재 디렉토리에 주어진 &lt;파일명&gt;의 새로운 파일을 생성해주는 명령어&lt;/파일명&gt;&lt;/파일명&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;rm: remove의 약자로 파일과 디렉토리 삭제에 사용되는 명령어&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc15.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;clear: 쉘 창에 있는 기록을 모두 지워주는 명령어&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;chown: 파일이나 디렉토리의 소유권자 및 그룹식별자를 바꾸는 명령어&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc16.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;chmod: “change mode” 약자로 파일이나 디렉토리의 퍼미션을 수정하기 위한 명령어&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc17.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sudo: 일반 사용자가 root 권한을 잠시 빌려 명령을 실행할 수 있도록 하는 명령어이다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc18.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;umask: 파일이나 디렉터리 생성 시 기본 접근권한을 설정할떄 사용하는 명령어
    &lt;ul&gt;
      &lt;li&gt;기본 파일 생성 시 최고 권한이 666이며, 디렉터리의 생성 시 최고 권한은 777이다&lt;/li&gt;
      &lt;li&gt;파일 및 디렉터리 생성 시 기본 권한은 가능한 최고 권한에서 umask 값을 빼준 값이다&lt;/li&gt;
      &lt;li&gt;기본 파일은 660-002=664가, 디렉터리는 777-002=775가 된다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc19.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;id: 현재 실행중인 쉘에 로그인 된 사용자 ID, 그룹 ID 등을 출력해주는 명령어
    &lt;ul&gt;
      &lt;li&gt;일반 사용자 계정으로 로그인한 경우
&lt;img src=&quot;\assets\built\images\sc2\sc20.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;root 사용자로 로그인한 경우
&lt;img src=&quot;\assets\built\images\sc2\sc21.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;grep: 특정 파일 내에서 지정한 패턴을 가진 문자열을 찾은 후, 해당 문자열을 출력해주는 명령어. 패턴에는 정규표현식의 패턴을 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc22.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;find: 파일 시스템에서 인자로 주어진 파일 및 디렉토리를 찾는 명령어
    &lt;ul&gt;
      &lt;li&gt;파일명으로 찾기(-name)
        &lt;ul&gt;
          &lt;li&gt;find . -name “*txt” 현재 디렉터리(모든 하위 디렉터리 포함)에서 확장자가 .txt인 파일 모두 찾음&lt;/li&gt;
          &lt;li&gt;find . -name “*txt” -delete 현재 디렉터리에서 확장자가 .txt인 파일 모두 찾은 다음 삭제&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;타입으로 찾기(-type)
        &lt;ul&gt;
          &lt;li&gt;find . -name “*test” -type d 현재 디렉터리에서 이름에 test가 포함된 모든 디렉터리 찾기&lt;/li&gt;
          &lt;li&gt;find . -type f 현재 디렉터리에서 모든 파일 찾기&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;파일 크기로 찾기(-empth, -size)
        &lt;ul&gt;
          &lt;li&gt;find . -empty 현재 디렉터리에서 빈 디렉터리 또는 크기가 0인 파일 찾ㄱ기&lt;/li&gt;
          &lt;li&gt;find . -size + 1024c 현재 디렉터리에서 1024byte 보다 큰 파일 찾기&lt;/li&gt;
          &lt;li&gt;find . -size + 1k -size -10k 1kb 보다 크고 10kb 보다 작은 파일 찾기&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;man: 명령어를 어떻게 쓰는지 설명해주는 내용을 출력해주는 명령어
    &lt;ul&gt;
      &lt;li&gt;main ls 실행 결과로 보여지는 내용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc23.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Redirection: &amp;gt;, »를 사용해서 주어진 명령 실행 결과로 출력되는 내용이 파일에 쓰여지도록 할 수 있다
    &lt;ul&gt;
      &lt;li&gt;&amp;gt;: overwrite, »: append&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc27.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;Pipeline: 첫번쨰 명령 (&lt;/td&gt;
          &lt;td&gt;기호 왼쪽) 실행 결과가 두번째 명령 (&lt;/td&gt;
          &lt;td&gt;기호 오른쪽)으로 넘겨지도록 한다&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc28.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;심볼릭링크 생성&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;심볼릭링크 생성 명령어&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-ㅊ&quot;&gt;ln -s 우너본 링크파일
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;원본 파일 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc24.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;심볼릭 링크 설정 및 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc25.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;하드링크와 차이&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc26.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;하드 링크 파일의 inode number는 원본과 같다&lt;/li&gt;
  &lt;li&gt;디스크 상에서 근본적으로 같은 파일이라 할 수 있다&lt;/li&gt;
  &lt;li&gt;반면 심볼릭 링크는 디스크 상에서 다른 파일이며, 바로가기 파일이라 할 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;쉘 스크립트&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;파일에 쉘 명령어들을 나열해서 순차적으로 실행되도록 하는 것&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;쉘 스크립트 예시
    &lt;ul&gt;
      &lt;li&gt;#!/bin/sh: 파일에 작성된 내용은 쉘 스크립트라는 것을 시스템에 알려주는 역할
&lt;img src=&quot;\assets\built\images\sc2\sc29.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;아래 두가지 방법 중 하나로 쉘 스크립트 실행
&lt;img src=&quot;\assets\built\images\sc2\sc30.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;
&lt;img src=&quot;\assets\built\images\sc2\sc31.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;read로 입력, echo로 출력&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc32.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;변수 활용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc33.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;특별한 변수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc34.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;배열&lt;/li&gt;
  &lt;li&gt;조건문: if elif else if, case문&lt;/li&gt;
  &lt;li&gt;반목문: for, while, until&lt;/li&gt;
  &lt;li&gt;함수&lt;/li&gt;
&lt;/ul&gt;</content><author><name>lee989898</name></author><category term="systemcloud" /><summary type="html">리눅스: 사용자 계정과 권한 체계, 쉘 기본</summary></entry><entry><title type="html">안드로이드 면접 준비</title><link href="https://lee989898.github.io/ad" rel="alternate" type="text/html" title="안드로이드 면접 준비" /><published>2022-03-19T01:06:00+09:00</published><updated>2022-03-19T01:06:00+09:00</updated><id>https://lee989898.github.io/ad</id><content type="html" xml:base="https://lee989898.github.io/ad">&lt;h2 id=&quot;안드로이드-면접-준비&quot;&gt;&lt;strong&gt;안드로이드 면접 준비&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;안드로이드-질문&quot;&gt;&lt;strong&gt;안드로이드 질문&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Context 란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Context는 Application의 글로벌 Infomation에 대한 인터페이스다.&lt;br /&gt;
Context를 이용해서 액티비티를 실행시키거나 인텐트를 broadcasting또는 receiving과 같은 어플리케이션 레벨의 명령을 수행 할 수 있다.&lt;br /&gt;
즉 액티비티나 서비스, 여러 컴포넌트들을 시스템과 연결시키는 역할을 한다.&lt;/p&gt;

&lt;p&gt;어플리케이션 환경에 대한 글로벌 정보를 가진 인터페이스&lt;br /&gt;
안드로이드 시스템에 의해 구현이 제공되는 Abstract class&lt;br /&gt;
어플리케이션에 특화된 리소스와 클래스들에 대한 접근&lt;br /&gt;
launching, 액티비티, 브로드케스팅과 intents 수신 등과 같이 어플리케이션 레벨의 동작에 대한 업콜도 가능&lt;br /&gt;
즉, 안드로이드 시스템이 애플리케이션이나 컴포넌트 등을 관리하기 위한 것이라 생각&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;AAC 란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;AAC는 Android Architecture Components를 뜻하며 테스트와 유지관리가 쉬운 앱을 디자인하도록 돕는 라이브러리 모음이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Intent 란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Intent는 다른 앱 구성요소로 부터 작업을 요청하는 메세지 객체이다.&lt;br /&gt;
두가지 종류가 있으며, 명시적 인텐트는 수신하는 컴포넌트가 명시적으로 지정된 인텐트이다.&lt;br /&gt;
암시적 인텐트는 해당 작업을 수행 할 수 있는 컴포넌트를 찾아서 수행을 요청하는 인텐트이다.&lt;br /&gt;
주로 액티비티, 서비스를 시작하거나 브로드 캐스트를 전달할 때 사용된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Parcelable 이란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Parcelable은 JAVA의 Serializable의 안드로이드 구현체다.&lt;br /&gt;
서로 다른 컴포넌트 사이의 데이터 교환에 사용된다.&lt;br /&gt;
안드로이드는 Intent를 통해서 데이터를 전달할 때 Parcelable을 이용해서 전달하는 것을 권장하고 있다.&lt;br /&gt;
만약 다른 앱이 수신할 수 있는 Intent의 경우 Parcelable을 이용하면 안된다.&lt;br /&gt;
그 이유는 다른 앱에서 Parcelable로 구현된 클래스에 접근하지 못하면 런타임 에러가 발생하기 때문이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;4가지의 앱 구성 요소&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;안드로이드 앱은 컴포넌트로 구성되어 있다.&lt;br /&gt;
각 컴포넌트들은 하나의 독립된 형태로 존재하며, 정해진 역할을 수행한다.&lt;br /&gt;
앱의 필수적인 구성 요소로 시스템 또는 사용자가 앱에 들어올 수 있는 진입점이다.
컴포넌트? = 앱의 구성 단위, 컴포넌트를 조합하여 하나의 앱을 만드는 것을 의미&lt;/p&gt;

&lt;h3 id=&quot;activity&quot;&gt;Activity&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;UI 화면을 담당하는 컴포넌트&lt;/li&gt;
  &lt;li&gt;특징
    &lt;ol&gt;
      &lt;li&gt;안드로이드 어플리케이션은 반드시 하나 이상의 Activity를 가지고 있어야 합니다.&lt;/li&gt;
      &lt;li&gt;두개의 액티비티를 동시에 Display할 수 없습니다.&lt;/li&gt;
      &lt;li&gt;다른 어플리케이션의 액티비티도 불러낼 수 있습니다.&lt;/li&gt;
      &lt;li&gt;액티비티 내에는 프래그먼트(Fragment)를 추가하여 화면을 분할시킬 수 있습니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;service&quot;&gt;Service&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;화면에 존재하지 않고 백그라운드에서 실행되는 컴포넌트&lt;/li&gt;
  &lt;li&gt;특징
    &lt;ol&gt;
      &lt;li&gt;화면이 없습니다. 그저 백그라운드에서 돌아가는 컴포넌트입니다.&lt;/li&gt;
      &lt;li&gt;한번 시작된 서비스는 어플리케이션이 종료되도 계속해서 백그라운드에서 돌아갑니다.&lt;/li&gt;
      &lt;li&gt;모든 서비스는 Service클래스를 상속받아서 사용합니다.&lt;/li&gt;
      &lt;li&gt;네트워크를 통해서 데이터를 가져올 수 있습니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;서비스에는 크게 3가지로 나뉜다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;포그라운드 서비스 : 알림을 표시해 놓고 사용자와 상호 작용하지 않아도 계속 실행되는 걸 말함&lt;/li&gt;
  &lt;li&gt;백그라운드 서비스 : 사용자가 직접 알지 못하는 작업을 수행할 떄 사용&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;바운드 서비스 : 앱 내에서 서비스를 사용하여 간단한 클라이언트 - 서버 환경을 구성하는 것을 말함(특정 컴포넌트와 서비스간 상호작용)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;startService&lt;br /&gt;
⇒ 단순 서비스를 시작, 종료하게 하는 서비스이다.&lt;br /&gt;
생명주기는 onCreate - onStartCommand - onDestroy&lt;br /&gt;
onStartCommand return result&lt;br /&gt;
START_STICKY : 안드로이드가 서비스를 강제 정지한 경우, null intent를 보내서 재시작한다.&lt;br /&gt;
START_NOT_STICKY : 안드로이드가 서비스를 강제 정지한 경우, 재시작 하지 않는다.&lt;br /&gt;
START_REDELIVER_INTENT : 안드로이드가 서비스를 강제 정지한 경우, 동일한 intent를 보내서 재시작한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;bindService&lt;br /&gt;
⇒ 특정 컴포넌트와 서비스간 상호작용이 있을 때 사용하는 서비스이다.&lt;br /&gt;
생명주기는 onCreate - onBind - onUnbind - onDestroy&lt;/p&gt;

&lt;p&gt;intentService&lt;br /&gt;
⇒ 액티비티와 프래그먼트 LifeCycle에 의존하지 않고 백그라운드에서 처리하고 싶은 경우 사용한다. 이 서비스는 핸들스레드루퍼 + 핸들러를 조합해 구현되어 있다. 콜백메소드를 구현할 필요 없고 onHandleIntent()만 구현하면 되고 요청한 작업이 완료되면 자동적으로 서비스를 중단한다.&lt;/p&gt;

&lt;h3 id=&quot;broadcast-receiver&quot;&gt;Broadcast Receiver&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;단말기에서 발생하는 다양한 이벤트, 정보를 받고 반응하는 컴포넌트&lt;/li&gt;
  &lt;li&gt;안드로이드 단말기에서 발생하는 다양한 이벤트 정보(화면이 켜지거나 꺼짐, 리부팅 등)를 받고 반응하는 컴포넌트&lt;/li&gt;
  &lt;li&gt;특징
    &lt;ol&gt;
      &lt;li&gt;디바이스에서 발생하는 일 중에서 어플리케이션이 알아야 하는 상황이 발생하면 알려줍니다.&lt;/li&gt;
      &lt;li&gt;수신기를 통해 디바이스의 상황을 감지하고 적절한 작업을 수행합니다.&lt;/li&gt;
      &lt;li&gt;대부분 UI가 존재하지 않습니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;정적 리시버: 매니페스트에 등록하여 리시버를 구현하는 형태인데 한 번 등록하면 해제할 수 없는 방식이다.
동적 리시버: 클래스 파일에서 리시버를 등록, 해제할 수 있는 형태이기 때문에 앱에 부하를 줄 일 수 있다. 하지만 해제를 적절히
해주지 않는다면 메모리 락이 발생할 수 있다.&lt;/p&gt;

&lt;p&gt;(❌ 리시버에는 너무 많은 작업, 시간이 오래걸리는 작업을 하면 안된다. 처리 지연시간이 길어진 경우 ANR이 발생하기 떄문에 리시버에는 간단한 일을 처리하도록 하고, 스레드를 별도로 생성해서 처리하도록 해야한다)&lt;/p&gt;

&lt;h3 id=&quot;content-provider&quot;&gt;Content Provider&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;데이터를 저장하고,가져오고, 모든 App에서 접근할 수 있도록 하는 컴포넌트&lt;/li&gt;
  &lt;li&gt;데이터를 관리하고 다른 애플리케이션 데이터를 제공&lt;/li&gt;
  &lt;li&gt;데이터베이스의 데이터를 전달할때 많이 사용&lt;/li&gt;
  &lt;li&gt;콘텐트 제공자는 생명주기를 가지고 있지 않음
    &lt;ol&gt;
      &lt;li&gt;파일 입출력, SQLiteDB, Web 등을 통해서 데이터를 관리&lt;/li&gt;
      &lt;li&gt;콘텐트 제공자를 통하여 다른 어플리케이션의 데이터도 변경 가능&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;RxJava or RxKotlin and RxAndroid&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;rx가-무엇이며-사용한-이유&quot;&gt;Rx가 무엇이며, 사용한 이유&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Rx는 Reactive Programming 을 좀 더 편하게 사용하기 위한 라이브러리&lt;/li&gt;
  &lt;li&gt;Reactive Programming은 반응형 프로그래밍으로, 어떤 데이터를 관찰(Observe)하고 있다가, 데이터가 변경이 되면 반응을 하고, 그 변경된 이벤트를 가지고 관련된 업데이트 로직을 처리하는 것을 뜻함&lt;/li&gt;
  &lt;li&gt;사용 이유는 설명 그대로 데이터 흐름에 관해 중복되는 코드들을 제거하고 간단히 구성하기 위해 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reactive-programming&quot;&gt;Reactive Programming&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;데이터 흐름과 전달에 관한 프로그래밍 패러다임&lt;/li&gt;
  &lt;li&gt;데이터 흐름을 먼저 정의하고, 그 데이터가 변경 시 연관되는 함수나 수식이 업데이트 될 수 있는 것을 의미&lt;/li&gt;
  &lt;li&gt;메모리 누수를 해결하기 위한 방법
    &lt;ol&gt;
      &lt;li&gt;Disposable Interface를 이용한 명시적 자원해제
   onCreate()에서 subscribe()를 호출하면 onDestroy()에서 메모리 참조를 해제하고 onResume()에서 호출하면 onPause()에서 해제합니다.&lt;/li&gt;
      &lt;li&gt;CompositeDisposable class 사용 시 생성된 모든 Observable을 안드로이드 라이프 사이클에 맞춰서 한 번에 모두 메모리 해제를 할 수 있습니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;ANR?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Android 앱의 UI 스레드가 너무 오랫동안 차단되면 ‘ANR(Application Not Respoding, 애플리케이션 응답 없음)’ 오류가 트리거&lt;/p&gt;

&lt;h3 id=&quot;정의&quot;&gt;정의&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Application Not Responding 로, Main Thread(UI Thread)가 일정 시간 어떤 Task에 잡힘으로써 발생&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;발생-요인&quot;&gt;발생 요인&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;액티비티가 포그라운드에 있는 동안, 앱이 5초 이내에 입력 이벤트 또는 BroadcastReceiver(예: 키 누름 또는 화면 터치 이벤트)에 응답하지 않을 때&lt;/li&gt;
  &lt;li&gt;포그라운드에 액티비티가 없을 때, BroadcastReceiver가 상당한 시간 내에 실행을 완료하지 못할 때&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;회피-방법&quot;&gt;회피 방법&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;매인 스레드(UI Thread)에서 실행되는 메소드는 가능한 한 적은 작업을 수행해야 합니다. 특히 엑티비티의 onCreate() 그리고 onResume() 에서는 가능한한 최소한의 작업만을 수행해야 함. 네트워크 접근, 데이터 처리 또는 비트맵 리사이징과 같은 잠재적으로 오래 걸리는 작업은 작업 스레드(Worker Thread)에서 처리해야 합니다.&lt;/li&gt;
  &lt;li&gt;UI 변동이 있을 때는 프로그레스와 같은 화면을 띄어 사용자에게 기달릴 것을 명시&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Compile Time? Run Time?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;compiletime&quot;&gt;CompileTime&lt;/h3&gt;

&lt;p&gt;개발자에 의해 작성된 프로그래밍 언어를 컴퓨터가 인식할 수 있는 기계어 코드로 변환되어 실행 가능한 응용 프로그램이 되는 과정&lt;/p&gt;

&lt;p&gt;ex) Compile time error? 소스 코드가 컴파일 되는 과정 중 발생하는 Syntax Error로 파일 참조 오류 등과 같은 문제들로 인해 컴파일이 방해되어 발생하는 오류 형태, 즉, 소스 코드 문제다! 라고 말해주는 시간!&lt;/p&gt;

&lt;h3 id=&quot;runtime&quot;&gt;RunTime&lt;/h3&gt;

&lt;p&gt;컴파일 과정을 마친 응용 프로그램이 사용자에 의해 실행되어 지는 “Time”, 즉 프로그램이 실행되는 동안의 그 time을 의미!&lt;/p&gt;

&lt;p&gt;ex) Run time error? 이미 컴파일이 완료되어 프로그램이 실행 중 임에도 불구하고, 의도치 않은 예외 상황으로 인해 프로그램 실행 중 발생하는 오류 형태&lt;/p&gt;

&lt;p&gt;예를 들어, “0 으로 나눌 때, null 참조”는 RunTime 시 발생하는 error이며, “타입 체크가 잘못 되었을 때 에러”는 CompileTime 시 발생하는 error 이다.&lt;/p&gt;

&lt;파트 기술질문=&quot;&quot;&gt;
이전 협업에서 본인이 어떤 역할을 했는지, 기술적으로 어느 부분을 담당했는지 자세히

객체지향 언어가 무엇인지 알고 있는지?
클래스란 무엇인지?

성공적인 프로젝트를 이뤄내기 위해 팀에 어떤 부분에 기여하여 어떻게 할 것인지?

&amp;gt; FragmentManager vs SupportFragmentManager

fragmentManager : fragment 객체를 관리하기 위한 것

Activity에서의 fragmentManager 와 supportFragmentManager 의 차이는, FragmentManager의 경우 Activity class에서 가져오고 SupportFragmentManager는 FragmentActivity에서 가져오는 것.
FragmentActivity 역시 Activity를 상속받지만, 상속받으면서 androidx로 마이그레이션 된다. 즉, supportFragmentManager는 androidx에서 사용하기 위한 fragmentManager이다.

Fragment에서의 fragmentManager 와 childFragmentManager 의 차이는, fragmentManager는 Activity와 Fragment 둘 다에서 관리가 가능하며, childFragmentManager는 Fragment에서만 관리가 가능하다.

&amp;gt; Android Jetpack

개발자가 고품질 앱을 손쉽게 개발할 수 있게 돕는 라이브러리, 도구, 가이드 모음으로, 플랫폼 API와는 별도로 제공되는 androidx.* 패키지 라이브러리로 구성  
향상된 Android 기능의 이점을 활용하기 위한 일련의 구성 요소인 Support Library 로, 이전 버전까지 호환한다.  
구성요소는 Architecture(아키텍처), Foundation(기초), Behavior(동작), UI로 총 4가지로 나뉜다.  

가장 많이 사용하고 있는 부분은 Architecture Component 이다.  

---

• 실력있는 개발자가 되고 싶다 하였는데 실력있는 개발자란 무엇인지?
• MVC 패턴과 MVVM 패턴의 차이점은?
• Observer 패턴이란?
• 오버로딩과 오버라이딩의 차이점은?
• 멀티 프로세싱과 멀티 스레드의 차이는?
• 최근 카카오와 같은 IT회사에서 주간근무시간을 초과하는 일에 대해 어떻게 생각하는지
정시 퇴근 후 정말 중요한 약속이 잡혔을 때 팀장님께서 추가업무를 부탁하면 어떻게 대처할
지

&amp;gt; Context란?

자신이 어떤 어플리케이션을 나타내고 있는지 알려주는 ID 역할 ActivityManagerService 에 접근 할수 있도록 하는 통로 역할

ANR(Application Not Responding) 이란

메인 스레드가 일정 시간 어떤 TASK 에 잡혀 있으면 발생한다. 시간 소모가 많은 작업은 스레드를 통해 처리해야 함

ViewModel 의 장점

화면 회전시 데이터를 유지할 수 있는 구조로 디자인하였으며 Android Lifecycle 의 onDestroy코드가 동작한다. Lifecycle 을 내부적으로 알아서 호출해주기 때문에 좋다.

ConstraintLayout vs RelativeLayout vs LinearLayout 차이(ConstraintLayout 장점)

LinearLayout 은 orientation 이 있어서 가로 또는 세로로 차곡차곡 쌓여지는 방식이다. RelativeLayout 은 상대적인 기준으로 어떤 위젯의 왼쪽 오른쪽등등의 방향으로 배치 할 수 있게 해주는 레이아웃이다. ConstraintLayout 은 복잡한 레이아웃을 단순한 계층구조를 이용하여 표현할 수 있는 ViewGroup 이다. RelativeLayout과 비슷하지만 더 유연하고 다양하고 강력한 기능을 제공한다.

CustomView 와 Fragment 의 차이점

Fragment 는 자체 생명주기를 따르고 Activity 의 생명주기에 따라 직접적으로 영향을 받는다. Fragment를 사용하려면 Activity 내에서 또는 상위 프래그먼트내에서 사용이 가능하고 다른 액티비티에서 재사용이 가능하다. 여기서 CustomView 는 자체 생명주기는 가지고 있지 않고 Fragment 보다는 더 작은 단위?를 커스터마이징해서 재사용을 할 수 있다.

Android KTX 란 무엇인가?
안드로이드 프레임워크와 서포트 라이브러리를 모두 지원하여 안드로이드를 위한 코틀린(Kotlin) 코드를 간결하고 편하게 사용할 수 있게 설계된 확장 라이브러리이다.

mvp 패턴과 mvvm 패턴의 차이

mvp 와 mvvm 의 차이는 presenter와 viewModel 의 차이가 가장 크다. presenter 는 view의 interface 를 가지고 있고 view 관련 처리를 요청한다. 하지만 viewModel 은 view 의 참조를 하지않고 Rx를 사용하거나 LiveData를 사용해서 데이터가 변경될때 같이 자동으로 변경될수 있게 구조가 되어있다.

LiveData 는 인터럽트방식인가 폴링방식인가

폴링방식은 정해진 시간 또는 순번에 상태를 확인해서 상태 변화가 있는지 없는지 체크 하는 방식이고 인터럽트방식은 main문을 실행 하는 동중 외부에서 정해져 있는 인터럽트 핀에 신호가 들어오면 MCU는 즉각적으로 하고 있는 동작을 멈추고 인터럽트 서비스 루틴을 실행하는 것이다.
LiveData 는 데이터가 변경된 시점에 Observer 가 실행 되기 때문에 인터럽트 방식이라고 볼 수 있다.
옵저버패턴 설명

한객체의 상태가바뀌면 그 객체에 의존하는 다른 객체들한테 연락이 가고 자동으로 내용이 갱신되는 방식으로 일대다(one-to-many) 의존성을 정의한다.
데이터 전달 방식은 2가지가 있다 주제 객체에서 옵저버로 데이터를 보내는 방식 (푸시방식) 옵저버에서 주제객체의 데이터를 가져가는 방식(풀 방식)
Subject 와 Observer 가 존재하고 Subject에 Observer 를 등록하고 난 뒤 subject 의 데이터가 변경 되면 등록된 Observer 가 호출 되는 방식

어댑터패턴 설명

한 클래스의 인터페이스를 클라이언트에서 사용하고자하는 다른 인터페이스로 변환한다. 어댑터를 이용하면 인터페이스 호환성 문제 때문에 같이 쓸 수 없는 클래스들을 연결해서 쓸 수 있다.

프로토콜이란?

통신 프로토콜 또는 통신 규약은 컴퓨터나 원거리 통신 장비 사이에서 메세지를 주고 받는 양식과 규칙의 체계이다. 통신 프로토콜은 신호 체계, 인증 그리고 오류 감지 및 수정기능을 포함할 수 있다. 간단히 말해서 데이터 주고받는 상호간에 미리 약속된 규칙, 규약이다!!

ViewModel 상속받은 클래스에서 ViewModel 상속을 받지 않는다면 달라지는점은?
viewModel 상속을 받지 않는다면 생명주기에 따른 처리,rotate상황 등등을 추가 해주어야한다는 점이 달라진다.

반응형 프로그래밍 - RXJava
리액티브 프로그래밍은 데이터 흐름(data flow)과 변화 전파에 중점을 둔 프로그래밍 패러다임프로그래밍 언어로 정적 또는 동적인 데이터 흐름을 쉽게 표현데이터 흐름을 통해 하부 실행 모델이 자동으로 변화를 전파할 수 있는 것을 의미

Observable
• 데이터 흐름
• 주기적으로 데이터를 처리하고 변화를 방출하며 데이터 흐름을 다른 구성요소에게 전달
Observer
• Observable이 방출한 데이터를 받아서 데이터 흐름의 변화를 관찰
• Observable이 방출한 데이터를 메인 스레드나 UI에 전달하는 역할
• onComplete()Observable이 더 이상 방출할 데이터가 없을 때 호출
• onError(Throwable e)Error 발생 시 호출
• onNext(Object o)새로운 데이터가 방출될 때 호출방출된 데이터는 매개변수에서 찾을 수 있음
Schedulers
• Rx의 핵심은 비동기 처리에 있음
• Observable과 Observer가 어떤 스레드에서 작업을 수행할지 지정
• subscribeOn(Thread)Observable이 실행되어야 하는 스레드 지정
• observeOn(Thread)Observer가 실행되어야 하는 스레드 지정
Manifest file
• 애플리케이션에 관한 정보를 입력하는 파일로 xml 형태
• 패키지 이름, 앱 이름, 앱 설명, 아이콘, 앱이나 구성요서에서 필요한 권한, 앱에서 사용되는 액티비티, 서비스, 브로드캐스트에 대한 정보 등 전반적 앱 정보 저장
Activity
• 화면에 UI를 표시하는 기본요소
• 대부분의 경우 액티비티는 꽉찬 화면을 구성하지만, 예외적으로 floating windows, multi-window mode 처럼 화면의 일부를 차지하게 할수 있다.
• Acitivty 의 종류 중 하나로 FragmentActivity가 있는데, nested fragment는 fragment 안에 다른 fragment가 있는 경우 고려
• AppCompatActivity는 안드로이드 하위버전의 안드로이드를 지원하기 위해 사용
• AppCompatActivity는 FragmentActivity를 상속
Activity Life Cycle
• 재개 (create, start, resume)
• 일시정지 (pause)
• 멈춤 (stop, destroy)
• onCreate (액티비티 생성 직전)onRestart (액티비티가 stop상태에서 재시작될 경우)onStart (액티비티가 화면에 보여지기 직전)onResumed (액티비티가 사용자와 상호작용하기 직전)onPause (액티비티가 부분적으로 가려짐)onStopped (액티비티가 더 이상 보이지 않을때)onDestroy (액티비티가 소멸되기 직전)
Fragment
• 프래그먼트는 액티비티의 부분부분을 동적으로 동작시키기 위해 생긴 개념
• 탭레이아웃의 탭을 눌러서 다른화면으로 전환하는 앱의 경우, 한 액티비티안에서 탭을 눌렀을 때 보여지는 프래그먼트만 변경되며, 프래그먼트는 액티비티와 달리 스택에 쌓이지 않기 때문에 백버튼을 누른다고 해서 이전 프래그먼트로 돌아가지 않는다. (이는 BackStack을 추가하여 직접 구현)
• 프래그먼트의 라이프사이클은 액티비티와 거의 동일한데, onAttach, onCreateView, onDestroyView, onDetach라는 콜백이 추가
Thread &amp;amp; Handler &amp;amp; Looper
Thread
• 안드로이드는 기본적으로 하나의 메인 스레드로 작동
• UI 조작은 메인 스레드만 가능 &amp;gt; 두 개 이상의 스레드가 UI에 동시에 접근 시 의도와 다르게 동작할 가능성이 크기 때문
• 멀티 스레드 환경에서 동기화 이슈를 차단하고 스레드 간 통신을 위해 사용되는 것이 Handler &amp;amp; Looper

1. Java IO에서 제공하는 파이프 이용
2. 스레드 간 공유 메모리를 통한 접근
3. Synchronized를 이용한 시그널링
4. BlockingQueue를 이용한 방법
스레드 통신 메커니즘핸들러 - 루퍼 - 메시지 큐 - 메시지
android.os.Looper - UI 스레드에 하나가 존재하며 소비자 스레드와 연관된 메시지 발송자 (데이터를 읽는 역활)
android.os.Handler - 큐에 메시지를 삽입하는 생산자 스레드를 위한 인터페이스와 소비자 스레드 메시지 처리, 하나의 Looper 객체는 많은 핸들러를 갖지만 모두 같은 큐에 삽입
android.os.MessageQueue - 소비자 스레드에서 처리할 메시지들이 담긴 무제한의 연결 리스트. 모든 루퍼와 스레드는 최대 하나의 메시지 큐를 가진다.
android.os.Message : 소비자 스레드에서 실행하는 메시지
Handler
• 핸들러 생성 시 기본적으로 행들러를 생성한 스레드와 루퍼에 연결
• postDelayed / postAtFrontOfQueue와 같이 메시지 순서나 보내는 시간 조작 함수 보유 &amp;gt; 스케줄링가능
Looper
• MessageQueue의 메시지나 Runnable 객체를 꺼내 핸들러에게 전달
• run() 메소드 내부에 MessageQueue 생성 &amp;gt; Looper.loop()를 통해 메시지 전달 대기
AsyncTask
• 백그라운드에서 작업 수행 뒤 결과를 UI Thread에서 생신할때 주로 사용
• 순차적으로 실행
단점
• 액티비티 종료 시 따로 명시하지 않으면 메모리에 남아 Memory leak 발생
• 한 번만 실행되고 재사용 불가
• 처리 작업의 수가 1개
• Configuration 변경 시 크래쉬 발생
대안으로 java.util.concurrent API / Kotlin coroutine / RxJAVA 사용 권장
Intent
• 구성 요소 실행 &amp;amp; 구성 요소 간 데이터 전달
• putExtra()를 통해 데이터 보관 &amp;gt; getExtra()로 전달 받을 수 있음
CustomView
• 기존에 있는 View (ImageView, TextView 등)로 표현할 수 없는 모양의 View를 구현해야 할때 필요
• View를 상속받는 자손 클래스를 만들어서 구현

1.기존 View 상속
2.onDraw(), onMeasure(), onKeyDown() 처럼 'on'으로 시작하는 슈퍼클래스 메서드를 오버라이드

• onDraw()
• 뷰를 실제 그릴때 사용
• Canvas 객체를 매개변수로 받음
• Canvas 객체는 어떤 도형을 그릴지 설정
• Paint 객체는 도형의 색, 스타일, 글꼴 등을 설정
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)
뷰의 크기 설정 시 사용

Rx관련 질문 :
새로운 스레드를 생성해도 되는데 왜 Schedulers.io() 를 사용하는가? 내부 동작이 어떻게 돌아가는 것인가를 묻는 질문
화면단에서 사용되는 request 가 하나가 아니라 적게는 한자리수 많게는 두세자리수까지 갈수 있는데 이부분에서 Thread를 계속해서 생성,수거 하게 된다면 사용할 때마다 드는 비용을 무시할수 없다. 그렇기 때문에 Thread Pool 이 사용된다. 몇개의 스레드를 생성한뒤 큐에 Task를 넣고 작업하고 있지 않은 Thread에 Task를 할당하는 방식이다. 작업이 끝난 Thread 는 다시 어플리케이션에 결과값을 리턴한다. Thread를 재사용 하기때문에 성능저하를 방지할 수 있다. 하지만 Thread를 너무 많이 만들어 놓게 되면 메모리만 낭비하게 되므로 주의해서 사용해야 한다.

프로가드
코드 축소와 바이트코드를 최적화하고 미사용 코드 명령을 제거하며 남아 있는 클래스,필드 및 메서드를 짧은 이름으로 난독 처리한다. 난독 처리된 코드는 APK 의 리버스 엔지니어링을 어렵게 만들며 보안에 민감한 기능이 앱에 사용되는 경우 특히 유용하다. 64K 참조 제한을 해결하기 위한 유용한 도구 이기도 하다.

코틀린 by lazy
lateinit은 필요할 경우 언제든 초기화가 가능한 Properties 이지만 lazy properties는 생성 후 값을 변경할 수 없는 val 로 되어 있다. by lazy 정의에 의해서 초기화를 진행하고 val 이므로 값을 교체하는 건 불가능하다. lazy를 사용하는 경우 기본 synchronized 로 동작한다.

viewModel rotate 상황에서 파기 왜 안되는지 과정 ?
ViewModelStoreOwner 인터페이스를 가지고 있는 Activity 또는 Fragment 는 viewModelStore를 가지고 있다. rotate 될 때 onDestroy 가 불리게 되는데

```kotlin
      boolean isChangingConfigurations = activity != null &amp;amp;&amp;amp; activity.isChangingConfigurations();
        if (this.mViewModelStore != null &amp;amp;&amp;amp; !isChangingConfigurations) {
            this.mViewModelStore.clear();
        }
```

viewModelStore 가 null 이 아니고 configuration변화가 없을때 clear 를 불러 주기 때문에 rotate상황에서 viewModel이 clear 되지 않는다.

Multi dex
안드로이드 앱을 구성하는 코드는 컴파일 되어 덱스 파일로 만들어 진다. 하나의 덱스 파일에는 64K 메소드참조만 저장할 수 있다. 큰 규모 앱을 작성하다 보면 앞의 메소드 제한을 훌쩍 넘게 되는데 멀티덱스를 사용하면 덱스 파일을 여러 개로 나누어 이러한 문제를 피할 수 있다.

액티비티 생명 주기
onCreate onStart onResume Running onPause onStop onDestroy

프래그먼트 생명 주기
onAttach onCreate onCreateView onActivityCreated onStart onResume Running onPause onStop onDestroyView onDestroy onDetach

서비스 생명 주기 2가지
onCreate onStartCommand() return start_sticky , start_not_sticky, start_redeliver_intent Service Running onDestroy

onCreate onBind onUnbind onDestroy

FLAG_ACTIVITY_CLEAR_TOP 과 FLAG_ACTIVITY_SINGLE_TOP 차이
CLEARTOP 은 A -&amp;gt; B -&amp;gt; A 일 때 최상위 A 만 남고 나머지 다 destroy SINGLETOP 은 A -&amp;gt; B -&amp;gt; B 일때 A -&amp;gt; B 로 B가 하나로 됨.

스레드 통신방법?
스레드가 시작 되면 이 스레드는 루퍼! 핸들러! 메세지 큐! 를 하나씩 가지고 있다. 메세지큐는 외부 스레드로부터 핸들러를 통하여 받은 message 혹은 Task 를 저장하는 역할을 한다. 루퍼는 메세지큐에서 메세지를 순차적으로 꺼내서 핸들러에게 전달하는 역할!! 핸들러는 두가지 기능이 있다.

루퍼에게서 받은 메세지 혹은 Task 를 일정한 시간에 수행하는 기능을 한다.
외부 스레드로부터 받은 메세지를 핸들러를 통하여 Message Queue에 집어 넣는 역할을 한다.
스레드 충돌을 막으려면?
두개 이상의 스레드가 같이 참조 하는 메소드 혹은 블럭구문을 synchronized , synchronized block 사용해서 해결할 수 있다.

Viewholder 패턴에 대해 설명
예전 ListView 를 사용할 때 getView() 를 오버라이드 해서 뷰를 인플레이팅 시키는데 이부분에서 계속해서 생성하고 findviewById 를 불러주게 되면 부담이 많이 가는 작업이 된다. 데이터가 많아 질 수록 버벅거리는 현상이 일어날 확률이 높다. 그래서 viewHolder 패턴이 나오게 되었는데 해당 뷰가 널일때만 view를 인플레이트 시키고 viewHolder 클래스에 findviewById 를 사용해서 viewHolder 는 해당 뷰에 태깅처리해서 다음번 부터는 태그한 viewHolder 를 가져와서 사용한다. 그 이후에 viewHolder 를 강제로 구현하게 나온것이 RecyclerView 이다.

Dangerous permission
시스템 권한은 두가지로 나눠 지는데 정상권한과 위험권한이 있다. 정상권한은 사용자 개인정보를 직접 위험에 빠뜨리지않는다. 앱이 매니페스트에 정산 권한을 나열하는 경우 시스템은 자동으로 권한을 부여. 위험권한은 사용자 기밀 데이터에 대한 액세스를 앱에 부여할 수 있다. 위험권한을 나열하는 경우, 사용자는 앱에 대한 명시적 승인을 제공해야 한다.

Intent service 란?
IntentService 는 Intent를 사용해서 시작되고 하나의 workerThread 가 생성 되고 Queue에 작업이 들어 가게 된다. onHandleIntent() 메소드가 이 스레드 내에서 호출되고 작업이 다 끝나면 알아서 destroy 되는 방식이라 stopSelf를 불러줄 필요가 없다.

Foreground service 사용?
Fragment 사용 장점 ?
Activity를 분할하여 화면의 한 부분을 정의할수 있고 자신의 생명주기를 가진다. 액티비티내에서 실행 중 추가 제거가 가능하고 다른 액티비티에서도 사용 할 수 있어 재사용성이 뛰어나다. 태블릿 지원하게 될 때 용이하게 사용 가능하다.

Parcelable serializable 차이와 성능은?
복잡한 클래스의 객체를 이동시키려고 할 때 Serializable 또는 Parcelable 을 사용해서 직렬화하여 인텐트에 추가합니다. Serializable 은 Java 의 인터페이스이다. 해당 객체에 인터페이스 Serializable 을 사용해주면 되기 때문에 사용하기 쉽다. 하지만 내부에서 Reflection 을 사용하여 직렬화 처리하기 때문에 성능 저하 및 배터리 소모가 발생되게 된다. Parcelable 은 Android SDK 의 인터페이스이다. 직렬화 방법을 사용자가 명시적으로 작성하기 때문에 작동으로 처리하기 위한 reflection이 필요없다. 속도적인 측면에서는 Parcelable 이 10배 이상 빠르다.

하지만 Serializable 을 사용할 때 writeObject 와 readObject 를 구현해 주면 Parcelable 보다 쓰기는 속도가 3배 읽기의 경우 1.6배 더 빠르다. 어떻게 사용하느냐에 따라 속도적인 측면에서 비교할 수 있다.

onSaveInstanceState 와 onRestoreInstanceState
Activity 또는 Fragment 가 종료 될 때 onSaveInstanceState은 onPause 다음 상태에서 불리게 된다. 이때 파라미터로 받은 Bundle에 데이터를 저장하고 onCreate 시점에서 savedInstanceState bundle 을 통해 값을 가져와서 사용할 수 있다. onRestoreInstanceState 은 정상적인 경우는 불리지 않고 메모리 부족한 경우 프로세스 자체에서 Activity 또는 Fragment 를 강제종료할 때 onRestoreInstanceState가 불리게 된다. bundle 통해서 데이터 백업 가능
&lt;/파트&gt;</content><author><name>lee989898</name></author><category term="android" /><summary type="html">안드로이드 면접 준비</summary></entry><entry><title type="html">코틀린 면접 준비</title><link href="https://lee989898.github.io/ad" rel="alternate" type="text/html" title="코틀린 면접 준비" /><published>2022-03-18T01:06:00+09:00</published><updated>2022-03-18T01:06:00+09:00</updated><id>https://lee989898.github.io/ad</id><content type="html" xml:base="https://lee989898.github.io/ad">&lt;h2 id=&quot;코틀린-면접-준비&quot;&gt;&lt;strong&gt;코틀린 면접 준비&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;코틀린-질문&quot;&gt;&lt;strong&gt;코틀린 질문&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;코틀린 사용의 장점&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;널 안전성&lt;/li&gt;
  &lt;li&gt;가변/불변 구분&lt;/li&gt;
  &lt;li&gt;람다 표현식 지원&lt;/li&gt;
  &lt;li&gt;스트림 API 지원&lt;/li&gt;
  &lt;li&gt;완벽한 자바 호환성&lt;/li&gt;
  &lt;li&gt;Java에 비해 훨씬 간결한 코드&lt;/li&gt;
  &lt;li&gt;객체지향이면서 함수형 프로그래밍 언어&lt;/li&gt;
  &lt;li&gt;자바와 상호운용 가능 (자바에서 코틀린으로 작성된 클래스를 부를 수 있으며 반대로도 가능)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;클래스, 객체, 인스턴스&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;클래스: 객체를 만들어 내기 위한 설계도 혹은 툴
객채: 소프트웨어 셰계에 구현할 대상
인스턴스: 설계도를 바탕으로 소프트웨어 세계에 구현된 구체적인 실체&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Array와 List의 차이&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Array의 경우 고전적인 의미의 배열이며, 고정된 사이즈의 연속된 메모리 공간에 할당된다.&lt;br /&gt;
따라서 인덱스를 통해 값을 변경하는 것이 가능하며(mutable), 사이즈를 변경하는 것이 불가능하다.&lt;br /&gt;
List의 경우 크게 List와 MutableList가 있는데, ArrayList또는 LinkedList의 구현체다.
Default로는 ArrayList의 구현체를 따른다.&lt;br /&gt;
이름에서도 볼 수 있듯이 List는 Immutable이며 MutableList는 Mutable이다.
성능이 중요시 되는 부분을 제외하고는 List를 쓰는것이 바람직 하다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Scope Function&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;코틀린에서 제공하는 기본 라이브러리 함수로, 객체를 context내에서 코드 단위 블럭으로 실행하는데 묵적을 가진 함수&lt;br /&gt;
5개의 스코프 함수가 존재: let, run, with, apply, and also&lt;/p&gt;

&lt;p&gt;리시버와 람다 함수&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;스코프 함수를 사용할 떄 넘겨주는 두 객체&lt;/li&gt;
  &lt;li&gt;차이점
    &lt;ul&gt;
      &lt;li&gt;객채를 접근하는 방법: this, it
        &lt;ul&gt;
          &lt;li&gt;run, with, apply -&amp;gt; 자기 자신을 블럭(this)으로 넘기고 this를 사용해 객체에 접근&lt;/li&gt;
          &lt;li&gt;let, alse -&amp;gt; 자기 자신을(람다) 인자(it)으로 넘기고 it을 사용해 객체에 접근&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;리턴 값
        &lt;ul&gt;
          &lt;li&gt;apply, also -&amp;gt; 리시버 객체를 마지막에 리턴(자기 자신을 리턴)&lt;/li&gt;
          &lt;li&gt;let, run, with -&amp;gt; 람다 함수의 마지막 결과를 리턴(코드 블럭의 결과를 리턴)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;let : 이 함수를 호출한 객체를 이어지는 함수 블록의 인자로 전달한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it으로 리시버에 접근하고 람다 함수의 마지막 결과를 리턴&lt;/li&gt;
  &lt;li&gt;리시버의 여러 함수들을 호출할 떄 사용&lt;/li&gt;
  &lt;li&gt;리시버 객체의 확장 함수로 사용 -&amp;gt; val length = str?.let {it.length}&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;getPadding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;은&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;패딩&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;값&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setPadding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;with : 인자로 받은 객체를 이어지는 함수 블록의 리시버로 전달, block 함수의 결과를 반환&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;this로 리시버에 접근, 람다 함수의 마지막 결과를 리턴(리턴 값을 사용하지 않는 경우에 쓸 것을 권장)&lt;/li&gt;
  &lt;li&gt;리시버 객체의 확장 함수로 사용하지 않음 -&amp;gt; with(리시버 객체) { 람다 함수}&lt;/li&gt;
  &lt;li&gt;run과 동일한 기능&lt;/li&gt;
  &lt;li&gt;인스턴스를 참조연산자 대신 parameter로 받아 사용 ( &amp;lt;-&amp;gt; run과 차이)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;textView!!!&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;gravity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gravity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CENTER_HORIZONTAL&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;run : 인자가 없는 익명 함수처럼 사용하는 형태와 객체에서 호출하는 형태 제공 함수형 인자 block 을 호출하고 결과반환 또는 호출한 객체를 함수형 인자 block의 리시버로 전달하고 그 결과를 반환한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;this로 리시버에 접근하고, 람다 함수의 마지막 결과를 리턴&lt;/li&gt;
  &lt;li&gt;마지막 구문의 결과 값을 반환한다. ( &amp;lt;-&amp;gt; apply와 차이)&lt;/li&gt;
  &lt;li&gt;with와 동일한 기능&lt;/li&gt;
  &lt;li&gt;리시버의 확장 함수로 사용 -&amp;gt; 리시버.run { 람다 함수 }&lt;/li&gt;
  &lt;li&gt;람다함수에서 여러 값을 초기화하고 리턴 값을 어떤 객체의 초기값으로 사용할 때 사용&lt;/li&gt;
  &lt;li&gt;이미 인스턴스가 만들어진 후에 인스턴스의 함수나 속성을 scope 내에서 사용해야 할 떄 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;AplusB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;textView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;와&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;비슷하지만&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textView&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;의&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;널체크를&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;해야&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;하는경우&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;사용하면&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;좋다&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;textView!!!&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;gravity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gravity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CENTER_HORIZONTAL&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;apply : 이 함수를 호출한 객체를 이어지는 함수 블록의 리시버로 전달한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it으로 리시버에 접근하고, 리시버 객체를 리턴&lt;/li&gt;
  &lt;li&gt;리시버 스스로를 리턴하기 때문에 빌더패턴처럼 연속적으로 함수 호출 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1f&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;를&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;리시버로&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;전달&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;받았기&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;때문에&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;이나&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topMargin&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;바로사용&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;topMargin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;처리가 끝나면 인스턴스를 반환 : apply, also&lt;/li&gt;
  &lt;li&gt;처리가 끝나면 최종 값을 반환 : run, let, with(?)&lt;/li&gt;
  &lt;li&gt;참조 연산자 없이 인스턴스의 변수와 함수 사용 → apply, run&lt;/li&gt;
  &lt;li&gt;파라미터로 인스턴스를 넘긴 것처럼 it을 통해 인스턴스를 사용 : also, let&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;LiveData 란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;주어진 lifecycle 내에서 관찰할 수 있는 data holder class.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;get()과 직접 참조(=)의 차이&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MutableLiveData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LiveData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LiveData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;직접 선언하는 것(b)과 get() = … 으로 선언하는 것(c)의 차이점은, 직접 선언하면 b 와 a 는 서로 동일한 객체를 바라보게 되는 것이고, get() 으로 선언할 경우엔 내부적으로 함수가 호출되고, 해당 함수의 결과 값으로 a 객체를 리턴하는 것.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;by lazy vs lateinit&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;쉽게 설명하자면, var에서만 사용 가능한 lateInit, val에서만 사용 가능한 by lazy.&lt;br /&gt;
lateInit은 언제든 null을 제외한 값으로 초기화 값을 변경할 수 있지만, by lazy 는 값을 교체하는게 불가능하다.&lt;br /&gt;
null이 필요할 때를 생각해서 사용해야 한다!&lt;/p&gt;

&lt;h3 id=&quot;by-lazy--initializer-&quot;&gt;by lazy { initializer }&lt;/h3&gt;

&lt;p&gt;지정된 초기화 함수 “initializer” 과 기본 thread-safety 모드인 “LazyThreadSafetyMode.SYNCHRONIZED” 을 사용한 “Lazy” interface의 새 인스턴스를 만든다.
값의 초기화에서 exception이 발생하면, 다음 access에서 값을 재 초기화를 시도한다.&lt;br /&gt;
반환된 인스턴스는 동기화하는데 자기 자신을 사용한다. 반환된 인스턴스의 외부 코드로부터 동기화를 하지 마라. 그건 우연히 deadLock을 야기시킬 수 있다. 또한, 이 행동은 나중에 변경될 수도 있다.&lt;/p&gt;

&lt;p&gt;즉, 기본 쓰레드 세잎 모드를 사용해 initializer 함수에 해당하는 새로운 인스턴스를 만들어 사용하는 것이며, kotlin.jvm 에서 동작한다.
이외 (1)스레드를 컨트롤 할 수 있고, (2)객체를 지정해 동기화할 수도 있다.&lt;/p&gt;

&lt;p&gt;즉, 첫 인스턴스를 생성한 후로는 그 인스턴스의 값 만을 가지고 사용한다.&lt;/p&gt;

&lt;h3 id=&quot;lateinit&quot;&gt;lateInit&lt;/h3&gt;

&lt;p&gt;사용 전 반드시 초기화를 해줘야 한다. 물론 초기화가 되어있는지 확인하는 함수가 있긴 하지만, 초기화 하지 않고 사용할 경우 익셉션이 발생한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;companion object 란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;properties(속성)과 functions(함수)가 클래스에 연결되어 있지만, 해당 클래스의 인스턴스에는 연결되어 있지 않은 싱글톤 오브젝트이다. 기본적으로 java의 “static” 키워드와 같지만, 꼬임이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ex-1 : 기본 사용법 ( 클릭 )&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;LATTE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;latte&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bestBeverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;c1&quot;&gt;// all return &quot;latte&quot;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Companion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bestBeverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ex-1을 보고 아래와 같이 생각할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cafe class의 메소드는 companion object 내에 어떤 프로퍼티든 참조할 수 있다. 마치 프로퍼티가 Cafe class 자체에서 field로 선언된 것 처럼&lt;/li&gt;
  &lt;li&gt;companion object 내 프로퍼티들은 ContainingClass.PROPERTY_IN_COMPANION_OBJECT 처럼 “statically”하게 참조될 수 있다.&lt;/li&gt;
  &lt;li&gt;companion object에 대한 기본 이름은 Companion 이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;ex-2 : companion object 에 이름 붙이기 ( 클릭 )&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;LATTE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;latte&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bestBeverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// all return &quot;latte&quot;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bestBeverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// this no longer compiles&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Companion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;ex-3 : companion object 내 프로퍼티에 private ( 클릭 )&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;LATTE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;latte&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bestBeverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// both of these will give you an error&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// this still evaluates to &quot;latte&quot;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bestBeverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;companion object 는 최초 한번만 선언되고 두 개 이상 선언이 되지 않는다. 또한, 인터페이스를 상속받아 작업할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ex-4 : interface 상속 ( 클릭 )&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Drinkable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;LATTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Drinkable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;I like coffee&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;LATTE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LATTE&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;가능&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그럼 일반 object 대신 companion object 를 사용하는 이유는 뭘까?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ex-5 : &lt;del&gt;companion&lt;/del&gt; object&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;LATTE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;latte&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bestBeverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ex-5를 보면 아래와 같은 차이점을 발견할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Companion 의 기본 이름이 지정된 companion object와 달리, 일반 object 선언은 이름을 지어야만 한다.&lt;/li&gt;
  &lt;li&gt;일반 object 내 fields를 참조하기 위해선 객체 이름을 명시적으로 사용한 포함된 클래스를 요구한다. companion object를 가지고, 간단하게 Cafe.LATTE를 만들 수 있지만, 일반 object를 가지고는, Cafe.Beverage.LATTE를 써야만 한다.&lt;/li&gt;
  &lt;li&gt;Companion object 는 포함된 클래스가 처음 로드될 때 초기화 된다. - 비록 companion object가 사용되지 않더라도. 결과적으로, companion objects는 lazy가 아니다. 위 예제 내 일반 object는 그들이 처름 접근할 때 초기화 된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;그래서-왜-companion-object를-쓰는-걸까&quot;&gt;그래서 왜 companion object를 쓰는 걸까?&lt;/h3&gt;

&lt;p&gt;“static” 프로퍼티/함수에 접근하기 위한 편리한 약칭을 제공하기 때문. 그게 전부다. 뭔 이유가 있다면, 만약 늦은 초기화를 해야 한다면, 일반 object를 대신 사용해라.&lt;/p&gt;

&lt;hr /&gt;</content><author><name>lee989898</name></author><category term="android" /><summary type="html">코틀린 면접 준비</summary></entry><entry><title type="html">컴퓨터과학 면접 준비</title><link href="https://lee989898.github.io/ad" rel="alternate" type="text/html" title="컴퓨터과학 면접 준비" /><published>2022-03-17T01:06:00+09:00</published><updated>2022-03-17T01:06:00+09:00</updated><id>https://lee989898.github.io/ad</id><content type="html" xml:base="https://lee989898.github.io/ad">&lt;h2 id=&quot;컴퓨터과학-면접-준비&quot;&gt;&lt;strong&gt;컴퓨터과학 면접 준비&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;1분자기소개&lt;/p&gt;

&lt;p&gt;안녕하십니까 명지대학교 컴퓨터공학과 4학년 이준경입니다.
일단 면접의 기회를 주셔서 고맙습니다
제가 솝트에 지원하게 된 이유는&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;인성-질문&quot;&gt;&lt;strong&gt;인성 질문&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;자신의 장점과 단점 3가지&lt;/p&gt;

&lt;p&gt;자신의 단점을 극복했던 방법&lt;/p&gt;

&lt;p&gt;협업 중 갈등상황을 겪었던 경험이 있는지, 어떻게 해소했는지&lt;/p&gt;

&lt;p&gt;팀 내에 자기주장이 강한 사람/사기가 없는 사람 이 있을 때 어떻게 해결할 것인가?&lt;/p&gt;

&lt;p&gt;팀 내에 실력적으로 부족한 팀원이 있을 때 어떻게 할 것인가?&lt;/p&gt;

&lt;p&gt;갈등이 일어나지 않게 하기 위해 노력할 부분은 무엇일까?&lt;/p&gt;

&lt;p&gt;협업할 때 지원자와 가장 안 맞는 유형&lt;/p&gt;

&lt;p&gt;협업에서 가장 중요하다고 생각하는 것&lt;/p&gt;

&lt;p&gt;솝트를 통해서 얻고 싶은 3가지&lt;/p&gt;

&lt;p&gt;친구들 사이에서 지원자는 어떤 친구인가?&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;컴퓨터-과학&quot;&gt;&lt;strong&gt;컴퓨터 과학&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;프레임워크와 라이브러리&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;자동차의 뼈대(프레임워크)가 있고 이 뼈대를 기초로 승용차, suv등의 자동차를 완성한다. 여기에 추가적인 기능인 네비게이션이나
쿠션, 유리 등(라이브러리)을 가져와 차를 꾸민다.&lt;/p&gt;

&lt;h2 id=&quot;프레임워크-란-&quot;&gt;프레임워크 란 ?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;기본적인 뼈대가 완성되어 있고, 규칙이 존재하는 개발 환경&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;특징&quot;&gt;특징&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;개발자들이 따라야 할 가이드라인을 가진다.&lt;/li&gt;
  &lt;li&gt;개발할 수 있는 범위가 정해져 있다.&lt;/li&gt;
  &lt;li&gt;개발자를 위한 다양한 도구들이 지원된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;장점&quot;&gt;장점&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;개발 편의성이 오르고 시간을 절약할 수 있다.&lt;/li&gt;
  &lt;li&gt;오류의 폭을 좁힐 수 있다.&lt;/li&gt;
  &lt;li&gt;어느 정도의 코드 품질을 보장한다.&lt;/li&gt;
  &lt;li&gt;유지 보수하기 좋다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;단점&quot;&gt;단점&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;프레임워크의 의존도가 늘어나 개발 능력이 저하될 수 있다.&lt;/li&gt;
  &lt;li&gt;개발자의 자유도가 떨어진다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;라이브러리-란&quot;&gt;라이브러리 란?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;개발 시 활용 가능한 도구들을 모아 모듈화한 것&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;라이브러리와-api-차이&quot;&gt;라이브러리와 API 차이&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;라이브러리 : 실제로 “실행이 되는 기능”을 담당하는 단편화된 프로그램&lt;/li&gt;
  &lt;li&gt;API(Application Programming Interface) : 다른 목적으로 개발된 프로그램/라이브러리 들의 특정 기능을 “호출”하기 위해서 인터페이스를 노출시킨 것&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;프레임워크와-라이브러리-&quot;&gt;프레임워크와 라이브러리 ?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;프레임워크는 단순히 “라이브러리의 집합”은 아니다!&lt;/li&gt;
  &lt;li&gt;프레임워크는 개발자들의 “환경”을 제한하는 대신 일정 “환경”을 제공&lt;/li&gt;
  &lt;li&gt;라이브러리는 내가 원하는 코드를 원할 때 원하는 곳에 가져다 넣을 수 있다. → 즉, “환경”은 없고 의도와 목적만이 존재&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;큐와 스택&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;큐queue&quot;&gt;큐(Queue)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;FIFO(First In First Out), 즉, 선입선출의 방식으로 동작하며, 프로세스 처리, CPU관리 등에 많이 사용된다.&lt;/li&gt;
  &lt;li&gt;큐에 자료를 한 개 집어 넣는 동작을 인큐(EnQueue)라고 하며, 큐 안에 있는 자료를 한 개 꺼내는 동작을 디큐(DeQueue)라고 한다.&lt;/li&gt;
  &lt;li&gt;리스트를 이용한 큐 구현(Linear Queue(선형 큐)) 에서는 디큐로 맨 앞자리를 날렸을 때 남은 부분이 앞으로 한 칸씩 땡겨져 오다 보니 속도 측면에서 단점이 있다.&lt;/li&gt;
  &lt;li&gt;Linear Queue를 보완하기 위해 Circular Queue(원형 큐)가 등장했고, 이는 디큐로 빼 놓은 자리에 인큐로 넣음으로써 낭비를 막는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ex) 버스 또는 택시 등 줄 서기, 롤에서 “큐를 돌린다” 등의 예가 있다.&lt;/p&gt;

&lt;h3 id=&quot;스택stack&quot;&gt;스택(Stack)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;LIFO(Last In First Out), 즉, 후입선출의 방식으로 동작하며, 문서 작업에서 ctrl+z, 캐시 등에 많이 사용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ex) 쌓여 있는 접시 또는 책 등&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;쿠키, 세션, 캐시&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP(HyperText Transfer Protocol)은 브라우저 같은 응용 프로그램을 통해 사용자와 서버 사이에 전송하는 프로토콜이며, 이는 연결 상태를 유지하지 않는 비 연결 프로토콜이라는 특징을 가짐&lt;/li&gt;
  &lt;li&gt;사용자의 요청에 따라 서버에 접속해 응답 데이터를 전송한 뒤 연결을 종료시켜 주다 보니, 매 번 재 연결을 해야 했고, 이러한 단점을 해결하기 위해 쿠키나 세션을 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;쿠키cookie&quot;&gt;쿠키(Cookie)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;사용자의 브라우저에 저장되기 때문에 서버의 자원을 사용할 수 없고, 사용자의 컴퓨터만 있으면 누구나 쿠키 안에 데이터를 확인할 수 있기 때문에 보안성이 낮다.&lt;/li&gt;
  &lt;li&gt;Cookie는 인터넷 사용자가 특정 웹서버에 접속할 때, 생성되는 개인 아이디와 비밀번호, 방문한 사이트의 정보를 담은 임시 파일로써, Server가 아닌 Client에 텍스트 파일로 저장되어 다음에 해당 웹서버를 찾을 경우 웹서버에서는 그가 누구인지 어떤 정보를 주로 찾았는지 등을 파악할 때 사용&lt;/li&gt;
  &lt;li&gt;예를 들어, 검색 키워드 정보나 자동 로그인 유지 정보, 팝업 보지 않기, 쇼핑 카트나 위시 리스트 저장, 특정 웹사이트에 방문한 적이 있는지, 또 접속했다면 얼마나 자주 방문했는지 등에 관한 정보들을 담고 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;세션session&quot;&gt;세션(Session)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;클라이언트와 웹 서버간에 네트워크 연결이 지속적으로 유지되고 있는 상태&lt;/li&gt;
  &lt;li&gt;서버에 접속하지 않는 이상 데이터를 탈취할 수 어렵기 때문에 중요한 데이터를 저장하는데 주로 사용&lt;/li&gt;
  &lt;li&gt;세션에 관련된 데이터는 서버에 저장 → 쿠키에 비해 보안성이 높음&lt;/li&gt;
  &lt;li&gt;웹 브라우저의 캐시에 저장되어 브라우저가 닫히거나 서버에서 삭제 시 사라짐&lt;/li&gt;
  &lt;li&gt;예를 들어, 로그인 정보 유지에 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;캐시cache&quot;&gt;캐시(Cache)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;데이터나 값을 미리 복사해 임시로 저장해두는 장소를 의미&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Process vs Thread&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;process&quot;&gt;Process&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;운영체제로부터 자원을 할당받는 작업의 단위&lt;/li&gt;
  &lt;li&gt;컴퓨터에서 실행 중인 컴퓨터 프로그램&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;thread&quot;&gt;Thread&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;프로세스가 할당받은 자원을 이용하는 실행의 단위&lt;/li&gt;
  &lt;li&gt;하나의 프로세스가 생성되면 하나의 스레드가 같이 생성 → 메인 스레드&lt;/li&gt;
  &lt;li&gt;여러 개의 스레드를 가질 수 있음 → 멀티 스레드&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;컨텍스트 스위칭 오버헤드 정도&lt;/li&gt;
  &lt;li&gt;자원 공유 가능 여부&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;MultiThread 에서 작업할 때 발생하는 문제&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;Thread 란? 위에 설명 했듯, 프로그램의 흐름을 말한다.&lt;/li&gt;
  &lt;li&gt;Multi Thread 란? 프로그램의 흐름이 2개 이상인 것을 말한다. 매우 빠른 시간 간격으로 스위칭 되기 때문에 동시( = concurrent )에 실행되는 것처럼 보인다.&lt;/li&gt;
  &lt;li&gt;Process Synchronization(프로세스 동기화 = Thread Synchronization) 이란? 서로 간에 영향을 주고 받는 데이터들 간에 데이터의 일관성이 유지될 수 있도록 해주는 것!&lt;/li&gt;
  &lt;li&gt;MultiThead 실행 방법&lt;br /&gt;
동시성( Concurrency ) : 멀티 작업을 위해 1개의 코어로 스레드마다 돌아가면서 실행하지만, 너무 빨라 독립적으로 돌아가는 것 처럼 보임&lt;br /&gt;
병렬성( Parallelism ) : 스레드마다 독립적인 core가 할당되어 독립적인 core에서 작업이 이뤄지는 것을 말함&lt;br /&gt;
코어 &amp;gt; 쓰레드 → 병렬성 보장&lt;br /&gt;
코어 &amp;lt; 쓰레드 → 병렬설 보장 x, 동시성 보장을 위해 우선순위를 매겨줌 → 쓰레드 스케쥴링&lt;/li&gt;
  &lt;li&gt;쓰레드 스케쥴링 방식&lt;br /&gt;
우선 순위( Priority ) 방식 : 우선 순위가 높은( 1 : 낮음, 10 : 높음 ) 쓰레드가 실행을 더 많이 하도록 스케줄링하는 방법&lt;br /&gt;
순환 할당( Round-Robin ) 방식 : 시간 할당량을 정해 쓰레드를 정해진 시간 만큼만 실행하는 방법으로, JVM 안에서 이루어 지기 떄문에 개발자가 제어할 수 없음&lt;/li&gt;
  &lt;li&gt;Multi Thread(Thread 2개)에서 하나의 공통된 값을 가져다 쓰면서 변경해, 그럴 경우 값을 유지하는 방법은?&lt;br /&gt;
3번에서 얘기한 대로, 동기화를 이용하면 된다. 동기화 방법으로 동기화 메소드와 동기화 블록 방법 등이 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hash 란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;Hash 함수 ? Hash 알고리즘을 구현하여 원본 데이터만 넣으면 Hash 값을 내보내 주는 함수&lt;br /&gt;
Hash 알고리즘 ? 가변적인 데이터의 길이를 고정적인 데이터 길이로 변환해 주는 알고리즘&lt;/p&gt;

&lt;p&gt;Hash 값의 특징 ?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Hash 값은 원본으로 되돌릴 수 없음( 계산을 통해 원본을 얻어내기 어렵다 → 원본을 알아낼 수 없게 암호화하는 단방향 암호화에 많이 사용 )&lt;/li&gt;
  &lt;li&gt;원본 데이터가 같으면 Hash 값도 일정( 정해진 알고리즘을 통해 원본 데이터를 규칙에 맞게 변경하므로 원본 데이터가 같으면 Hash도 같다  )&lt;/li&gt;
  &lt;li&gt;충돌 가능성이 존재( Hash 값은 정해진 길이(길이는 알고리즘마다 다르게 정해짐)의 값 이기 때문에 원본이 다르다고 무조건 다른 값을 만들 순 없다 → 확률이 적다 )&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hash 알고리즘의 용도 ?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;무결성의 확인 ?&lt;br /&gt;
무결성이란 데이터가 변했는지 변하지 않았는지의 여부&lt;br /&gt;
Hash 알고리즘을 사용하면 원본이 같으면 같은 Hash 값 나오기 때문에, 원본과 Hash 값을 직접 비교할 수 있다는 장점이 있다.&lt;br /&gt;
아무리 큰 데이터여도 고정된 길이의 Hash 값으로 바꿀 수 있기 때문에 비교 속다가 빠르다는 장점이 있다.&lt;/li&gt;
  &lt;li&gt;검색 속도를 높이는 용도로 사용 ?&lt;br /&gt;
예를 들어, 많은 데이터를 가진 DB에서 “chu”를 찾기 위해선 한 글자씩 찾아야 한다. → 퍼포먼스 떨어짐 → Hash 함수를 통해 DB의 데이터를 고정된 크기의 Hash 값을 가진 공간(Bucket)을 만들어 저장하고 원본에 링크해 놓는 다면, 검색 값인 “chu”를 Hash 함수를 거친 Hash 값으로 bucket과 매칭시킨다면, 바로 링크된 원본을 찾아낼 수 있다. → bucket을 만드는 공간이 소요되지만, 검색이 굉장히 빨라지는 장점이 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;질문!&lt;br /&gt;
Hash 값으로 변경되더라도 하나씩 비교해줘야 하는거 같은데, 왜 빠르지?&lt;br /&gt;
해시 검색을 위해서는 검색에 효율적인 이진 트리 방식을 사용한다. 이를 사용하기 위해서는 모든 값이 같은 크기의 공간에 담을 수 있는 서로 비교 가능한 숫자여야 하기 때문에 &lt;em&gt;Hash 함수를 통해 정수 값으로 만든 후 이진 트리 형태로 정렬하여 검색에 사용&lt;/em&gt;하는 것.&lt;br /&gt;
Hash 함수는 Hash 형식에 따라 특정 길이(128비트, 256비트, 512비트 등)로 정해져 있다. 이는 해당 길이 만큼의 정수 값으로 변환 시켜주는 것. 따라서 구조적으로 가변적인 길이의 문자열을 1바이트씩 직접 비교하는 것보다 빠릅니다.&lt;/p&gt;

&lt;p&gt;Hash 함수 사용 시 주의점 ?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Salt 의 사용?&lt;br /&gt;
보안 목적으로 사용 시 반드시 사용 → 원본 데이터에 첨가(salt)해서 Hash 알고리즘을 통해 salt를 첨가한 Hash 값을 보낸다.&lt;br /&gt;
→ 즉, 원본 데이터에 salt를 첨가해 Hash 값을 다르게 만들기 위해 사용한다.&lt;br /&gt;
→ 왜 다르게 하지? → Hash 값을 통해 원본을 알아낼 수 있는 방법이 있다!? → Brute-Forca Attack( 무작위로 문자열을 대입하는 해킹 방법 ) 으로 가능하며, 이는 Hash 함수에 무작위 값을 넣어 나온 Hash 값을 해킹해 낸 Hash 값과 대조하여 원본을 알아내는 것이다.&lt;br /&gt;
따라서, 아래와 같은 사항을 따르는게 좋다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1) Salt를 첨가하여 Hash 값을 다르게 한다.&lt;br /&gt;
2) Salt의 길이를 허용하는 한 길게 함&lt;br /&gt;
3) Salt를 안전하게 보관함&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Key stretching 의 사용?&lt;br /&gt;
Hash 함수를 여러 번 통과시키는데 사용 → 이는 Hash 함수를 거쳐 나온 Hash 값을 다른 Hash 함수에 거치는 작업을 반복함으로써 어렵게 하는 방식이다.&lt;/li&gt;
  &lt;li&gt;충돌의 회피 ?&lt;br /&gt;
데이터 저장의 목적으로 사용 시 사용 → 단점인 서로 다른 값 이더라도 Hash 값이 같을 확률이 존재! → 보안에도, 데이터 저장에도 큰 문제!! → 이를 위해 아래와 같은 사항이 추가된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1) 리스트로 데이터를 관리하는 Chaining&lt;br /&gt;
2) 위치를 조정하는 Open Addressing&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;RestFul Api ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;REpresentational State Transfer, 즉, 서버로 자원을 전달 시, 대표적인 “상태”를 함께 주고 그 상태에 맞는 응답을 서버에서 받는 것을 의미한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rest-&quot;&gt;REST ?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP URI(Uniform Resource Identifier)를 통해 자원(Resource)을 명시하고, HTTP Method(POST, GET, PUT, DELETE)를 통해 해당 자원에 대한 CRUD Operation을 적용하는 방식으로 동작&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rest-api-&quot;&gt;REST API ?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;REST 기반으로 서비스 API를 구현한 것&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;http-method&quot;&gt;HTTP Method&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;POST : URI 요청 시 리소스 생성을 위해 설계되었기 때문에 body에 데이터를 담아 보내기 때문에 url에 보이지 않는다. 즉, 정보를 생성하기 위해 만들어짐.&lt;/li&gt;
  &lt;li&gt;GET : 해당 리소스를 조회하게 설계되었기 때문에, 원하는 값을 url에 보여준다. 즉, 정보를 조회하기 위해 만들어짐.&lt;/li&gt;
  &lt;li&gt;PUT or PATCH or UPDATE : 해당 리소스를 수정&lt;/li&gt;
  &lt;li&gt;DELETE : 해당 리소스를 삭제&lt;/li&gt;
&lt;/ul&gt;</content><author><name>lee989898</name></author><category term="android" /><summary type="html">컴퓨터과학 면접 준비</summary></entry><entry><title type="html">정보보안 기본 3원칙</title><link href="https://lee989898.github.io/sc2-02" rel="alternate" type="text/html" title="정보보안 기본 3원칙" /><published>2022-03-17T01:06:00+09:00</published><updated>2022-03-17T01:06:00+09:00</updated><id>https://lee989898.github.io/sc2-02</id><content type="html" xml:base="https://lee989898.github.io/sc2-02">&lt;h2 id=&quot;정보보안-기본-3원칙&quot;&gt;&lt;strong&gt;정보보안 기본 3원칙&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;정보보안이란&quot;&gt;&lt;strong&gt;정보보안이란?&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;정보보안의 목적&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;정보시스템을 내, 외부에 존재하는 위협으로부터 안전하게 보호&lt;/li&gt;
  &lt;li&gt;정보가 생성되어 소멸되기까지 그 처리 및 유통의 생명 주기 전반(정보의 수집, 가공, 저장, 검색, 송신, 수신 등)에 정보의
훼손, 변조, 유출 등을 방지하기 위한 관리적, 기술적 수단을 강구&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;정보보안의 기본 3원칙&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;다음의 3가지 기본 원칙이 보장되어야 정보시스템을 내,외부에 존재하는 위협으로부터 안전하게 보호 가능&lt;/li&gt;
  &lt;li&gt;기밀성, 무결성, 가용성&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;정보보안의-기본-3원칙-기밀성confidentiality&quot;&gt;&lt;strong&gt;정보보안의 기본 3원칙: 기밀성(Confidentiality)&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;기밀성(Confidentiality)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;오직 인가된 사용자, 인가된 프로세스, 인가된 시스템만이 알 필요성에 근거하여 주어진 정보/시스템에 접근이 허용되어야 한다는 원칙&lt;/li&gt;
  &lt;li&gt;기밀성은 데이터 처리의 모든 접속점에서 필요한 수준의 비밀 엄수가 강제되도록 하고, 허가받지 않은 정보 유출을 방지하는 것을 보장&lt;/li&gt;
  &lt;li&gt;이러한 수준의 기밀성은 데이터가 네트워크 내의 시스템과 장비에 보관되어 있을 때나 데이터가 전송될 떄 그리고 데이터가 목적지에 도달한 이후에도 유지되어야 함&lt;/li&gt;
  &lt;li&gt;기밀성을 보장하기 위한 보안 기술에는 암호화, 접근 제어 등이 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;기밀성을 위협하는 공격&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;스누핑(Snooping)
    &lt;ul&gt;
      &lt;li&gt;사전적 의미는 “기웃거리다, 캐 묻다”&lt;/li&gt;
      &lt;li&gt;정보에 대한 비인가 접근 또는 정보의 도청(획득)을 의미&lt;/li&gt;
      &lt;li&gt;전송 중인 정보를 도청하여 공격자의 이익을 위해 사용하는 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;트래픽 분석(Traffic Analysis)
    &lt;ul&gt;
      &lt;li&gt;전송 중인 정보(메시지)는 암호화를 통해 내용을 숨길 수 있다&lt;/li&gt;
      &lt;li&gt;공격자는 IP주소, 라우팅 경로 등을 통해 통신자의 위치와 실체, 정보 전송의 횟수와 길이 등을 통해 정보 내용을 추측할 수 있다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;__정보보안의-기본-3원칙-무결성integrity&quot;&gt;__정보보안의 기본 3원칙: 무결성(Integrity)&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;무결성(Integrity)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;인가 받지 않은 사용자에 의해 정보의 내용이 불법적으로 위변조되지 않도록 보호되어야 하는 성질
    &lt;ul&gt;
      &lt;li&gt;네트워크를 통하여 송수신되는 정보의 무결성 볼호&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;무결성 왜곡이 항상 악의적인 행동의 결과로 나타나는 것은 아니다. 전력 차단과 같은 시스템 중단이 정보에 예상치 못한 변형 가능&lt;/li&gt;
  &lt;li&gt;무결성을 보장하기 위한 보안 기술에는 접근 제어, 메시지 인증 등이 있으며, 정보가 이미 변경되었거나 변경 위험이 있을 때에는 이러한 변경을 탐지하여 복구할 수 있는 침입 탐지, 백업 등의 기술이 필요&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;무결성을 위협하는 공격&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;정보수정(Modification)
    &lt;ul&gt;
      &lt;li&gt;공격자는 정보를 가로챈 후, 자신에게 유리하도록 정보를 변경&lt;/li&gt;
      &lt;li&gt;고객이 은행으로 송긍 메시지를 전송할 때 공격자는 메시지를 가로채어 자신의 계좌로 입금되도록 변경&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;재전송
    &lt;ul&gt;
      &lt;li&gt;공격자는 정보(메시지)를 획득한 후, 나중에 그 메시지를 다시 사용&lt;/li&gt;
      &lt;li&gt;고객이 은행에게 자신의 계좌에서 공격자에게 지불하도록 요청하는 메시지를 전송하고, 은행을 이를 수행할 때,&lt;/li&gt;
      &lt;li&gt;공격자는 지불요청 메시지를 가로채어 보관한 후, 나중에 다시 지불요청 메시지를 은행으로 보내어 부당하게 입금을 재차 요구&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;__정보보안의-기본-3원칙-가용성availability&quot;&gt;__정보보안의 기본 3원칙: 가용성(Availability)&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;가용성(Availability)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;합법적인 사용자가 필요로 하는 시점에 정보나 시스템 서비스가 지체 없이 즉각적으로 제공될 수 있도록 하는 것&lt;/li&gt;
  &lt;li&gt;예. 인터넷 뱅킹 서비스 가용성
    &lt;ul&gt;
      &lt;li&gt;고객이 요청하는 시점에 정상적인 뱅킹 서비스가 이루어져야 함&lt;/li&gt;
      &lt;li&gt;가용성이 깨질 경우 고객의 금전적 피해 및 인터넷 뱅킹 사업의 손실 초래&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;가용성을 확보하기 위해서는 데이터의 백업, 중복성의 유지, 물리적 위협 요소로부터의 보호 등의 보안기술을 적용&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;가용성을 위협하는 공격&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;서비스 거부(Denial of Service: DoS)
    &lt;ul&gt;
      &lt;li&gt;시스템이나 네트워크가 정상적으로 사용되지 못하도록 방해&lt;/li&gt;
      &lt;li&gt;예) 공격자가 특정 목적지로 향하는 정보(메시지)를 막거나, 과다 전송으로 시스템이나 네트워크를 마비&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;랜섬웨어(Ransomeware)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;__정보보안의-기본-5원칙-인증성authenticity&quot;&gt;__정보보안의 기본 5원칙: 인증성(Authenticity)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;인증성(Authenticity) or 보증(Assurance)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;진짜라는 성질을 확인할 수 있고, 확인 및 신뢰할 수 있다는 것을 의미한다. 그리고 전송 메시지 출저 유효성에 대한 확신 보장&lt;/li&gt;
  &lt;li&gt;사용자가 정말 그 사용자인지와 시스템에 도착한 메시지가 정말로 신뢰할 수 있는 출저에서부터 온 것인지를 확인할 수 있는 것을 의미&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;정보보안의-기본-5원칙-인증성authenticity&quot;&gt;&lt;strong&gt;정보보안의 기본 5원칙: 인증성(Authenticity)&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;인증성(Authenticity) or 보증(Assurance)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;진짜라는 성질을 확인할 수 있고, 확인 및 신뢰할 수 있다는 것을 의믜한다. 그리고 전송 메시지 출처 유효성에 대한 확신 보장&lt;/li&gt;
  &lt;li&gt;사용자가 정말 그 사용자인지와 시스템에 도착한 메시지가 정말로 신뢰할 수 있는 출처에서부터 온 것인지를 확인할 수 있는 것을 의미&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;인증성을 위협하는 공격&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;신분위장
    &lt;ul&gt;
      &lt;li&gt;공격자는 다른 사람의 실체로 위장하여 정보를 획득&lt;/li&gt;
      &lt;li&gt;사용자가 은행에 접속하려고 할 떄, 공격자의 fake 은행 사이트에 접속하도록 유도해서, 사용자의 금융정보(계좌번호, 비밀번호 등)를 탈취&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;__정보보안의-기본-5원칙-책임성accountability&quot;&gt;__정보보안의 기본 5원칙: 책임성(Accountability)&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;책임성(Accountability)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;보안 목적에는 개체의 행동을 유일하게 추적해서 찾아낼 수 있어야 한다는 사항이 포함되어야 한다. 여기에는 부인 방지(메시지의 송수신이나 교환 후, 또는 통신이나 처리가 실행된 후에 그 사실을 사후에 증명함으로써 사실 부인을 방지하는 보안 기술), 억제, 결함분리, 침입탐지예방, 사후복구와 법적인 조치 등이 포함된다&lt;/li&gt;
  &lt;li&gt;진정으로 안전한 시스템을 만든다는 것은 불가능하기 때문에, 보안 침해에 대한 책임 소재를 추적할 수 있어야만 한다&lt;/li&gt;
  &lt;li&gt;시스템은 반드시 이들의 활동 상황을 기록하고, 나중에 포렌식 분석을 통해 보안 침해를 추적할 수 있거나 전송과 관련된 분쟁을 해결할 수 있도록 해야한다&lt;/li&gt;
&lt;/ul&gt;</content><author><name>lee989898</name></author><category term="systemcloud" /><summary type="html">정보보안 기본 3원칙</summary></entry><entry><title type="html">블록체인 이란</title><link href="https://lee989898.github.io/bc-01" rel="alternate" type="text/html" title="블록체인 이란" /><published>2022-03-09T01:06:00+09:00</published><updated>2022-03-09T01:06:00+09:00</updated><id>https://lee989898.github.io/bc-01</id><content type="html" xml:base="https://lee989898.github.io/bc-01">&lt;h2 id=&quot;블록체인이란&quot;&gt;&lt;strong&gt;블록체인이란&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;블록체인은 왜 어려운가?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;cryptography&quot;&gt;&lt;strong&gt;Cryptography&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Public Cryptography(공개키 암호학)&lt;/li&gt;
  &lt;li&gt;Secure Hashing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;암호기술(AES, DES, …)은 원칙적으로는 블록체인과 상관이 없다&lt;/p&gt;

&lt;h3 id=&quot;security&quot;&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;보안의 3대요소
    &lt;ul&gt;
      &lt;li&gt;C - Confidentiality(인가된 당사자에 의해서만 접근하는 것을 보장, 기밀성)&lt;/li&gt;
      &lt;li&gt;I - Integrity(인가된 당사자에 의해서 인가된 방법로만 변경가능한 것, 무결성)&lt;/li&gt;
      &lt;li&gt;A - Availability(적절한 시간에 인가된 당사자에게 접근 가능해야 하는 것, 가용성)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Authenticity(인증)&lt;/li&gt;
  &lt;li&gt;Non-repudiation(부인을 할 수 없다)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;distributed-consensus분산-합의-byzantine&quot;&gt;&lt;strong&gt;Distributed Consensus(분산 합의, Byzantine)&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Proof-of-Work&lt;/li&gt;
  &lt;li&gt;Proof-of-Stake&lt;/li&gt;
  &lt;li&gt;Probaility(확률론)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;p2p-networking&quot;&gt;&lt;strong&gt;P2P Networking&lt;/strong&gt;&lt;/h3&gt;

&lt;h3 id=&quot;programming-languages&quot;&gt;&lt;strong&gt;Programming languages&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Solidity&lt;/li&gt;
  &lt;li&gt;Vyper&lt;/li&gt;
  &lt;li&gt;Go&lt;/li&gt;
  &lt;li&gt;Javascript&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;complex-operation-mechanisms&quot;&gt;&lt;strong&gt;Complex operation mechanisms&lt;/strong&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Peer-to-Peer Networking (P2P)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;communication-models&quot;&gt;&lt;strong&gt;Communication Models&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Point-to-Point&lt;/li&gt;
  &lt;li&gt;Client-Server(HTTP(S), Centralized architecture, 중압집중적)&lt;/li&gt;
  &lt;li&gt;Peer-to-Peer(Decentralized architecture, 비집중형, Client가 될 수도 Server가 될 수도)
    &lt;ul&gt;
      &lt;li&gt;Scalability&lt;/li&gt;
      &lt;li&gt;No Single-point-of-failure&lt;/li&gt;
      &lt;li&gt;No governance&lt;/li&gt;
      &lt;li&gt;Distributed Architecture과는 다르다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;operations-of-p2p-network&quot;&gt;&lt;strong&gt;Operations of P2P Network&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;네트워크 구성&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;주변/랜덤 노드들과의 연결을 통한 그래프 형성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;정보 전달&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Flooding: 정보를 전체 네트워크에 Broadcast&lt;/li&gt;
  &lt;li&gt;Unicasting: 특정 노드로 메시지 전송 (Routing protocols)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;네트워크 참여&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;누구나 참여가능&lt;/li&gt;
  &lt;li&gt;오픈 네트워크(public)&lt;/li&gt;
  &lt;li&gt;Join/Leave protocol&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Blockcahin protocols&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bitcoin Network&lt;/li&gt;
  &lt;li&gt;이더리움: ÐΞVp2p protocol&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;security-principles--blockchain&quot;&gt;&lt;strong&gt;Security Principles &amp;amp; Blockchain&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;보안의 3대요소
    &lt;ul&gt;
      &lt;li&gt;C - Confidentiality (보장하지 않음)&lt;/li&gt;
      &lt;li&gt;I - Integrity ([BC] Transaction, Block, Address)&lt;/li&gt;
      &lt;li&gt;A - Availability (Denial of Service (Dos) 공격)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Authenticity (Signature 로 Ownership 증명 (Anonymous))&lt;/li&gt;
  &lt;li&gt;Anonymity (익명성, One time public key)&lt;/li&gt;
  &lt;li&gt;Non-repudiation (Signature)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;public-key-cryptography-공개키-암호&quot;&gt;&lt;strong&gt;Public Key Cryptography (공개키 암호)&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;대칭키 암호(Symmetric)(DES, 3DES, AES, ARIA)&lt;/p&gt;

&lt;p&gt;비대칭키 암호(Asymmatric)(RSA, ECC)&lt;/p&gt;

&lt;p&gt;발상의 전환 1: 누구나 나에게 암호문을 보낼 수 있다(키배분)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\bc\bc1.png&quot; alt=&quot;블록체인&quot; /&gt;&lt;/p&gt;

&lt;p&gt;발상의 전환 2: 누구나 내 암호문을 풀 수 있다?(전자서명)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\bc\bc2.png&quot; alt=&quot;블록체인&quot; /&gt;&lt;/p&gt;

&lt;p&gt;공개키쌍(Key pair)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Public Key(공개키): 누구나 알 수 있음, 암호에 사용, 서명 확인에 사용&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Private Key(개인키): 소유자만 알고 있음, 복호화에 사용, 서명에 사용&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;What is Public key Infrastructure?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;공개키암호의 한계: 주어진 공개키가 누구의 것인가가 불분명
인증서: 신뢰자가 공개키의 주인을 증명하는 문서(발급자 서명)
발급자의 공개키는 누가 인증할것인가? 풀 수 없는 문제&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;상대방의 공개키를 확실하게 확인하는 방법 PKI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\bc\bc3.png&quot; alt=&quot;블록체인&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Public Key Crypto in Blockchain&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;서명알고리즘 사용&lt;/li&gt;
  &lt;li&gt;Asset에 대한 Ownership을 증명하는데 사용
    &lt;ul&gt;
      &lt;li&gt;A로부터 받은 돈을 B가 사용할 떄 B가 서명으로 소유권 증명&lt;/li&gt;
      &lt;li&gt;B가 생성/설치한 Smart Contract에 대한 생성자 증명&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Proof-of-Authority (PoA)
    &lt;ul&gt;
      &lt;li&gt;Ethereum의 변형으로 일부 testnet에 사용 (Kovan)&lt;/li&gt;
      &lt;li&gt;서명확인된 Miner만 블록생성 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;서명 알고리즘
    &lt;ul&gt;
      &lt;li&gt;ECC (Elliptic Curve Cryptography) 기반 서명&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\bc\bc4.png&quot; alt=&quot;블록체인&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Elliptic Curve&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Elliptic Curve
    &lt;ul&gt;
      &lt;li&gt;$y^2$ = $x^3$ + ax + b&lt;/li&gt;
      &lt;li&gt;곡선의 두 점을 이으는 선을 그리면 반드시 한점에서만 곡선과 교차&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Elliptic Curve Algebra (대수)
    &lt;ul&gt;
      &lt;li&gt;P1 + P2 = P3&lt;/li&gt;
      &lt;li&gt;0(항등원) = Infinity point&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Elliptic Curve Cryptography
    &lt;ul&gt;
      &lt;li&gt;큰 솟수(p)의 필드(Fp) 기반&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;secp256k1 -&amp;gt; bitcoin
    &lt;ul&gt;
      &lt;li&gt;$y^2$ = ($x^3$ + 7) over ($F_p$)&lt;/li&gt;
      &lt;li&gt;p = $2^256$ - $2^32$ - $2^9$ - $2^8$ - $2^7$ - $2^6$ -$2^4$ - 1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\bc\bc5.png&quot; alt=&quot;블록체인&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Elliptic Curve Cryptography (ECC)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Given
    &lt;ul&gt;
      &lt;li&gt;Elliptic Curve (a, b, p)&lt;/li&gt;
      &lt;li&gt;Generator G&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pick a random number K (엄청 큰 수)&lt;/li&gt;
  &lt;li&gt;Comput K*G&lt;/li&gt;
  &lt;li&gt;Public key(x,y) = K * G&lt;/li&gt;
  &lt;li&gt;Private key = K&lt;/li&gt;
  &lt;li&gt;KG 로부터 K를 구할 수 없음&lt;/li&gt;
  &lt;li&gt;RSA보다 10배 적은 키로 비슷한 보안성 유지&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\bc\bc6.png&quot; alt=&quot;블록체인&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hash &amp;amp; Cryptographic Hash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Hash
    &lt;ul&gt;
      &lt;li&gt;임의의 길이의 Input을 고정된 길이 output으로 변환&lt;/li&gt;
      &lt;li&gt;Input값들을 균등하게 변환시켜줌&lt;/li&gt;
      &lt;li&gt;Constant-time search를 위해서 사용&lt;/li&gt;
      &lt;li&gt;EX: mod p&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cryptographic Hash (Secure Hash)
    &lt;ul&gt;
      &lt;li&gt;One-way function&lt;/li&gt;
      &lt;li&gt;Each to compute&lt;/li&gt;
      &lt;li&gt;Collision Resistance (weak or strong)
        &lt;ul&gt;
          &lt;li&gt;같은 Hash값을 갖는 input을 찾을 수 없다&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Bitcoin uses SHA256&lt;/li&gt;
  &lt;li&gt;Ehtereum sues Keccak256(SHA3 원형)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\bc\bc7.png&quot; alt=&quot;블록체인&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Proof of Work puzzle&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;주어진 d에 대해서, 그 Hash값이 d개 이상의 0으로 시작하도록(&amp;lt;$2^{256-d}$)하는 M을 찾는 문제&lt;/li&gt;
  &lt;li&gt;Secure hash에 대한 유일한 해답은 brute-force 방법&lt;/li&gt;
  &lt;li&gt;d(difficulty)가 증가할 수록 기하급수적으로 오래걸림&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\bc\bc8.png&quot; alt=&quot;블록체인&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Origin of Proof-of-Work: Hashcash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Cynthia Dwork에서 제안함&lt;/li&gt;
  &lt;li&gt;Hashcash는 Adam Back이 제안함&lt;/li&gt;
  &lt;li&gt;이메일을 보내면 PoW 비용이 발생한다
    &lt;ul&gt;
      &lt;li&gt;&amp;lt; counter &amp;gt;를 찾는다. SHA-1(1:20:&amp;lt; time &amp;gt;:&amp;lt; recipient &amp;gt;:&amp;lt; rand &amp;gt;:&amp;lt; counter &amp;gt;)=$0^{20}${0,$1^{140}$}&lt;/li&gt;
      &lt;li&gt;1초 정도 걸린다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;리시버는 이메일을 받는다 오직
    &lt;ul&gt;
      &lt;li&gt;&amp;lt; time &amp;gt;이 최근(2-days), &amp;lt; recipient &amp;gt;가 맞을떄&lt;/li&gt;
      &lt;li&gt;그리고 유효한 PoW일때&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이것으로 스팸을 예방할 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Merkle Tree&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;다수의 데이터(tx)의 hash를 계산하되, 특정 데이터(tx)의 포함 여부를 빠르게 (log N) 검사할 수 있는 기술&lt;/li&gt;
  &lt;li&gt;Block Header에 transaction Merkle 해시값만 저장&lt;/li&gt;
  &lt;li&gt;HK의 포함확인을 위해서 모든 15개 다른 데이터가 필요하지 않고 4개의 데이터만 필요&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;cryptocurrency&quot;&gt;&lt;strong&gt;Cryptocurrency&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Electronic Money Problem&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Electronic money
    &lt;ul&gt;
      &lt;li&gt;모든 Cash Flow를 추적하여 모든사람의 자산을 파악 (Transaction)&lt;/li&gt;
      &lt;li&gt;모두가 신뢰할 수 있는 정보 (Consensus)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Easy solution
    &lt;ul&gt;
      &lt;li&gt;모든 Transaction을 Trusted Third Party(TTP)를 통해서 실행&lt;/li&gt;
      &lt;li&gt;TTP에 대한 신뢰가 필요&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hard solution
    &lt;ul&gt;
      &lt;li&gt;distributed solution (누구의 도움도 없이 거래. 현재 Cash와 같음)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;왜 어려울까?
    &lt;ul&gt;
      &lt;li&gt;Double spending(중복지불)을 감지할 수 없음&lt;/li&gt;
      &lt;li&gt;Bitcoin은 consensus algorithm으로 해결&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;How Bitcoin works (without Why)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;cash flow를 transaction chain에 기록&lt;/li&gt;
  &lt;li&gt;유효한 tx(no double spending)은 block에 저장&lt;/li&gt;
  &lt;li&gt;각 block은 chain으로 연결됨&lt;/li&gt;
  &lt;li&gt;모두(대다수)가 합의한 (가장 긴)block chain만 신뢰&lt;/li&gt;
  &lt;li&gt;Hash-point -&amp;gt;
    &lt;ul&gt;
      &lt;li&gt;이전 tx/block의 hash 값을 다음 tx/block에 기록&lt;/li&gt;
      &lt;li&gt;중간의 tx/block이 수정되면 연결이 끊어짐&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;P2P 네트워크로 tx/block 교환&lt;/li&gt;
  &lt;li&gt;각 tx은 지불자가 서명&lt;/li&gt;
  &lt;li&gt;각 tx은 수신자의 공개키(의 hash) 표기&lt;/li&gt;
  &lt;li&gt;Miner가 유효한 tx를 모아서 block 생성&lt;/li&gt;
  &lt;li&gt;가장 긴 blockchain에 추가 (append)&lt;/li&gt;
  &lt;li&gt;PoW을 푼 block만 유효함&lt;/li&gt;
  &lt;li&gt;Longest block-chain이 consensus 획득&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why Bitcoin works&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;공개 암호화 (ECCDSA)
    &lt;ul&gt;
      &lt;li&gt;Authenticity, Non-repudiation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cryptographic hash (SHA256/ RIPE256)
    &lt;ul&gt;
      &lt;li&gt;트랜잭션 및 블록의 무결성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;합의 알고리즘 (Prrof of Work)
    &lt;ul&gt;
      &lt;li&gt;민주적 진실성&lt;/li&gt;
      &lt;li&gt;공격자는 자신의 취향에 맞는 블록체인을 만들 수 없다
        &lt;ul&gt;
          &lt;li&gt;공격자가 다른 사람보다 수적으로 열등하다&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\bc\bc9.png&quot; alt=&quot;블록체인&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;beyond-cryptocurrency&quot;&gt;&lt;strong&gt;Beyond Cryptocurrency&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;After Bitcoin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Bitcoin in 2009, 2년후(2011) 첫 Altcoin 등장 &amp;gt; 600개 이상의 Altcoin 생겼다&lt;/li&gt;
  &lt;li&gt;MatkeyCap
    &lt;ul&gt;
      &lt;li&gt;단위가치 * 총 volume&lt;/li&gt;
      &lt;li&gt;Bitcoin &amp;gt; Ethereum &amp;gt; Ripple&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;대부분이 Bitcoin, Litecoin, Ethereum의 fork버전&lt;/li&gt;
  &lt;li&gt;차이점
    &lt;ul&gt;
      &lt;li&gt;Scripting language&lt;/li&gt;
      &lt;li&gt;Transaction 관리&lt;/li&gt;
      &lt;li&gt;추가기능 및 보안기능&lt;/li&gt;
      &lt;li&gt;Mining 여부&lt;/li&gt;
      &lt;li&gt;Consensus 알고리즘&lt;/li&gt;
      &lt;li&gt;단순 파라미터 차이&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Taxonomy of Altcoins&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Purposes
    &lt;ul&gt;
      &lt;li&gt;Cryptocurrency-only: Bitcoin&lt;/li&gt;
      &lt;li&gt;Cryptocurrency &amp;amp; Business logic: Ethereum&lt;/li&gt;
      &lt;li&gt;Business logic only: Hyperledger&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Accessibility
    &lt;ul&gt;
      &lt;li&gt;Public block chain&lt;/li&gt;
      &lt;li&gt;Private block chain&lt;/li&gt;
      &lt;li&gt;Permissioned (consortium) block chain&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Namecoin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\bc\bc10.png&quot; alt=&quot;블록체인&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;분산 도메인 이름 서비스&lt;/li&gt;
  &lt;li&gt;첫번째 Altcoin(2011)&lt;/li&gt;
  &lt;li&gt;“*.bit” 웹사이트용 Chrome/Firefox용 플러그인&lt;/li&gt;
  &lt;li&gt;싸다 (5 cents) for, no cost&lt;/li&gt;
  &lt;li&gt;도메인 판매 가능&lt;/li&gt;
  &lt;li&gt;병합 채굴&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Litecoin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\bc\bc11.png&quot; alt=&quot;블록체인&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;첫 번째 메모리 하드 마이닝 퍼즐 (2011)
    &lt;ul&gt;
      &lt;li&gt;Bitcoin: 계산이 어려운 마이닝 퍼즐&lt;/li&gt;
      &lt;li&gt;블록이 2.5분마다 생성 (Bitcoin: 10min)&lt;/li&gt;
      &lt;li&gt;두번째로 많이 fork되었다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;PeerCoin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\bc\bc12.png&quot; alt=&quot;블록체인&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;최초의 지분 증명(PoS) 채굴 퍼즐(2012)&lt;/li&gt;
  &lt;li&gt;Mining: 코인을 이용한 거래
    &lt;ul&gt;
      &lt;li&gt;사용하지 않은 코인이 많을수록 당첨 확률이 높아진다&lt;/li&gt;
      &lt;li&gt;실제로 PoW와 하이브리드&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;완전히 분산되지 않음
    &lt;ul&gt;
      &lt;li&gt;신뢰할 수 있는 주소는 체크포인트에 서명한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;DogeCoin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\bc\bc13.png&quot; alt=&quot;블록체인&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;단순히 암호화폐를 즐기기 위해(2013)&lt;/li&gt;
  &lt;li&gt;많은 마케팅 캠페인&lt;/li&gt;
  &lt;li&gt;랜덤 블록 보상
    &lt;ul&gt;
      &lt;li&gt;각 블록 보너스는 무작위입니다: PRG(이전 블록 해시)&lt;/li&gt;
      &lt;li&gt;예측 가능하므로 채굴자가 낮을 때 discurage 된다&lt;/li&gt;
      &lt;li&gt;Removed after a few months&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Monero&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\bc\bc14.png&quot; alt=&quot;블록체인&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;더 높은 개인 정보 보호 수준&lt;/li&gt;
  &lt;li&gt;비트코인은 가명만 지원&lt;/li&gt;
  &lt;li&gt;Monero는 “반지 서명”을 사용
    &lt;ul&gt;
      &lt;li&gt;여러 참가자의 조합&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;대체 동전
    &lt;ul&gt;
      &lt;li&gt;비트코인 추적/식별 가능&lt;/li&gt;
      &lt;li&gt;추적할 수 없는 모네로 코인&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cardano&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\bc\bc15.png&quot; alt=&quot;블록체인&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;최초의 입증 가능한 보안 PoS 알고리즘: Ouroboros(2015)&lt;/li&gt;
  &lt;li&gt;사용자 개인 정보 보호&lt;/li&gt;
  &lt;li&gt;현재 시가총액 상위 5위&lt;/li&gt;
  &lt;li&gt;빠른 속도&lt;/li&gt;
  &lt;li&gt;Layered
    &lt;ul&gt;
      &lt;li&gt;정산 계층: 사용자가 교환&lt;/li&gt;
      &lt;li&gt;제어 계층: 신뢰할 수 있는 계산 프레임워크&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Etherum&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\bc\bc16.png&quot; alt=&quot;블록체인&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;최초의 스마트 계약 암호화폐(2013)&lt;/li&gt;
  &lt;li&gt;Turing-complete 언어로 된 스마트 계약&lt;/li&gt;
  &lt;li&gt;여러 스마트 계약이 컴퓨터 프로그램을 작동
    &lt;ul&gt;
      &lt;li&gt;네트워크에 설치됨&lt;/li&gt;
      &lt;li&gt;Ether로 구동되는 실행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;스마트 계약을 사용하는 DApp 허용&lt;/li&gt;
&lt;/ul&gt;</content><author><name>lee989898</name></author><category term="blockchain" /><summary type="html">블록체인이란</summary></entry><entry><title type="html">정보보호 동향</title><link href="https://lee989898.github.io/sc2-01" rel="alternate" type="text/html" title="정보보호 동향" /><published>2022-03-09T01:06:00+09:00</published><updated>2022-03-09T01:06:00+09:00</updated><id>https://lee989898.github.io/sc2-01</id><content type="html" xml:base="https://lee989898.github.io/sc2-01">&lt;h2 id=&quot;정보보호-동향해킹과-보안&quot;&gt;&lt;strong&gt;정보보호 동향(해킹과 보안)&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;해킹과-보안의-역사&quot;&gt;&lt;strong&gt;해킹과 보안의 역사&lt;/strong&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;해킹이란&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;국어사전: 컴퓨터 시스템에 무단으로 침입/파괴/탈취 하는 행위&lt;br /&gt;
영영사전: 디자이너가 의도하지 않았던 방법으로 시스템의 특성이나 규칙을 이용한 창조적인 사용법을 찾는 것&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1950년대 이전&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;암호화 기계: 에니그마(Enigma)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1918년에 폴란드의 암호 보안 전문가들이 개발&lt;/li&gt;
  &lt;li&gt;평문 메시지를 암호화된 메시지로 변환하는 전기/기계 장치&lt;/li&gt;
  &lt;li&gt;처음에는 은행에서 통신 보안 강화를 위해 개발되었지만, 제2차 세계대전에서 독일군에 의해 군사통신 보안용으로 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;1960년대&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;전화망 침입을 통한 무료 전화 해킹&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1969년에 존 인그레이시아는 특정 주파수 대의 휘파람을 불면 장거리 전화를 무료로 쓸 수 있다는 사실을 알아냄&lt;/li&gt;
  &lt;li&gt;존 드레이퍼는 베트남 전쟁 참전 중에 군용 식량으로 지급되는 ‘캡앤크런치’라는 시리얼에 들어 있던 장난감 호루라기를 불면
2600Hz의 소리를 낼 수 있고, 이를 통해 무료 통화가 가능하다는 사실을 발견&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;1980년대&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;컴퓨터 해킹의 시작&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;미국 밀워키의 ‘414 Private’이라는 해커 그룹이 로스앨러모스국립 연구소와 암센터 등의 60개 컴퓨터 시스템에 침입하여 실수로 중요 파일을 지워 몇 년간의 연구 결과를 날림&lt;/li&gt;
  &lt;li&gt;이언 머피(Ian Murph)가 AT&amp;amp;T의 컴퓨터 시스템에 침입해 전화 요금과 관련된 시계를 바꾸어 낮은 가격의 심야 요금이 대낮에 적용 되도록 조작&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;정보 권리 논쟁의 시작&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1981년에 독일의 전설적인 해커 그룹인 카오스 컴퓨터 클럽 결성&lt;/li&gt;
  &lt;li&gt;소식지 창간호에 다음과 같은 설립 목표를 규정함
    &lt;ul&gt;
      &lt;li&gt;정보 사회로 발전하려면 전세계와 자유로운 커뮤니케이션을 가능케하는 새로운 인권이 필요하다. 인간 사회 및 개인에게 기술적 영향을 미치는 정보 교류에게 국경이 사라져야 한다. 우리는 지식과 정보의 창조에 이바지할 것이다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GNU (GNU is Not Unix)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1983년 리처드 스톨망에 의해 GNU 계획 발표&lt;/li&gt;
  &lt;li&gt;GNU는 유닉스와 완벽하게 호환하는 소프트웨어 시스템으로 모든 사람이 무료로 사용하도록 작성&lt;/li&gt;
  &lt;li&gt;소프트웨어 저작권 개념에 처음부터 함정이 있으면 Copylef를 주장&lt;/li&gt;
  &lt;li&gt;GNU의 자유 소프트웨어에 대한 4가지 자유
    &lt;ul&gt;
      &lt;li&gt;자유 0: 어떠한 목적을 위해서건 프로그램을 실행할 수 있는 자유&lt;/li&gt;
      &lt;li&gt;자유 1: 프로그램의 작동 원리를 연구하고 이를 자신의 필요에 맞게 변경할 수 있는 자유&lt;/li&gt;
      &lt;li&gt;자유 2: 이웃을 돕기 위해 프로그램을 복제하고 배포할 수 있는 자유&lt;/li&gt;
      &lt;li&gt;자유 3: 프로그램을 향상하고 공동체 전체의 이익을 위해 다시 환원 할 수 있는 자유&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;해커의 등장&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;로버트 모리스의 웜 바이러스
    &lt;ul&gt;
      &lt;li&gt;미국 전역의 컴퓨터가 정체불명의 바이러스에 감염되어 사용자들이 인터넷 연결을 끊는 사건이 발생&lt;/li&gt;
      &lt;li&gt;미국 국방부는 카네기멜론대학에 컴퓨터 비상 대응팀 설립&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;구 소련 KGB요원에 매수된 서독 해커들이 전 세계 3백여 기관에 불법적인 접근을 시도하고 군사 기밀 정보를 탈취한다는 사실을 알게됨&lt;/li&gt;
  &lt;li&gt;1985, 미국 소년이 뉴저지의 국방부 컴퓨터에 침입, 통신위성 위치를 변경하는 코드를 비롯해 극비 군사 통신 데이터를 빼낸 사건 발생&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;1990년대&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;아메리카온라인 해킹&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1997년네 AOL 침입만을 목적으로 고안된 무료 해킹 툴인 AOHell이 공개&lt;/li&gt;
  &lt;li&gt;이후 며칠 동안 초보 해커들이 악용하여 미국 내 수백만 미국 온라인 사용자가 대용량 메일 폭탄 공격을 받음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;트로이 목마, 백 오리피스&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1998년에 cDc라는 해킹 그룹의 Sir Dystic이 트로이 목마 프로그램인 백 오리피스를 발표&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;데프콘 해킹 대회&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1990년애 최초의 해킹 대회인 데프콘이 라스베이거스에서 개최&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;2000년대&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;분산 서비스 거부 공격 (DDoS)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2000년 2월에 인터넷에서 소통량이 많은 몇 개 사이트에 분산 서비스 거부 공격이 가해짐&lt;/li&gt;
  &lt;li&gt;이로 인해 야후, CNN, 아마존 등의 사이트가 ICMP 패킷을 이용한 스머프 공격으로 몇 시간 동안 마비됨&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;웜과 바이러스&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2000년에 러브 버그 바이러스가 등장행 87억 5000만 달러의 경제적 손실 발생시킴&lt;/li&gt;
  &lt;li&gt;2003년 1월 25일 오후 2시 30분부터 약 2일 동안 마이크로소프트의 MS-SQL 2000 서버를 공격하는 슬래머 웜이 전국 네트워크를 마비시킴&lt;/li&gt;
  &lt;li&gt;2004년에 베이글 웜, 마이둠 웜, 넷스카이 웜이라는 웜 삼총사가 등장&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;개인 정보 유출과 도용&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2005년 10월부터 2006년 2월 사이에 한국에서 주민등록번호 수십만 개가 유출되어 인터넷 게임 사이트 가입에 사용되는 등 개인 정보 무단 도용 사건 발생&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;전자상거래 교란&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2006년 7월에 안심클릭의 허점을 이용한 해킹 사기 사건 발생&lt;/li&gt;
  &lt;li&gt;2006년 3월에 검색 클릭 수를 자동 증가시키는 방법으로, 국내 대형 포털 사이트의 정보 검색 순위를 조작한 인터넷 광고 대행업체의 대표 이 씨가 업무 방해 등의 혐의로 불구속 입건&lt;/li&gt;
  &lt;li&gt;2007년 2월 8일에 공인인증서 유출로 인한 시중 은행 불법 인출 사건 발생&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;2020년대&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2021년 보안 위협&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;국가 지원 해킹 조직의 활동&lt;/li&gt;
  &lt;li&gt;타깃형 랜섬웨어 공격과 피해 규모 증가&lt;/li&gt;
  &lt;li&gt;업그레이드된 문서형 악성코드 다수 유포&lt;/li&gt;
  &lt;li&gt;사회적 이슈를 활용한 사회공학적 공격 활동&lt;/li&gt;
  &lt;li&gt;금융 모바일 악성 앱의 지속적인 변화 시도&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;개인에서-국가로-사이버-전&quot;&gt;&lt;strong&gt;개인에서 국가로: 사이버 전&lt;/strong&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;사이버 보안: 유형&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;사이버 스파이
    &lt;ul&gt;
      &lt;li&gt;인터넷 등의 사이버 공간에서 특정 회사나 국가의 정보를 빼내서 그것을 필요로 하는 회사나 국가에 제공하는 활동&lt;/li&gt;
      &lt;li&gt;사이버 스파이의 첫 사례는 1985년 독일의 ‘데이터 여행자 사건’ 마르쿠스 헤스를 포함한 5명의 해커가 유럽우주기구ESA, 미국항공우주국, 버지니아 주 군수 산업체, 일본 쓰쿠바연구소 등에서 4년에 걸쳐 빼낸 산업-과학정보를 구소련의 KGB에 팔아넘긴 사건&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;‘Red October’ 라는 작전명을 가진 대규모 사이버 스파이는 각국 정부 및 외교기관, 연구 기관 등에 악성 프로그램을 유포하여 정보를 빼냄&lt;/li&gt;
  &lt;li&gt;1000여 명에 달하는 전문 직업 해커로 구성된 ‘중국  인민해방군 제3국 제2청 61398 해커 부대’는 2006년 무렵부터 최소 150건 이상의 기밀 정보 유출 공격을 감행&lt;/li&gt;
  &lt;li&gt;2009년 유엔(UN)에서는 만약 3차 세계대전이 시작된다면 사이버 전쟁이 될 것이라고 예측&lt;/li&gt;
  &lt;li&gt;대표적인 사이버 전쟁: 2007년 에스토니아 사이버 분쟁, 2008년 러시아와 조지아 간의 사이버 전쟁, 2010년 미국과 이란의 사이버 분쟁 등&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc1.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;
&lt;img src=&quot;\assets\built\images\sc2\sc2.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;</content><author><name>lee989898</name></author><category term="systemcloud" /><summary type="html">정보보호 동향(해킹과 보안)</summary></entry><entry><title type="html">FPinPython</title><link href="https://lee989898.github.io/pl-21" rel="alternate" type="text/html" title="FPinPython" /><published>2021-12-05T19:18:00+09:00</published><updated>2021-12-05T19:18:00+09:00</updated><id>https://lee989898.github.io/pl-21</id><content type="html" xml:base="https://lee989898.github.io/pl-21">&lt;h3 id=&quot;fpinpython&quot;&gt;&lt;strong&gt;FPinPython&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;python-is-not-a-fpl&quot;&gt;&lt;strong&gt;Python is not a FPL&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;What is FP?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;수학적 의미의 순수 함수는 부작용이 없이, 아웃풋 값이 순전히 인풋값에 따르는 함수이다&lt;br /&gt;
함수 프로그래밍에서, 프로그램은 전적으로 순수 함수의 평가(계산의 실행)로 구성된다&lt;br /&gt;
계산은 상태 변화나 데이터의 변경없이, 중첩 함수나 합성 함수의 호출에 의해 진행된다&lt;/p&gt;

&lt;p&gt;명령형 프로그래밍에 대한 함수 프로그래밍의 장점은 다음과 같다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;첫째, 함수 코드는 고수준이다. ​함수는 결과를 얻는데 필요한 절차를 명시적으로 상술하는 것이 아니라, ​얻고자 하는 결과가 무엇인지 서술한다.  즉, how가 아니라 what을 서술한다 ​&lt;/li&gt;
  &lt;li&gt;둘째, 함수 코드는 투명하다. ​함수의 행태는 계산 중에 생성되는 잠정적인 값에 무관하고, 인풋과 아웃풋에만 의존한다. 이것은 부작용의 가능성을 제거하며, 디버깅을 쉽게 한다&lt;/li&gt;
  &lt;li&gt;끝으로, 함수 코드는 병렬성이 있다. ​부작용이 없어서, 프로그램의 루틴들은 더욱 쉽게 병렬 처리할 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;함수 프로그래밍은 다음과 같은 특징을 갖는다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;함수는 first class이다. ​파이썬을 비롯한 현대 프로그래밍 언어에서는 ​기본적으로 객체, 클래스 개념을 갖기 때문에, ​함수를 기본적인 객체로 간주한다. ​따라서 ‘Functions are first class’라는 말은 ​’함수는 기본적인 객체이다’라는 의미로 받아 들여도 무방하다. 실제로 파이썬에서는 function을 객체로 간주하여, ​파라미터로 주고 받는다. ​이것은 함수 프로그래밍 언어에서 원하는 바이다&lt;/li&gt;
  &lt;li&gt;함수 프로그래밍에서 리커젼은 기본적인 컨트롤 스트럭처로 사용된다. ​몇몇 언어에서는 리커젼 이외에 순환 처리를 위한 다른 방법(loop)을 지원하지 않는다. 반면, 순수 함수 언어가 아닌 명령형 프로그래밍을 지원하는 언어에서는 loop도 함께 지원한다&lt;/li&gt;
  &lt;li&gt;함수 프로그래밍 언어는 리스트 처리에 초점을 둔다. ​Loop는 ‘리스트에 대한 리커젼 처리’로 대체될 수 있다. ​이와 같이 리스트는 loop의 대체에 필요한 데이터 구조로서 사용된다&lt;/li&gt;
  &lt;li&gt;순수 함수 프로그래밍 언어는 부작용을 피하기 위해, ​변수에 초기값을 할당하거나, 계산 중에 이 변수의 값을 변경하는 것을 모두 금지한다&lt;/li&gt;
  &lt;li&gt;함수 프로그래밍은 문장 단위로 프로그램을 작성하는 것이 아니라, ​함수와 파라미터 단위로 프로그램을 작성한다. ​순수 함수 프로그램에서,프로그램은 하나의 표현식과 이를 지원하는 함수 정의로 구성된다&lt;/li&gt;
  &lt;li&gt;함수 프로그래밍은 어떻게 계산할 것인가가 아니라, ​무엇을 계산할 것인가에 관심을 갖는다​&lt;/li&gt;
  &lt;li&gt;함수 프로그래밍은 고차 함수를 이용한다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여기서 언급하는 FP의 특징은 지극히 일부분이고 상이한 측면도 보이는데, 이렇게 된 이유는 ​순수 함수 언어가 아닌 현대 프로그래밍 언어를 가지고 ​함수 프로그래밍을 하는 실용적인 개발자(practitioner)의 관점이 반영되어 있기 때문이다&lt;/p&gt;

&lt;p&gt;파이썬은 ‘순수’ 함수 언어가 확실히 아니다. 대부분의 파이썬 프로그램에서 부작용을 흔히 볼 수 있다&lt;br /&gt;
즉, 변수는 자주 재바인딩되고, ​수정 가능한 데이터 컬렉션은 그 내용을 종종 변경하며, ​I/O는 자유롭게 계산과 인터리빙된다 (메모리에 바인딩된다는 의미이다)&lt;/p&gt;

&lt;p&gt;파이썬은 함수 언어 근처에도 못간다. ​파이썬은 멀티 패러다임 언어이다&lt;br /&gt;
파이썬은 필요할 때, 함수 프로그래밍을 쉽게 할 수 있고, ​다른 프로그래밍 스타일과 혼합하기 쉽다&lt;br /&gt;
즉, 명령형 프로그래밍 스타일과 함수 프로그래밍 스타일을 섞어서 쓸 수 있다&lt;br /&gt;
따라서, 멀티 패러다임 언어라는 말은 ​다양한 프로그래밍 스타일을 지원하는 언어라는 의미로 이해하면 될 것이다&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;how-well-python-supports-fp&quot;&gt;&lt;strong&gt;How well Python supports FP?​&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;함수 프로그래밍을 지원하려면, ​함수는 다른 함수를 파라미터로 받을 수 있고, ​또 다른 함수를 반환할 수 있어야 한다&lt;br /&gt;
파이썬은 프로그램 내의 모든 것을 객체로 취급하기 때문에, ​두가지를 모두 지원한다&lt;/p&gt;

&lt;p&gt;파이썬에서, 함수는 일등 시민이다. 함수는 값과 동일한 특징을 갖기 때문에, ​함수를 변수에 할당할 수 있고(명령형 언어의 변수와 의미적으로 다름)​
print()를 써서 함수를 콘솔에 디스플레이할 수 있으며, ​함수를 다른 함수에게 파라미터로 패스할 수 있다&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I am function func()!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;am&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;am&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 func을 another_name에 할당하는 것을 보여주고 있다&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I am funtion func()!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2123123123&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2123123123&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;am&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cat&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 print(“cat”, func, 42)를 통해, ​&amp;lt; function func at … &amp;gt;을 디스플레이하는 것을 보여주고 있다&lt;br /&gt;
또 print()를 내포하는 함수 func()을 통해, ​함수를 디스플레이하고 있다&lt;br /&gt;
끝으로 d는 키: 값 쌍을 갖는 dictionary인데, ​d[func]은 func의 값 2를 반환한다&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I am function inner()!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 inner()가 outer()의 파라미터로 패스되는 것을 보여준다. 이것은 합성 함수의 정의 사례이다&lt;/p&gt;

&lt;p&gt;파이썬에서, 합성 함수는 다음과 같이 실행된다. ​outer(inner) 호출은 inner()를 outer()에게 파라미터로 패스한다&lt;br /&gt;
outer() 내에서 파이썬은 inner()를 파라미터 ‘function’에 바인딩한다. ​그러면, outer()는 ‘function’을 통해 직접 inner()를 호출한다&lt;br /&gt;
함수가 다른 함수에 패스될 때, 패스-인 함수를 콜백이라고 부른다. ​그 이유는 패스-인 함수(앞의 예에서는 inner())의 호출이 ​역으로 outer에 영향을 줄 수 있기 때문이다&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ferret&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;vole&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;gecko&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vole&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gecko&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ferret&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 sorted()의 파라미터로 len()을 사용하여 ​길이 순으로 정렬하고 있다&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ferret&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;vole&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;gecko&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ferret&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gecko&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vole&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ferret&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gecko&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vole&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 길이의 역순으로 정렬한다. 이때 메소드 reverse=True와 함수 -len()에 의한 reverse_len()의 정의를 사용한다&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I am function inner()!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x231312312&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;am&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;am&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;파이썬에서는, 함수를 반환값으로 반환한다. ​파이썬에서는 함수를 다른 함수에게 파라미터로 패스할 수 있고, ​함수를 다른 함수의 반환값으로 반환한다&lt;br /&gt;
예를 들어, 위 코드에서 함수 outer()의 정의를 보자. outer() 내에서 inner()를 정의하고, ​inner를 반환한다&lt;br /&gt;
outer()의 반환값을 변수 function에 할당한다. ​function()는 간접적으로 inner()를 호출한다. ​outer()의 반환값을 이용하여 간접적으로 inner()를 호출한다&lt;br /&gt;
이와 같이, 파이썬은 함수를 파라미터로, 그리고 반환값으로 사용할 수 있다. 이러한 측면에서 파이썬은 함수 프로그래밍을 잘 지원한다&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x123312512&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I am a string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I am a string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;파이썬은 람다를 사용하여 익명의 함수를 정의한다. ​람다 표현식은 lambda &lt;param_list&gt;: &amp;lt; expression &amp;gt;의 형식을 갖는다  
&amp;lt; expression &amp;gt;은 파라미터 리스트의 이름을 포함한다  
위 코드는 문자열의 역순을 반환하는 함수 정의를 ​람다 표현식으로 나타낸 것이다  
Callable은 함수 호출이나 메소드인지를 확인하는 함수이다. ​가운데 코드와 같이, 람다 함수의 적용을 통해, ​그리고 람다 함수를 변수에 할당 및 호출을 통해, ​함수를 평가할 수 있다&lt;/param_list&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;applying-function-to-iterable-with-map&quot;&gt;&lt;strong&gt;Applying function to iterable with map()​&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I am a string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hedgehog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;gecko&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tac&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;god&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gohefdeh&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;okceg&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tac&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;god&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gohegdeh&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;okceg&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hedgehog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;gecko&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tac&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;god&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gohegdeh&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;okceg&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이터러블에 대한 함수에 map()을 적용하면, ​리스트 각 요소마다 원하는 함수 f를 적용할 수 있다&lt;br /&gt;
리스트 각 요소마다 reverse를 적용하려면, ​map(reverse, animal)와 같이 하면 된다&lt;br /&gt;
이것은 이터러블 animal의 각 요소에 reverse 함수를 적용한다. ​이것을 for loop을 써서 프린트한다&lt;br /&gt;
이터레이터를 써서 프린트할 수 있다&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;222&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;333&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다수의 이터러블에 map()을 적용하려면, ​그 형식은 map(f, iter1, iter2,… itern)과 같다&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;selecting-elements-from-iterable-with-filter&quot;&gt;&lt;strong&gt;Selecting elements from iterable with filter()&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greater_than_100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greater_than_100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;222&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;333&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;222&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;333&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;222&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;333&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;222&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;333&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;함수 filter()를 써서 이터러블로부터 원하는 요소를 선택하려면, ​그 형식은 filter(f, iter)이다&lt;br /&gt;
함수 f가 greater_than_100()이라면, ​표현식 filter(greater_than_100, [1,111,2,222,3,333]))의 결과는​ 111,222,333이다&lt;/p&gt;

&lt;p&gt;—​&lt;/p&gt;

&lt;h2 id=&quot;avoiding-control-flow&quot;&gt;&lt;strong&gt;Avoiding control flow​&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;명령형 파이썬 프로그램에서 코드 블록은 다음과 같이 구성된다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;외부 loop(for 또는 while)​&lt;/li&gt;
  &lt;li&gt;외부 loop 내의 상태 변수의 할당​&lt;/li&gt;
  &lt;li&gt;데이터 구조(dicts, lists, sets 등)의 수정​&lt;/li&gt;
  &lt;li&gt;분기문(if/elif/else 또는 try/except/finally)​&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이렇게 하는 것은 자연스럽고 문제를 인식하기 쉬운 듯 보인다. ​그러나 상태 변수와 수정가능한 데이터 구조로 인해 부작용이 발생할 수 있을 뿐만 아니라, ​프로그램의 특정 지점에서 데이터의 상태를 알아내기가 어렵다&lt;br /&gt;
이에 대한 해결책으로 ‘how’가 아니라 ‘what’에 초점을 맞추는 것이 중요하다&lt;br /&gt;
즉, ‘여기 어떤 데이터가 있는데,’ ‘원하는 결과를 생성하기 위해 이 데이터를 어떻게 처리할 것인가?’가 아니라 ​’이 데이터를 가지고(또는 이 데이터에 대해) 내가 처리해야 하는 것이 무엇인가?’를 고민하는 것이다&lt;/p&gt;

&lt;p&gt;플로우 컨트롤을 피하고 함수 프로그래밍을 위해, ​’how’에서 ‘what’으로 어떻게 전환할 것인가?&lt;br /&gt;
캡슐화, 컴프리헨션, 리커젼 등을 잘 활용하는 것이 그 방법이다&lt;br /&gt;
컴프리헨션은 주어진 구조적 데이터에서 새로운 구조적 데이터를 생성하는 간략한 방법으로, ​파이썬 프로그래머는 반복 처리나 조건을 만족하는 리스트, 딕셔너리, 집합을 쉽게 생성할 수 있다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Encapsulation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;# imperative style​
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_initial_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;state_var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state_var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;state_var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state_var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modify_differently&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;# work with the data collection​
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;# functional style ​
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_initial_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;state_var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state_var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;state_var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state_var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state_var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modify_differently&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;# work with the data collection​
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;캡슐화는 코드를 refactor(재분해)하고, ​데이터 생성을 함수나 메소드 안으로 집어 넣는 것이다&lt;br /&gt;
예를 들어 위 코드는 캡슐화를 써서, ​명령형 스타일의 ‘collection 생성 절차’라는 ‘how’를 함수 프로그래밍 스타일의 ‘make_collection(즉 collection 생성)’이라는 what으로 전환한다&lt;br /&gt;
위 코드는 명령형 절차를 나타내며, ​아래 코드는 함수 프로그램 코드를 나타낸다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;List Comprehension&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
                 &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;컴프리핸션은 주어진 이터러블에서 새로운 이터러블을 생성하는 간략한 방법이다&lt;br /&gt;
파이썬의 컴프리헨션에는 리스트, 제너레이터, 딕셔너리, 집합이 있으며, ​이를 위한 문법을 제공한다
리스트 컴프리헨션은 표현식을 […]로 감싼다&lt;/p&gt;

&lt;p&gt;컴프리헨션은 같은 키워드를 사용하면서, ​그 키워드들의 순서를 바꾼 표현식의 형태를 갖는다&lt;br /&gt;
순서를 바꾼 이유는 절차가 아닌 데이터에 초점을 두기 위함이다. 이 말은 컴프리헨션을 이용하여 함수 프로그래밍에 도움이 된다는 뜻이다&lt;/p&gt;

&lt;p&gt;주어진 리스트 data_set으로부터 새로운 리스트 collection을 생성하는 ​프로그램을 코딩하면 위 코드와 같다&lt;br /&gt;
위는 명령형 스타일이고, 아래는 함수형 스타일이다&lt;br /&gt;
위 코드에서, 삼진 연산자 if를, ​같은 키워드를 사용하면서 순서만 바꿔, ​명령형 코드를 함수형 코드로 재구조화한 것을 볼 수 있다&lt;br /&gt;
절차에 초점을 둔 코드는 조건을 만족시키면, append​ 만족시키지 못하면, modify &amp;amp; append​&lt;/p&gt;

&lt;p&gt;반면에 데이터에 초점을 둔 함수 스타일로 표현하면, ​리스트 컴프리헨션이 적절한 형식이고, ​주어진 리스트 data_set에서 조건에 맞는 것만 collection로 생성하면 된다&lt;br /&gt;
리스트 요소를 d로 지칭하여 표현식을 작성하면, ​아래쪽 코드와 같다. Data_set의 각 요소 d에 대해 ​먼저 조건을 만족시키는지 확인하고, 맞으면 bypass 안맞으면 modify&lt;/p&gt;

&lt;p&gt;마치 순서를 바꾼 것처럼 보이지만, 시맨틱을 고려하면 조건을 만족하면 리스트에 남기고(하나씩 append 하지 않고), ​조건을 만족하지 않으면 modify(d)해서 수정된 d를 리스트에 남긴다. 그리고 이와 같이 생성된 새로운 리스트를 collection으로 명명(naming)한다는 의미이다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Generator Comprehension&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;제너레이터 컴프리헨션은 리스트 컴프리헨션과 유사하게 데이터를 생성하나 문법적으로 [ ] 대신에 ( )를 사용한다&lt;br /&gt;
제너레이터 컴프리헨션은 데이터 생성을 위해, ​함수 정의에 ‘데이터 생성 방법’을 서술한다&lt;br /&gt;
이 서술은 그에 대한 반복 처리를 하거나 .next()를 호출할 때까지 실행되지 않는다&lt;br /&gt;
따라서 대규모 시퀀스를 위한 메모리를 절약하고​ 실제로 필요할 때까지 계산을 지연시킨다&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;# imperative​
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_log_lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;complex_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StopIteration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;raise&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;log_lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_log_lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;huge_log_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;# functional ​
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetLogLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_file&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__iter__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__next__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;complex_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;log_lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetLogLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;huge_log_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;간단한 예를 들면, 로그 파일에서 로그 라인을 읽어서 ​라인 리스트를 만드는 함수 코드는 위와 같다&lt;br /&gt;
위의 코드는 실제 상황을 고려한 코드로서, ​위쪽 코드는 명령형 프로그래밍 스타일, ​아래쪽 코드는 함수 프로그래밍 스타일을 나타낸다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Dictionary and Set Comprehension&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'C'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'D'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'E'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'F'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'C'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'D'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'E'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'F'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;딕셔너리와 집합 컴프리헨션은 모두 { }을 사용하나, ​그 안의 형식이 {key : value}, {value}로 각기 다르다&lt;br /&gt;
이들의 요소는 loop안에서 .update(), add() 호출을 통해 하나씩 생성되는 것이 아니라, ​모두 ‘한꺼번에’ 생성된다​&lt;br /&gt;
각각의 예는 위와 같다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Recursion&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;# recursive​
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorialR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorialR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;# iterative ​
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorialI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;파이썬은 리커션과 룹에 의한 함수 프로그래밍을 지원한다&lt;br /&gt;
리커션과 while 룹을 이용한 팩토리알 계산 함수는 각각 위와 아래에 있다&lt;br /&gt;
While 룹을 이용한 것은 거의 명령형 코드로 보이지만, ​함수로 정의하는 점과 while 안에서 함수형 코드가 있는 점 등​ 함수 프로그래밍 스타일과 명령형 프로그래밍 스타일이 혼합되어 있다&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;# Quicksort over a list-like sequence​
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quicksort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;pivots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;small&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quicksort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;large&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quicksort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;small&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;large&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이러한 혼합 형식은 퀵소트 함수에서도 볼 수 있다. 삼진 연산자 if, [표현식…]은 함수형이지만, ​나열된 문장은 명령형으로 보인다. 즉, 혼합형이다&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;# statement-based loop​
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;# map()-based &quot;loop“​
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;고차 함수를 써서 룹을 제거할 수 있다. ​이것은 가독성과 성능 저하를 가져오지만, ​함수 프로그래밍을 위한 좋은 아이디어를 얻을 수 있는 배경 지식으로 중요하다&lt;/p&gt;

&lt;p&gt;우선 for loop을 제거하기 위해 map()을 쓴 경우를 보자. ​위쪽 코드는 for loop에 의한 코드이다. ​반면 아래쪽 코드는 map에 의해 loop이 제거된 코드이다&lt;/p&gt;

&lt;p&gt;함수 map()을 적용할 때, ​다수의 함수를 같은 수의 리스트에 적용하고 싶다면, ​다수의 함수와 같은 수의 리스트를 파라미터로 하여, ​map(do_it, [f1, f2, f3], [l1, l2, l3])와 같이 표현한다&lt;br /&gt;
이때 적용해야 할 함수는 ​do_it = lambda f, &lt;em&gt;args: f(&lt;/em&gt;args)와 같이, ​람다에 의해 정의되어 있어야 한다&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bye&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bye&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do_it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bye&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;                         &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;David&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Jane&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mertz&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Doe&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;David&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mertz&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Bye&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Jane&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Doe&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_all_funcs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_all_funcs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bye&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
                             &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;David&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Jane&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mertz&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Doe&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;David&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mertz&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Jane&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Doe&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Bye&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;David&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mertz&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Bye&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Jane&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Doe&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위쪽 코드는 함수 hello를 [Dav, Jan]에, ​함수 bye를 [Mer, Do]에 적용하는데, ​이들 함수 hello, bye는 각각 ​lambda first, last: print(“Hello”, first, last)와 ​lambda first, last: print(“Bye”, first, last)이다&lt;/p&gt;

&lt;p&gt;만일 모든 함수를 각각의 리스트에 적용하려면, ​함수 map()을 lambda fns, *args: [list(map(fn, *args)) for fn in fns]와 같이 정의한다&lt;/p&gt;</content><author><name>lee989898</name></author><category term="pl" /><summary type="html">FPinPython</summary></entry><entry><title type="html">__IPSEC__</title><link href="https://lee989898.github.io/sc-21" rel="alternate" type="text/html" title="__IPSEC__" /><published>2021-12-03T01:06:00+09:00</published><updated>2021-12-03T01:06:00+09:00</updated><id>https://lee989898.github.io/sc-21</id><content type="html" xml:base="https://lee989898.github.io/sc-21">&lt;h3 id=&quot;ipsec&quot;&gt;&lt;strong&gt;IPSEC&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;IPSEC&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;IP 주소 위장 방지(출발지 인증)​&lt;/li&gt;
  &lt;li&gt;IP 데이터그램의 변경 및 재전송 방지​&lt;/li&gt;
  &lt;li&gt;IP 데이터 그램을 위한 기밀성, 무결성 제공​&lt;/li&gt;
  &lt;li&gt;보안  프로토콜 선택(시스템들이 필요로 하는)​&lt;/li&gt;
  &lt;li&gt;암호 알고리즘 선택(선택된 프로토콜에서 사용되도록)​&lt;/li&gt;
  &lt;li&gt;암호키 생성,분배(요청된 서비스의 제공에 필요) ​&lt;/li&gt;
  &lt;li&gt;Application​
    &lt;ul&gt;
      &lt;li&gt;VPN (virtual Private Network): 가상 전용회선​&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;IPSEC 구성&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;IPsec AH(인증 헤더) 프로토콜​
    &lt;ul&gt;
      &lt;li&gt;데이터 근원 인증,비연결형 무결성 제공 ​&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;캡슐화 보안페이로드 (ESP ) – 데이터기밀성, 제한된 트래칙 흐름 기밀성, 비연결형 무결성, 데이터 근원인증, 재전송공격 방지 제공​&lt;/li&gt;
  &lt;li&gt;IKE 프로토콜 ​
    &lt;ul&gt;
      &lt;li&gt;통신당사자간 키관리 프로토콜​&lt;/li&gt;
      &lt;li&gt;암호알고리즘 선택협상, 키분배 위해 사용​&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Transport and Tunnel Modes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc\sc34.png&quot; alt=&quot;컴퓨터보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Transport mode​
    &lt;ul&gt;
      &lt;li&gt;End to end between hosts​&lt;/li&gt;
      &lt;li&gt;관련 hosts들이 IPSec을 지원해야​&lt;/li&gt;
      &lt;li&gt;IP 상위 프로토콜 (TCP, Application) 안전하게 전송​&lt;/li&gt;
      &lt;li&gt;IP header에 IPSec header정보 추가​&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc\sc35.png&quot; alt=&quot;컴퓨터보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tunnel mode​
    &lt;ul&gt;
      &lt;li&gt;터널내의 모든 IP 트래픽 보호​&lt;/li&gt;
      &lt;li&gt;터널의 시작,종류 지점에 IPSec gateway​&lt;/li&gt;
      &lt;li&gt;터널 시작 gateway에서 새 IP header와 Ipsec header 추가하고, 종료 gateway에서 제거​&lt;/li&gt;
      &lt;li&gt;라우터가 내부 패킷을 검사하지 않음&lt;/li&gt;
      &lt;li&gt;소스 및 목적지 주소가 다를 수 있음&lt;/li&gt;
      &lt;li&gt;방화벽에서 구현 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>lee989898</name></author><category term="security" /><summary type="html">IPSEC</summary></entry><entry><title type="html">__SSL/TLS__</title><link href="https://lee989898.github.io/sc-20" rel="alternate" type="text/html" title="__SSL/TLS__" /><published>2021-12-03T01:06:00+09:00</published><updated>2021-12-03T01:06:00+09:00</updated><id>https://lee989898.github.io/sc-20</id><content type="html" xml:base="https://lee989898.github.io/sc-20">&lt;h3 id=&quot;ssltls&quot;&gt;&lt;strong&gt;SSL/TLS&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Secure sockets layer (SSL)​&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;1996, Netscape​&lt;/li&gt;
  &lt;li&gt;1999, TLS로​&lt;/li&gt;
  &lt;li&gt;웹기반 전자상거래를 위해 TCP layer에서 메시지와 무결성과 비밀성 제공​&lt;/li&gt;
  &lt;li&gt;Web-server와 web-browser간 보안​&lt;/li&gt;
  &lt;li&gt;HTTPS – 현재 대부분 서버에서 사용​&lt;/li&gt;
  &lt;li&gt;Handshake (암호spec, session관리), record (암호,무결성등 보안서비스) protocols로 나뉜다​&lt;/li&gt;
  &lt;li&gt;인증수행-&amp;gt;세션키분배-&amp;gt;암호화 메시지 송수신 순서​&lt;/li&gt;
  &lt;li&gt;지원하는 보안서비스 ​
    &lt;ul&gt;
      &lt;li&gt;Server/client authentication, confidentiality, integrity&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;부인방지기능은 제공안됨 – 전자서명 사용해야​&lt;/li&gt;
  &lt;li&gt;단순히 web-server와 web-browser간의 모든 data를 암호화하면 안전? No, replay attack (관찰된 통신내용을 동일하게 재생하면 같은 결과를 얻을 수 있다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Secure sockets layer (SSL) 표준​&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;User authentication​&lt;/li&gt;
  &lt;li&gt;Confidentiality​&lt;/li&gt;
  &lt;li&gt;Integrity​
​
&lt;img src=&quot;\assets\built\images\sc\sc31.png&quot; alt=&quot;컴퓨터보안&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;TLS/SSL Protocol 구성​&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Handshake protocol​
    &lt;ul&gt;
      &lt;li&gt;Client, server 간 인증, 암호 알고리즘 합의, 키교환 등 수행​&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Record protocol​
    &lt;ul&gt;
      &lt;li&gt;데이터를 인증, 암호화처리하고 메시지 송수신​&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Change cipher spec​
    &lt;ul&gt;
      &lt;li&gt;암호 spec을 변경담당​&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Alter protocol​
    &lt;ul&gt;
      &lt;li&gt;에러처리​&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Handshake Protocol&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;핸드셰이크는 서버를 확인하고 데이터가 전송되기 전에 클라이언트와 서버가 암호화 세트에 동의하도록 한다&lt;/li&gt;
  &lt;li&gt;Record protocol의 의한 data송수신보다 먼저 수행되어 다음의 session정보를 생성, 관리​
    &lt;ul&gt;
      &lt;li&gt;Session ID​&lt;/li&gt;
      &lt;li&gt;Certification​&lt;/li&gt;
      &lt;li&gt;Cipher spec: 압축, MAC algorithm​&lt;/li&gt;
      &lt;li&gt;Compression method: 암호화 이전 압축 algorithm​&lt;/li&gt;
      &lt;li&gt;Master secret key: 48bit&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Handshake Protocol&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;3개의 필드로 이루어진 메시지 교환
    &lt;ul&gt;
      &lt;li&gt;type: 메시지 종류 명시&lt;/li&gt;
      &lt;li&gt;length: 메시지 길이&lt;/li&gt;
      &lt;li&gt;content: 메시지 종류에 따른 값들&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;4단계 진행
    &lt;ul&gt;
      &lt;li&gt;1단계: Security capability establish​&lt;/li&gt;
      &lt;li&gt;2단계: Server authentication &amp;amp; key exchange​&lt;/li&gt;
      &lt;li&gt;3단계: Client authentication &amp;amp; key exchange​&lt;/li&gt;
      &lt;li&gt;4단계: Change cipher specs​&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc\sc32.png&quot; alt=&quot;컴퓨터보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1단계: Security capability establish​
    &lt;ul&gt;
      &lt;li&gt;1~3​&lt;/li&gt;
      &lt;li&gt;Hello 메시지 교환으로 session ID, 키교환알고리즘, 인증 알고리즘, 암호알고리즘, 압축 알고리즘 결정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Server authentication &amp;amp; key exchange​
    &lt;ul&gt;
      &lt;li&gt;4~6​&lt;/li&gt;
      &lt;li&gt;4: 서버의 인증서와 검증위한 인증서체인, 공개키전송​&lt;/li&gt;
      &lt;li&gt;5: client 인증서 요구(opt)​&lt;/li&gt;
      &lt;li&gt;6: 2단계 종료메시지&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;3단계: Client authentication &amp;amp; key exchange​
    &lt;ul&gt;
      &lt;li&gt;7~9​&lt;/li&gt;
      &lt;li&gt;7: client 인증서전송​&lt;/li&gt;
      &lt;li&gt;8: 48byte premaster secrete 전송​&lt;/li&gt;
      &lt;li&gt;9: client 인증서 검증&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;4단계: Change cipher specs​
    &lt;ul&gt;
      &lt;li&gt;10~11​&lt;/li&gt;
      &lt;li&gt;암호사양변경 메시지 교환을 통해 다음 세션에 적용될 암호 spec 결정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Record Protocol&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;메시지를 최대 16KB 단위로 fragment​&lt;/li&gt;
  &lt;li&gt;MAC 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc\sc33.png&quot; alt=&quot;컴퓨터보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1: 메시지를 최대 16KB 단위로 fragment​&lt;/li&gt;
  &lt;li&gt;2: 압축 (opt)​&lt;/li&gt;
  &lt;li&gt;3: MAC 추가​&lt;/li&gt;
  &lt;li&gt;4: Encryption​&lt;/li&gt;
  &lt;li&gt;5: SSL reacord header 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Changes from SSL 3.0 to TLS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Transport Layer Security [RFC2246]​&lt;/li&gt;
  &lt;li&gt;Additional Alerts added​&lt;/li&gt;
  &lt;li&gt;Modification to hash calculations​&lt;/li&gt;
  &lt;li&gt;Protocol version 3.1 in ClientHello, ServerHello&lt;/li&gt;
&lt;/ul&gt;</content><author><name>lee989898</name></author><category term="security" /><summary type="html">SSL/TLS</summary></entry></feed>