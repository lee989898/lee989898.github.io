<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://lee989898.github.io/author/lee989898/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://lee989898.github.io/" rel="alternate" type="text/html" />
  <updated>2022-04-14T23:27:04+09:00</updated>
  <id>https://lee989898.github.io/author/lee989898/feed.xml</id>

  
  
  

  
    <title type="html">LEE | </title>
  

  
    <subtitle>공부 블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Data Binding</title>
      <link href="https://lee989898.github.io/ad" rel="alternate" type="text/html" title="Data Binding" />
      <published>2022-04-13T16:07:07+09:00</published>
      <updated>2022-04-13T16:07:07+09:00</updated>
      <id>https://lee989898.github.io/ad</id>
      <content type="html" xml:base="https://lee989898.github.io/ad">&lt;p&gt;findViewById() 함수를 사용할 때마다 Android 시스템은 뷰 계층 구조를 만들고 런타임때 찾아서 사용한다&lt;br /&gt;
크기가 큰 안드로이드 앱에는 많은 레이아웃과 수백개의 View가 있다. 그래서 런타임때 뷰 계층 구조를 계속해서 보는 것은 안드로이드 앱의 성능을 감소시킨다&lt;/p&gt;

&lt;p&gt;데이터 바인딩을 사용할 떄 레이아웃의 각 View에 대한 참조를 포함하는 바인딩 객체를 만든다&lt;br /&gt;
바인딩 객체가 생성되면 앱의 모든 구성 요소가 View에 액세스 할 수 있다. 그러면 안드로이드 시스템은 뷰 게층 구조를 반복해서 탐색할 필요가 없어진다. 결과적으로 데이터 바인딩은 앱의 성능을 크게 향상시킨다&lt;br /&gt;
또한 findViewById() 함수를 대체하여 코드를 간결하고 읽기 쉽고 유지 관라하기 쉽게 만든다&lt;br /&gt;
그리고 데이터 바인딩 객체 생성은 컴파일 때 하여 오류가 있는 경우 컴파일 하는 동안 인식한다. 그래서 View 관련된 사용자가 앱과 상호 작용할 때 같은 런타임에서의 에러가 발생하지 않는다&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 데이터 바인딩 활성화&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// build.gradle&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;dataBinding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;바인딩을 생성하려면 xml파일을 layout 태그로 감싸줘야 한다&lt;br /&gt;
안드로이드에서 레이아웃의 네임스페이스 선언은 가장 바깥쪽 태그에 있어야 한다&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// activity_main.xml&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res-auto&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/tools&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;androidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constraintlayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConstraintLayout&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/name_text&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.MainActivity&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;androidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constraintlayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConstraintLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;안드로이드 데이터 바인딩 라이브러리은 activity_main.xml을 이용하여 ActivityMainBinding이라는 이름으로 바인딩 객체를 만든다&lt;br /&gt;
xml 레이아웃의 각 이름의 첫글자를 대문자로 만들고 밑줄을 제거하고 바인딩을 추가하여 이름을 짓는다&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// MainActivity.kt&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.anushka.bindingdemo1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;androidx.appcompat.app.AppCompatActivity&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.os.Bundle&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;androidx.databinding.DataBindingUtil&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.anushka.bindingdemo1.databinding.ActivityMainBinding&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppCompatActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lateinit&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActivityMainBinding&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataBindingUtil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activity_main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;submitButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setOnClickListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;displayGreeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;displayGreeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;greetingTextView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nameEditText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;setconview 함수는 화면에 레이아웃을 렌더링하는데 도움이 된다. 사용자가 제공한 값을 기준으로 xml 레이아웃 파일에서 뷰는 화면의 측정에 때라 inflated 되고 렌더링 된다&lt;br /&gt;
하지만 데이터 바인딩을 사용하면 이 기능이 필요하지 않다. 바인딩 객체를 사용하여 동일한 작업을 보다 효율적이고 효과적으로 수행할 수 있다&lt;/p&gt;

&lt;p&gt;android id 속성은 카멜 케이스로 밑줄을 제거하고 생성된다&lt;br /&gt;
greeting_text_view -&amp;gt; greetingTextView&lt;/p&gt;

&lt;p&gt;kotlin의 apply scope 기능을 사용하여 데이터 바인딩 이름의 반복을 줄일 수 있다&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="android" />
      

      
        <summary type="html">findViewById() 함수를 사용할 때마다 Android 시스템은 뷰 계층 구조를 만들고 런타임때 찾아서 사용한다 크기가 큰 안드로이드 앱에는 많은 레이아웃과 수백개의 View가 있다. 그래서 런타임때 뷰 계층 구조를 계속해서 보는 것은 안드로이드 앱의 성능을 감소시킨다</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">2차 세미나</title>
      <link href="https://lee989898.github.io/ad" rel="alternate" type="text/html" title="2차 세미나" />
      <published>2022-04-13T01:06:00+09:00</published>
      <updated>2022-04-13T01:06:00+09:00</updated>
      <id>https://lee989898.github.io/ad</id>
      <content type="html" xml:base="https://lee989898.github.io/ad">&lt;h2 id=&quot;2차-세미나&quot;&gt;&lt;strong&gt;2차 세미나&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;1차-세미나-확장하기&quot;&gt;&lt;strong&gt;1차 세미나 확장하기&lt;/strong&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Activity를 만들 떄 어디에 어떤게 추가될까?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;자동으로 Activity를 만들 떄 android studio가 우리가 만드는 Activity를 manifest파일에 추가해준다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\ad\ad08.png&quot; alt=&quot;안드로이드&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\ad\ad09.png&quot; alt=&quot;안드로이드&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 화면의 전환을 담당하는 메시징 객체 Intent&lt;br /&gt;
Intent 객체를 이용해 다른 액티비티를 호출하고 화면의 전환을 할 수 있다&lt;/p&gt;

&lt;p&gt;인텐트에는 명시적 인텐트, 암시적 인텐트 2가지 유형이 있다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;명시적 인텐트: 내가 시작하려는 구성요소가 무엇인지 명시적으로 지정할때 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\ad\ad10.png&quot; alt=&quot;안드로이드&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;암시적 인텐트: 내가 하려는 인텐트의 활동과 데이터를 지정하긴 했는데 호출할 대상이 달라질 수 있는 경우 사용, 쉽게 말하면 어떤 활동과 데이터를 보낼지는 있는데 무엇을 켜야할지 모를때 사용한다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\ad\ad11.png&quot; alt=&quot;안드로이드&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;백스택이란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;액티비티들은 실행된 순서대로 스택에 차곡차곡 쌓이는데,  이때 이 스택을 백스택이라고 한다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\ad\ad12.png&quot; alt=&quot;안드로이드&quot; /&gt;&lt;/p&gt;

&lt;p&gt;startActivity()는 액티비를 호출하는 함수이고, finish()는 액티비티를 (destroy)종료 하는 함수이다&lt;br /&gt;
startActivity() 함수만 사용해서 Activity를 전환한다면&lt;br /&gt;
ex) 버튼을 클릭해서 화면 전환시 : 로그인 화면 -&amp;gt; 회원가입 화면 -&amp;gt; 로그인 화면&lt;br /&gt;
뒤로가기 버튼 클릭시: 앱꺼짐 &amp;lt;- 로그인 화면 &amp;lt;- 회원가입 화면 &amp;lt;- 로그인 화면&lt;/p&gt;

&lt;p&gt;finish() 함수를 사용할 경우: 스택 관리를 통해 화면전환을 관리할 수 있다&lt;br /&gt;
ex) 버튼을 클릭해서 화면 전환시: 로그인 화면 -&amp;gt; 회원가입 화면, 로그인 화면 &amp;lt;- 회원가입 화면&lt;br /&gt;
뒤로가기 버튼 클릭시: 업꺼짐 &amp;lt;- 로그인 화면&lt;/p&gt;

&lt;h3 id=&quot;fragment&quot;&gt;&lt;strong&gt;Fragment&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;액태비티 만으로 개발을 한다면 윗 부분은 같은 화면이고 아래 부분만 다른 화면을 만들어야 하면 다른 액티비티에 같은 뷰를 또 만들어야 해서 비효율 적이다&lt;br /&gt;
중복되는 화면을 처리하고 싶고 다양한 기기에 적용하고 싶을 때 fragment를 이용한다&lt;br /&gt;
Fragment: fragment UI를 개별적으로 분할할 수 있도록 하여 Acitivty UI에 모듈성과 재사용성을 올려준다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fragment의 특징&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Fragment는 자체 레이아웃, 자체 생명주기, 자체 이벤트 처리를 가질 수 있다&lt;/li&gt;
  &lt;li&gt;여러 Activity에서 하나의 Fragment를 사용해서 UI 표현 가능 -&amp;gt; 재사용성이 뛰어나다&lt;/li&gt;
  &lt;li&gt;런타임 동안 Acitivty 내에서 Fragment의 추가/교체/삭제 가능&lt;/li&gt;
  &lt;li&gt;Fragment는 독립적으로 존재할 수 없고, 반드시 Activity나 다른 Fragment에 호스팅 되어야 한다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\ad\ad13.png&quot; alt=&quot;안드로이드&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fragment의 생명주기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\ad\ad14.png&quot; alt=&quot;안드로이드&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;onCreate(): Fragment가 생성될 때 호출(UI 초기화는 불가능) (Fragment 생성)&lt;/li&gt;
  &lt;li&gt;onCreateView(): Fragment의 뷰를 그리는 시점. 뷰 관련된 초기화가 이루어짐(대부분의 코드는 우선 여기서 작성) (뷰 생성)&lt;/li&gt;
  &lt;li&gt;onViewCreated(): onActivityCreated가 Deprecated되고 추가된 콜백 메소드, View가 만들어지고 난 후이며 이때부터 Fragment가 Activity에 온전히 접근 가능&lt;/li&gt;
  &lt;li&gt;onDestroyView(): Fragment의 뷰가 소멸되는 시점(Fragment가 소멸되는건 아님) (뷰 소멸)&lt;/li&gt;
  &lt;li&gt;onDestroy(): Activity 또는 Fragment가 소멸될 때 호출 (Fragment 소멸)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fragment&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;return inflater.inflate(R.layout.fragment_sample, container, fasle): xml을 메모리에 객체화 시키는 함수, xml 리소스 정보를 해석하여 View를 생성하고 rootView를 리턴한다&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;만약 ViewGroup이 FramLayout이라면 ConstraintLayout으로 바꾸면 된다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Activity내에서 Fragment를 띄우기 위해서는 xml 파일에 FragmentContainerView를 추가하면 된다&lt;/li&gt;
  &lt;li&gt;android:name=”com.lee989898.soptlee.SampleFragment”처럼 android:name 속성을 통해 xml상에서 바로 Fragment를 inflate 시킬 수도 있지만 유연하지 못하다&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Activity 레이아웃 내의 Fragment UI 위치를 지정할 때는 FragmentContainerView를 사용하길 권장한다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Fragment Transaction: 액티비티에서 프래그먼트를 추가,교체,삭제 작업을 수행하기 위해 사용한다
    &lt;ul&gt;
      &lt;li&gt;FragmentManager 클래스에 구현되어 있음&lt;/li&gt;
      &lt;li&gt;수행한 트랜잭션의 상태를 백스택에 저장 가능&lt;/li&gt;
      &lt;li&gt;Fragment 전환 애니메이션 설정 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;실습&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Fragment Transaction을 이용해서 Fragment를 Acitivty에 추가하고 교체하기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SampleActivity.kt&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.lee989898.soptlee&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;androidx.appcompat.app.AppCompatActivity&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.os.Bundle&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.lee989898.soptlee.databinding.ActivitySampleBinding&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleActivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppCompatActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;FIRST_POSITION&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;SECOND_POSITION&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FIRST_POSITION&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lateinit&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActivitySampleBinding&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActivitySampleBinding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layoutInflater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;nf&quot;&gt;initTransactionEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initTransactionEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fragment1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fragment2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleFragment2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;supportFragmentManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;beginTransaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fragment_main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fragment1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btnFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setOnClickListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;supportFragmentManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;beginTransaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;FIRST_POSITION&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fragment_main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fragment2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SECOND_POSITION&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;SECOND_POSITION&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fragment_main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fragment1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FIRST_POSITION&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;add(): 프래그먼트를 추가&lt;/li&gt;
  &lt;li&gt;replace(): 이전 프래그먼트를 제거 후 추가(교체)&lt;/li&gt;
  &lt;li&gt;SupportFragmentManager로 FragmentManage를 호출&lt;/li&gt;
  &lt;li&gt;beginTransation()을 통해 트랜잭션 작업(추가/교체/삭제)생성&lt;/li&gt;
  &lt;li&gt;commit()을 통해 작업을 수행&lt;/li&gt;
  &lt;li&gt;가독성을 위해 상수 값 선언(자바에서 static final과 유사)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fragment에서 ViewBinding 사용법&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Activiy와 같은 방식으로 만들면 안된다&lt;br /&gt;
Fragment View(화면)의 생명주기가 Fragment 자제의 생명주기보다 짧기 때문에 View는 죽어도 Fragment 자체는 살아있는 상황이 생길 수 있다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\ad\ad15.png&quot; alt=&quot;안드로이드&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fragment를 보유한 Activity가 화면 회전을 할 떄 (화면 회전시 Activity는 OnDestroy()를 호출 했다가 다시 onCreate()를 호출한다)&lt;br /&gt;
Activity는 onDestroy() 되었지만 그 안에 Fragment인 경우 onDestroyView()까지만 호출되고 onDestroy()가 호출되지 않는다&lt;/p&gt;

&lt;p&gt;Binding은 뷰참조를 하기 위해 생성하는 것인데 Fragment는 살아있고 Fragment의 View가 파괴된다면?&lt;br /&gt;
만약 Fragment에서 onDestroy()가 호출되지 않고 onDestroyView()만 호출된다면, Fragment는 계속 살아있으니깐 binding 변수에는 다시 onCreateView()가 호출되기 전까지 이미 죽은 View가 계속 참조될 수 있다. 이럴 경우 분명히 죽어야 되는데 죽지않은 좀비 객체가 생기게 된다. 이러한 좀비 객체의 발생은 휴대폰의 메모리 누수를 유발하게 된다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\ad\ad16.png&quot; alt=&quot;안드로이드&quot; /&gt;&lt;/p&gt;

&lt;p&gt;구글 공식문서에서는 Property(filed + getter + setter)을 이용해서 해결한다&lt;br /&gt;
앨비스 연산자를 활용해서 private val binding get() = _binding ?: error(“Binding이 초기화 되지 않았습니다.”)처럼 작성도 가능하다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\ad\ad17.png&quot; alt=&quot;안드로이드&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;recyclerview&quot;&gt;&lt;strong&gt;RecyclerView&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;RecyclerView: 앱에서의 List를 표현할 떄 사용하는 뷰&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;가로/세로/격자방향을 지원&lt;/li&gt;
  &lt;li&gt;ItemDecoration을 이용해 동적인 데코레이션 가능&lt;/li&gt;
  &lt;li&gt;ItemAnimator를 이용해 애니메이션을 넣을 수 있다&lt;/li&gt;
  &lt;li&gt;이름 그대로 View를 재사용하기 때문에 효율적&lt;/li&gt;
  &lt;li&gt;ListView보다 유연 -&amp;gt; 커스텀이 편함&lt;/li&gt;
  &lt;li&gt;ViewHolder 패턴이 강제 되기 때문에 스크롤 시 마다 View를 Create하는게 아닌 재활용을 할 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\ad\ad18.png&quot; alt=&quot;안드로이드&quot; /&gt;&lt;/p&gt;

&lt;p&gt;RecylcerView 작업 순서&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;item 하나의 UI를 확인&lt;/li&gt;
  &lt;li&gt;확인한 하나의 UI Layout 파일 만들기&lt;/li&gt;
  &lt;li&gt;item data class 만들기&lt;/li&gt;
  &lt;li&gt;UI의 요소가 들고있는 ViewHolder 만들기&lt;/li&gt;
  &lt;li&gt;RecyclerView Adapter 만들기&lt;/li&gt;
  &lt;li&gt;RecyclerView 배치&lt;/li&gt;
  &lt;li&gt;RecyclerView item 배치 확인하기 (LayoutManager)&lt;/li&gt;
  &lt;li&gt;RecyclerView Adater 연결하기&lt;/li&gt;
  &lt;li&gt;Adapter 데이터 갱신하기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1.아이템 레이아웃 만들기&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;item_sample_list.xml&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;androidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constraintlayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConstraintLayout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res-auto&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/tools&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paddingVertical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10dp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ImageView&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/iv_profile&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0dp&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0dp&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@drawable/profile&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_constraintBottom_toBottomOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;parent&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_constraintDimensionRatio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1:1&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_constraintStart_toStartOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;parent&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_constraintTop_toTopOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;parent&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_constraintWidth_percent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.25&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TextView&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/tv_name&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_marginStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;20dp&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@color/black&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;20sp&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_constraintStart_toEndOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@id/iv_profile&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_constraintTop_toTopOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@id/iv_profile&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;이름&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TextView&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/tv_introduce&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@color/black&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;14sp&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_constraintBottom_toBottomOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;parent&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_constraintStart_toStartOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@id/tv_name&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_constraintTop_toBottomOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@id/tv_name&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;자기 소개 텍스트 입니다&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;androidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constraintlayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConstraintLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;tools: 레이아웃 편집기 상에서는 preview에 반영되어 나타나지만 컴파일 시에는 앱에 반영되지 않는 속성(미리보기 속성)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2.데이터 클래스 만들기&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UserData.kt&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.lee989898.soptlee&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;introduction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Data ckass: kotlin에서 제공하는 데이터만을 다루는 클래스&lt;br /&gt;
Data들은 어디다 띄워야 할까? -&amp;gt; ViewHolder가 가지고 있는 View(Item Layout)안에 넣어주면 된다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ViewHolder: RecyclerView의 재활용 되는 Item Layout(View)을 붙잡고 관리하는 역할&lt;br /&gt;
Adapter에서 전달받은 데이터를 Item Layout에 Bind 시켜주는 역할&lt;br /&gt;
한 번 ViewHolder가 생성되고 나면 계속해서 재활용 된다&lt;/p&gt;

&lt;p&gt;Adapter: ViewHolder를 생성하고 ItemLayout을 ViewHolder에 넘겨준다&lt;br /&gt;
리스트로 보여줄 Data를 각 ViewHodelr에 전달해준다&lt;/p&gt;

&lt;p&gt;3.ViewHodelr와 Adapter 만들기&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.lee989898.soptlee&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.view.LayoutInflater&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.view.ViewGroup&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;androidx.recyclerview.widget.RecyclerView&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.lee989898.soptlee.databinding.ItemSampleListBinding&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FollowerAdapter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RecyclerView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Adapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FollowerAdapter&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FollowerViewHolder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;userList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutableListOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreateViewHolder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FollowerViewHolder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;binding&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;ItemSampleListBinding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LayoutInflater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FollowerViewHolder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onBindViewHolder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;holder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FollowerViewHolder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;holder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onBind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getItemCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;


    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FollowerViewHolder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ItemSampleListBinding&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RecyclerView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ViewHolder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onBind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tvName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tvIntroduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;introduction&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;ViewHolder 코드 분석
    &lt;ul&gt;
      &lt;li&gt;class FollwerViewHolder에서 Binding 객체를 생성자로 가지게 만들고, RecyclerView.ViewHolder 클래스 상속 이 때 RecyclerView.ViewHodler 클래스로 생성자로 View를 요구하므로, binding.root(root뷰)를 넘겨준다&lt;/li&gt;
      &lt;li&gt;onBind 함수는 ViewHolder가 가진 View에 Adapter로 부터 전달받은 데이터를 붙여주는 함수(onBindViewHolder 호출 시 실행되는 함수)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Adapter 코드 분석
    &lt;ul&gt;
      &lt;li&gt;RecyclerView.Adapter()를 상속 받는다, &amp;lt;&amp;gt;안에 해당 Adapter가 데이터를 전달할 ViewHolder 클래스 작성&lt;/li&gt;
      &lt;li&gt;getItemCount(): RecyclerView로 보여줄 전체 데이터의 개수 반환&lt;/li&gt;
      &lt;li&gt;onCreateViewHolder: ViewHolder를 생성하고 ItemLayout의 Binding 객체를 만들어 ViewHodler의 생성자로 넘겨주는 함수
        &lt;ul&gt;
          &lt;li&gt;LayoutInflator: xml layout을 코드에서 쓸 수 있도록 하는 과정은 inflate 였다. 이러한 inflate 과정을 통해 뷰를 만들거나 RecylcerView에 ViewHolder에서 뷰를 만들떄 LayoutInflater라는 것을 사용한다. 간단하게 말해서 액티비티, 프래그먼트와 다르게 뷰를 만들어주는 친구의 도움을 받는다고 생각하자&lt;/li&gt;
          &lt;li&gt;.from(): 이렇게 뷰를 만들어주는 LayoutInflater에는 Context가 필요하다. Context란 간단하게 말해서 앱의 흐름이자 정보를 담는 친구이다. 해당 Context라는 친구가 있어야 우리가 만드는 앱의 리소스에도 접근할 수 있다. 간단히 뷰홀더 안에 우리가 사용할 뷰의 참조할 친구를 전달하기 위해서 어떤 layout에 접근해야할지 앱의 흐름이자 정보를 알아야 한다&lt;/li&gt;
          &lt;li&gt;parent에는 뷰그룹이라는 친구가 들어온다. 해당 뷰를 보여줄 뷰그룹을 받아서 해당 뷰그룹은 어떤 흐름(Context)에 생성되야 할지 정보를 가지고 있다&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;onBindViewHolder(): 재활용 되는 뷰(ViewHodler의 뷰)가 호출하여 실행되는 함수, ViewHolder와 postion의 데이터를 결합시키는 역할을 하는 함수이다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4.RecyclerView 배치, RecyclerView item 배치 확인하기 (LayoutManager)&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;androidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constraintlayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConstraintLayout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res-auto&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/tools&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.MainActivity&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;androidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recyclerview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RecyclerView&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/rv_follower&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layoutManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;androidx.recyclerview.widget.LinearLayoutManager&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listitem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@layout/item_sample_list&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;androidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constraintlayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConstraintLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;itemCount: Preview상에서 몇개의 아이템을 띄워줄 것인지 결정&lt;/li&gt;
  &lt;li&gt;listItem: Preview상에서 어떤 listLayout을 리스트에 띄울 지 결정&lt;/li&gt;
  &lt;li&gt;LayoutManager: Item의 배치 규칙을 관리하는 클래스
    &lt;ul&gt;
      &lt;li&gt;LinearLayoutManager: 선형(수평/수직)으로 Item을 보여줄 때 사용&lt;/li&gt;
      &lt;li&gt;GridLayoutManager: 격자식으로 Item을 보여줄 때 사용 코드 또는 xml 상에서 가로로 몇 칸 보여줄 지 설정가능&lt;/li&gt;
      &lt;li&gt;StageredGridLayoutManager: 높이가 불규칙한 형태의 격자식 Item 리스트를 보여줄 때 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5.RecyclerView Adapter 연결하기, Adapter 데이터 갱신하기&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.lee989898.soptlee&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;androidx.appcompat.app.AppCompatActivity&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.os.Bundle&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.lee989898.soptlee.databinding.ActivityMainBinding&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppCompatActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lateinit&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;followerAdapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FollowerAdapter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lateinit&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActivityMainBinding&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActivityMainBinding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layoutInflater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;nf&quot;&gt;initAdapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initAdapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;followerAdapter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FollowerAdapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rvFollower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;followerAdapter&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;followerAdapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;UserData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;이강민&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;안드로이드 파트장&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;UserData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;김태현&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;IOS 파트장&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;UserData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;김두범&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;기획 파트장&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;UserData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;권혁진&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;웹 파트장&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;UserData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;채정아&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;서버 파트장&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;UserData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;박수아&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;디자인 파트장&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;followerAdapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;notifyDataSetChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;private lateinit var followerAdapter: FollowerAdapter, follwerAdapter = FollowerAdapter() -&amp;gt; Adapter 초기화&lt;/li&gt;
  &lt;li&gt;followerAdapter = FollowerAdapter(): Adapter와 RecyclerView 연동&lt;/li&gt;
  &lt;li&gt;followerAdapter.userList.addAll(): Adapter에 List로 보여줄 데이터를 넣어준다&lt;/li&gt;
  &lt;li&gt;followerAdapter.notifyDataSetChanged(): Adpater에 전체 리스트의 데이터가 갱신되었다고 알려주는 메소드&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="android" />
      

      
        <summary type="html">2차 세미나</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">MVVM</title>
      <link href="https://lee989898.github.io/ad" rel="alternate" type="text/html" title="MVVM" />
      <published>2022-04-11T01:06:00+09:00</published>
      <updated>2022-04-11T01:06:00+09:00</updated>
      <id>https://lee989898.github.io/ad</id>
      <content type="html" xml:base="https://lee989898.github.io/ad">&lt;h2 id=&quot;mvvm&quot;&gt;&lt;strong&gt;MVVM&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;디자인패턴을 쓰는 이유&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;디자인 패턴은 소프트웨어 개발 방법을 문서로 공식화한 것인데, 디자인 패턴이란 한마디로 패턴이다. 기존에 앱을 만들면서 사람들이 여러가지 공법들을 적용해서 문제를 해결해 나갔는데, 이렇게 기존의 많은 개발자들이 쌓아놓은 경험을 통해서 쌓인 정리되어있는 패턴으로 만들면 일정한 규칙에 의해서 문제를 해결해 나가기에 코드의 가독성도 좋아지고 일정한 패턴으로 짜여져있어 테스트도 쉬워지고 타인의 코드를 봐도 이해하는데 쉽다. 또한 유지보수하는데 굉장히 유용하게 된다&lt;/p&gt;

&lt;p&gt;협업을 위해서 어느 위치에 어떤 로직이 들어있나를 미리 정의해 놓으면&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;비슷한 코드를 보고 알아보기 쉬워짐&lt;/li&gt;
  &lt;li&gt;유지보수가 수월해짐&lt;/li&gt;
  &lt;li&gt;코드들의 역할분리가 명확해짐 (객체간의 관심사 분리)&lt;/li&gt;
  &lt;li&gt;의존관계과 분리됨 (변화에 유연함 새로운 기능이나 코드가 좀 바뀌어도 코드가 유지됨)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;아래는 위키피다이의 설명이다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;소프트웨어 개발 방법에서 사용되는 디자인 패턴은, 프로그램 개발에서 자주 나타나는 과제를 해결하기 위한 방법 중 하나로, 과거의 소프트웨어 개발 과정에서 발견된 설계의 노하우를 축적하여 이름을 붙여, 이후에 재이용하기 좋은 형태로 특정의 규약을 묶어서 정리한 것이다. 알고리즘과 같이 프로그램 코드로 바로 변환될 수 있는 형태는 아니지만, 특정한 상황에서 구조적인 문제를 해결하는 방식을 설명해준다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;처음 개발할때 안드로이드 개발을 하면 스파게티 코드를 짜서 나중에 봤을떄 답도 없었던 기억이 있는데, 간단한 앱에서는 문제가 없을수 있지만 디자인 패턴없이 복잡한 로직의 앱을 만들다보면 수정사항이 있을 떄마다 화면을 구성하는 코드와 비지니스 로직이 들어간 코드를 매번 동시에 수정해야한다. (ex) xml파일이랑 액티비티 파일)
이 말은 서로간의 의존성이 강하다는 것이다. 의존성이 강해질수록 유지보수가 힘들기에 이러한 의존성을 해결하는 방법으로 model과 view의 관계를 해결하는 mvp, mvvm 같은 여러 패턴을 사용한다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;MVVM&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;MVVM패턴이란 Model, View, ViewModel의 줄임말이다. 하나의 소프트웨어를 최대한 기능적으로 작은 단위로 나누어 테스트가 쉽고 큰 프로젝트도 상대적으로 관리하기가 좋은 구조이다&lt;/p&gt;

&lt;p&gt;MVVM이 나오게 된 과정&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;처음 스파게티 코드&lt;/li&gt;
  &lt;li&gt;mvc 스파게티 코드와 다를 바 없다. 안드로이드 특성상 뷰와 컨트롤러 자체가 모두 액티비티, 프래그먼트에 포함되어 있기 때문이다. 컨트롤러가 코틀린 파일이고 view가 xml이 된다. 모델은 따로 분리되어있지만 어차피 코틀린 파일에서 직접호출하여 결합도는 높다&lt;/li&gt;
  &lt;li&gt;mvp 액티비티/프래그먼트 자체가 뷰이다. 프리젠터는 따로 클래스 자체가 분리된것이다. 뷰는 프리젠터에 일을 시키고 프리젠터는 모델에서 정보를 가져온다. 데이터 프리젠터가 가공해서 뷰에 넘겨준다. (개선점: 뷰량 모델을 완전히 분리하게 됨) (문제점: 프리젠터가 너무 커지고 뷰랑 프리젠터에 양방향 의존성이 생겨 1:1 관계가 만들어져서 재활용이 안된다)&lt;/li&gt;
  &lt;li&gt;그래서 mvvvm이 나왔다. 뷰는 뷰모델을 알지만 뷰모델은 뷰가 뭔지 모름 어디서 쓰이는지 그걸 느슨하게 데이터 바인딩으로 묶어 놓음, 뷰에 대한 상태 같은 것들을 뷰모델에 박아놓음, 뷰는 뷰모델을 관찰하고 있고 변경점이 생기면 뷰가 알아채서 스스로 갱신하는 것이 mvvm이다. 근데 사실 여기에 바인더라는 레이어가 뷰랑 뷰모델 사이에 숨어있다-&amp;gt; 안드로이드에서는 데이터 바인딩으로 지원한다. 데이터 바인딩을 안쓰면 그건 그냥 mvp로 봐도 무방하다. 그리고 Viewmodel은 aac의 뷰모델이 아니다 -&amp;gt; aac뷰모델은 안드로이드 라이프사이클에 종속되고 사실상 가로뷰 세로뷰 다른뷰라고 봐도 무방하다. 다시 정리하자면 뷰와 모델은 이미 mvp에서 분리되었고 뷰랑 뷰모델을 분리시키는 것이 mvvm의 목표이다 결론은 xml로 다 옮기자&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\ad\ad07.png&quot; alt=&quot;안드로이드&quot; /&gt;&lt;/p&gt;

&lt;p&gt;기본적인 mvvm구조인데&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;View
    &lt;ul&gt;
      &lt;li&gt;사용자에게 보여지는 UI 부분이다&lt;/li&gt;
      &lt;li&gt;View는 액티비티나 프래그먼트 같은 화면에 표현되는 레이아웃을 정의함&lt;/li&gt;
      &lt;li&gt;View는 기본적으로 데이터를 보여주기만 해야 해서 비즈니스 로직을 포함하지 않지만 UI 변경과 관련된 일부 로직은 포함될 수 있음
(안드로이드는 다른 플랫폼과는 다르게 생명주기라는 특수한 순서를 가지고 있기 때문에 이것을 처리하는 것만으로도 View는 상당히 복잡해지기 때문임)&lt;/li&gt;
      &lt;li&gt;View는 ViewModel을 관찰하고 있다가 상태 변화가 전달되면 화면을 갱신해야함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ViewModel
    &lt;ul&gt;
      &lt;li&gt;View를 표현하기 위해 만든 View를 위한 Model이다. View를 나타내 주기 위한 Model이자 View를 나타내기 위한 데이터 처리를 하는 부분이다&lt;/li&gt;
      &lt;li&gt;View와 Model 사이의 매개체 역할음 함&lt;/li&gt;
      &lt;li&gt;모든 View와 관련된 비즈니스 로직은 이 곳에 들어가게 되며 데이터를 잘 가공해서 View에서 뿌리기 쉬운 Model로 바꾸는 역할을 함&lt;/li&gt;
      &lt;li&gt;View와 ViewModel은 MVP와는 다르게 1:n의 관계를 가질 수 있으며 여러 개의 프래그먼트가 하나의 ViewModel을 가질 수 있음&lt;/li&gt;
      &lt;li&gt;ViewModel은 View가 데이터 바인딩 할 수 있는 속성과 명령으로 구성되어 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Model
    &lt;ul&gt;
      &lt;li&gt;어플리케이션에서 사용되는 데이터와 그 데이터를 처리하는 부분이다&lt;/li&gt;
      &lt;li&gt;MVC의 Model과 역할은 동일하다&lt;/li&gt;
      &lt;li&gt;DataModel이라고도 하며 DB, Network, SharedPreference 등 다양한 데이터 소스로부터 필요한 데이터를 준비함&lt;/li&gt;
      &lt;li&gt;ViewModel에서 데이터를 가져갈 수 있게 데이터를 준비하고 그에 대한 “이벤트”를 보냄&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;동작&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;사용자의 Action들은 View를 통해 들어오게 된다&lt;/li&gt;
  &lt;li&gt;View에 Action이 들어오면, Command 패턴(실행될 기능을 캡슐화함으로써 주어진 여러 기능을 실행할 수 있는 재사용성이 높은 클래스를 설계하는 패턴)으로 View Model에 Action을 전달합니다&lt;/li&gt;
  &lt;li&gt;View Model은 Model에게 데이터를 요청한다&lt;/li&gt;
  &lt;li&gt;Model은 View Model에게 요청받은 데이터를 응답한다&lt;/li&gt;
  &lt;li&gt;View Model은 응답 받은 데이터를 가공하여 저장한다&lt;/li&gt;
  &lt;li&gt;View는 View Model과 Data Binding 하여 화면을 나타낸다&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;모든 입력들은 View로  전달되며 ViewModel은 입력에 해당하는 Presentation Logic (말 그대로 보여주기 위한 로직, 화면상의 디자인 구성을 위한 로직, ex) 게시판에서의 표시하기 위한 for문 등의 사용 &amp;lt;-&amp;gt; 비즈니스 로직: 백엔드에서 일어나는 각종 처리를 일컫는 말)을 처리하여 View에 데이터를 전달한다.&lt;br /&gt;
ViewModel은 View를 따로 참조하지 않기 때문에 독립적으로 ViewModel과 View는 1:n의 관계이다. (자유롭다)&lt;/p&gt;

&lt;p&gt;따라서 View는 자신이 이용할 ViewModel을 선택해 데이터를 바인딩하여 업데이트를 받게 된다
그 후 Model이 상태 및 데이터가 변경되면 해당하는 ViewModel을 이용하는 View가 자동으로 업데이트 된다&lt;br /&gt;
마지막으로 ViewModel은 View를 나타내기 위한 Model이자, View의 Presentaition Logic을 처리한다&lt;br /&gt;
MVP와 마찬가지로 M-V 사이의 의존성이 없고, MVP처럼 V-VM이 1:1 관계가 아닌 독립적이기 때문에 이 둘 사이의 의존성도 없다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;결론&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;MVVM 패턴은 Command 패턴과 Data Binding 두 가지 패턴을 사용하여 구현된다&lt;br /&gt;
Command 패턴과 Data Binding을 이용하여 View와 View Model 사이의 의존성을 없앤다&lt;/p&gt;

&lt;p&gt;뷰는 뷰모델을 알지만 뷰모델은 뷰가 뭔지, 어디서 쓰이는지 모른다. 그걸 느슨하게 데이터 바인딩으로 묶어논다&lt;br /&gt;
뷰에 대한 상태 같은 것들을 뷰모델에 저장한다&lt;br /&gt;
뷰는 뷰모델을 관찰하고 있고 변경점이 생기면 뷰가 알아채서 스스로 갱신하는 것이 MVVM이다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;장점&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;각각의 부분은 독립적이기 때문에 모듈화 하여 개발할 수 있다&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;단점&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;View Model의 설계가 쉽지 않다&lt;/li&gt;
  &lt;li&gt;특정 아키텍처로 개발을 시작하면 다른 아키텍쳐로 변환이 거의 불가능하다 -&amp;gt; 프로젝트를 다시 만드는 수준&lt;/li&gt;
  &lt;li&gt;프로젝트에 아키텍쳐별 상성있어서 나중에 프로젝트가 안맞다고 꺠닳으면 늦는다 -&amp;gt; 비효율적인 코드 생성&lt;/li&gt;
  &lt;li&gt;생산속도 엄청나게 느려진다 -&amp;gt; 기능 하나 만들때마다 파일을 엄청 많이 만들어야한다. 레이어 마다 파일들을 만들어야 해서 보일러 플레이트 코드(최소한의 변경으로 여러곳에서 재사용되며, 반복적으로 비슷한 형태를 띄는 코드)가 양산된다&lt;/li&gt;
&lt;/ol&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="android" />
      

      
        <summary type="html">MVVM</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">환경변수와 공격들</title>
      <link href="https://lee989898.github.io/sc2-05" rel="alternate" type="text/html" title="환경변수와 공격들" />
      <published>2022-04-11T01:06:00+09:00</published>
      <updated>2022-04-11T01:06:00+09:00</updated>
      <id>https://lee989898.github.io/sc2-05</id>
      <content type="html" xml:base="https://lee989898.github.io/sc2-05">&lt;blockquote&gt;
  &lt;p&gt;Environment Variables&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;동적으로 이름지어진 값의 집합&lt;/li&gt;
  &lt;li&gt;프로세스가 진행되는 운영 환경의 일부&lt;/li&gt;
  &lt;li&gt;실행 중인 프로세스가 동작하는 방식에 영향&lt;/li&gt;
  &lt;li&gt;Unix에 도입되었으며 Microsoft Windows에서도 채택됨&lt;/li&gt;
  &lt;li&gt;ex) PATH 변수
    &lt;ul&gt;
      &lt;li&gt;프로그램이 실행될 때 쉘 프로세스는 환경을 사용한다. 전체 경로가 제공되지 않은 경우 변수를 사용하여 프로그램이 있는 위치를 찾는다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;환경 변수에 접근하는 방법&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;방법 1: 메인 함수에서&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc54.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;p&gt;방법 2: 전역 변수를 사용하여&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc55.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;프로세스는 어떻게 환경 변수를 얻을까?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;프로세스는 두가지 방법으로 환경 변수를 가져온다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fokr() 시스템 호출을 사용하여 새 프로세스가 생성되면 자식 프로세스는 부모 프로세스의 환경 변수를 상속한다&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;프로세스가 자체적으로 새 프로그램을 실행하는 경우 일반적으로 execve 시스템 호출을 사용한다. 이경우 메모리 공간을 덮어쓰고 모든 이전 환경 변수가 사라진다. execve()는 전달하기 위해 특별한 방식으로 호출 될 수 있다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;execve() 호출 시 환경 변수 전달:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc56.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;execve()와 환경변수&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;프로그램은 새로운 프로그램 /usr/bin/env, 현재 프로세스의 환경 변수를 출력한다&lt;br /&gt;
새로운 변수 newenv를 3번째로 사용&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc57.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;
&lt;img src=&quot;\assets\built\images\sc2\sc58.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;환경 변수의 메모리 위치&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc59.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;envp 및 환경은 처음에는 같은 장소를 가리킨다&lt;/li&gt;
  &lt;li&gt;envp는 내부에서 메인 함수에서 액세스할 수 있다. Environ은 전역 변수&lt;/li&gt;
  &lt;li&gt;환경 변수에 변경 사항이 있을 때(예: 새로 추가됨), 환경변수의 저장 위치는 힙으로 바뀔 수 있다, 그래서 environ은 변경될 것이다(envp는 바뀌지 않는다)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;셸 변수 및 환경 변수&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;사람들은 종종 쉘 변수와 환경 변수를 똑같다고 착각한다&lt;/li&gt;
  &lt;li&gt;쉘 변수
    &lt;ul&gt;
      &lt;li&gt;쉘에서 사용하는 내부 변수&lt;/li&gt;
      &lt;li&gt;쉘은 사용자가 쉘을 생성, 할당 및 삭제할 수 있도록 내장 명령을 제공한다&lt;/li&gt;
      &lt;li&gt;예제에서는 FOO라는 쉘 변수를 생성한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;쉘 프로그램이 시작될 때 환경 변수를 자체 쉘에 복사합니다. 자체 쉘 변수에 대한 변경 사항은 반영되지 않는다, 아래 그림은 그 예이다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc61.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc60.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;아래 사진은 쉘 변수가 자식 프로세스의 환경 변수에 영향을 미치는 방법을 보여준다&lt;/li&gt;
  &lt;li&gt;또한 부모 쉘의 환경 변수가 자식 프로세스의 환경 변수가 되는 것을 보여준다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc62.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;p&gt;쉘 프롬프트에 env를 입력하면 쉘은 자식 프로세스를 생성한다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc63.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;/proc 파일 시스템에 대한 참고 사항&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;/proc은 Linux의 가상 파일 시스템이다.프로세스 ID를 디렉터리 이름으로 사용 하여 디렉토리를 포함한다&lt;/li&gt;
  &lt;li&gt;각 프로세스 디렉토리에는 Environ이라는 가상 파일이 포함되어 있다. 프로세스의 환경
    &lt;ul&gt;
      &lt;li&gt;예를 들어 가상 파일 /proc/932/environ은 다음과 같은 환경 변수를 포함한다. 프로세스 932&lt;/li&gt;
      &lt;li&gt;“strings /proc/\(/environ&quot; 명령은 현재 프로세스의 환경변수를 출력한다. (셸은\)를 자체 프로세스 ID로 대체함)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;env 프로그램은 bash 셸에서 호출될 때 자식 프로세스에서 실행된다. 따라서 자기 것이 아닌 쉘의 자식 환경 변수를 출력한다&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;환경 변수에 대한 공격&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;환경변수를 숨은 의도로 사용하면 매우 위험하다&lt;/li&gt;
  &lt;li&gt;사용자가 환경 변수를 설정할 수 있기 때문에 그것들은 Set-UId 프로그램 공격의 일부가 된다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc64.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Dynamic Linker를 통한 공격&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Linking은 프로그램에서 참조하는 외부 라이브러리 코드를 찾는 것이다&lt;/li&gt;
  &lt;li&gt;링크는 런타임 또는 컴파일 시간 동안 수행할 수 있다
    &lt;ul&gt;
      &lt;li&gt;Dynamic Linking: 환경 변수를 사용하며, 공격 surface의 일부가 된다&lt;/li&gt;
      &lt;li&gt;Static Linking&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;다음 예를 사용하여 정적 및 동적을 구별한다. 연결:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc65.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Static Linking
    &lt;ul&gt;
      &lt;li&gt;링커는 프로그램 코드와 라이브러리 코드를 결합한다. printf() 함수를 포함하여&lt;/li&gt;
      &lt;li&gt;정적 컴파일된 프로그램의 크기가 100배임을 알 수 있다. 동적 프로그램보다 크다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc66.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dynamic Linking
    &lt;ul&gt;
      &lt;li&gt;Linking은 런타임 중에 수행된다
        &lt;ul&gt;
          &lt;li&gt;공유 라이브러리(Windows의 DLL)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;동적 연결로 컴파일된 프로그램이 실행되기 전에 해당 실행 파일이 메모리에 먼저 로드됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc67.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“ldd” 명령을 사용하여 어떤 공유 라이브러리가 의존하는 지 확인할 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc68.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="systemcloud" />
      

      
        <summary type="html">Environment Variables</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">1차 세미나</title>
      <link href="https://lee989898.github.io/ad" rel="alternate" type="text/html" title="1차 세미나" />
      <published>2022-04-09T01:06:00+09:00</published>
      <updated>2022-04-09T01:06:00+09:00</updated>
      <id>https://lee989898.github.io/ad</id>
      <content type="html" xml:base="https://lee989898.github.io/ad">&lt;h2 id=&quot;1차-세미나&quot;&gt;&lt;strong&gt;1차 세미나&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;android-studio&quot;&gt;&lt;strong&gt;Android Studio&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Androidmanifest.xml: 앱에 대한 기본 정보를 정의&lt;/li&gt;
  &lt;li&gt;java: 프로젝트의 코드가 들어감&lt;/li&gt;
  &lt;li&gt;res: 안드로이드 각종 자료(이미지, 레이아웃, 문자열 등)을 모아 관리하는 곳&lt;/li&gt;
  &lt;li&gt;Gradle Scripts: 안드로이드 프로젝트 빌드 방법을 정의하는 곳&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;minSdk란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;애플리케이션이 실행하는데 필요한 최소 API 레벨&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;성능을 향상시키는 여러가지 획기적인 기술도입이 있었던 버전21(롤리팝)&lt;/li&gt;
  &lt;li&gt;런타임 퍼미션을 사용하는 버전 23(마시멜로)&lt;/li&gt;
  &lt;li&gt;개인적으로 개발하는 어플이라면 버전26(오레오) (API 26 이전의 백그라운드 실행방식을 고려하지 않아도 되는 장점이 있음!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\ad\ad01.png&quot; alt=&quot;안드로이드&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;__view--viewgroup&quot;&gt;__View &amp;amp; ViewGroup&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;ViewGroup: Layout. 뷰 그룹은 뷰를 담는 그릇&lt;/li&gt;
  &lt;li&gt;View: Widget, 사용자 눈에 보이는 화면의 모든 구성요소(Ex)  TextView, Button, EditText)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\ad\ad02.png&quot; alt=&quot;안드로이드&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ViewGroup도 View를 상속받아 만든 class이다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\ad\ad03.png&quot; alt=&quot;안드로이드&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;xml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;xml의 아이템은 이름과 속성을 가진다&lt;/li&gt;
  &lt;li&gt;xml은 부모 자식 관계가 있다&lt;/li&gt;
  &lt;li&gt;layout_width(View의 너비), layout_hegiht(View의 높이)
    &lt;ul&gt;
      &lt;li&gt;match_parent: View의 크기를 부모뷰의 크기만큼 설정&lt;/li&gt;
      &lt;li&gt;wrap_content: View의 크기를 Content 크기만큼 설정&lt;/li&gt;
      &lt;li&gt;정수 dp: 정수만큼의 고정적인 크기를 Content 크기만큼 설정&lt;/li&gt;
      &lt;li&gt;0dp: margin값을 제외한 영역 전체 크기를 차지(match_constraint)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;margin: 해당 뷰를 기준으로 다른 뷰로부터 어느정도 떨어질 것인가?&lt;/li&gt;
  &lt;li&gt;padding: 해당 뷰 내부 Content로부터 얼마나 떨어질 것인가?&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;constraint-layout&quot;&gt;&lt;strong&gt;Constraint Layout&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;상대적인 제약을 통해 View/ViewGroup을 배치한다&lt;/li&gt;
  &lt;li&gt;Widget의 가로/세로 모두가 제약에 걸려야 한다&lt;/li&gt;
  &lt;li&gt;RelativeLayout에서 확장된 Layout입니다&lt;/li&gt;
  &lt;li&gt;bias: 한쪽으로 치우치게 하기&lt;/li&gt;
  &lt;li&gt;만약 왼쪽 12dp 마진을 제외하고 나머지 오른쪽 빈 공간을 꽉 채우고 싶다면 -&amp;gt; layout_width=0dp(=match_constraint) (match_parent와 다르다)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;__activity와-viewbinding&quot;&gt;__Activity와 ViewBinding&lt;/h3&gt;

&lt;p&gt;UI를 그리는 XML + 각 View의 기능과 동작방식을 정의한 코드 = 어플리케이션&lt;/p&gt;

&lt;p&gt;View의 기능과 동작을 정의하는 코드를 Activity 클래스에 작성한다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Activity란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;사용자 인터페이스 화면을 구성하는 컴포넌트&lt;/li&gt;
  &lt;li&gt;앱의 상태변화가 일어날 때마다 생명 주기의 특정 단계에 해당하는 특정 콜백 메서드를 호출함&lt;/li&gt;
  &lt;li&gt;xml로 작성된 UI를 그리는 창을 제공함&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;생명주기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\ad\ad04.png&quot; alt=&quot;안드로이드&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;생명주기: 컴포넌트가 메모리에 들어가서 소멸되기까지의 과정&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;액티비티 실행전: onCreate() -&amp;gt; onStart() -&amp;gt; onResume()&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;액티비티 종료전: onPause() -&amp;gt; onStop -&amp;gt; onDestroy()&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;onCreate(): Activity의 EntryPoint
    &lt;ul&gt;
      &lt;li&gt;onCreate의 경우 반드시 구현되어야 하는 부분으로, Activity를 만들때 단 한번 만 하는 작업을 이곳에서 많이 해준다. 따라서 뷰 초기화나, 리스너 설정 등등을 이 부분에서 하게 되고, 자연스럽게 많은 코드가 onCreate에 작성되곤 한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;onStart(): 화면이 사용자에게 보여질 떄 호출된다&lt;/li&gt;
  &lt;li&gt;onResume(): 화면이 사용자와 상호작용하는 시점에 호출된다&lt;/li&gt;
  &lt;li&gt;onPause(): 팝업이나 다이얼로그로 인해 화면의 일부가 가려졌을 떄 호출된다&lt;/li&gt;
  &lt;li&gt;onStop(): 화면 전환등으로 Activity가 더이상 사용자에게 보여지지 않을 떄 호출된다&lt;/li&gt;
  &lt;li&gt;onDestroy(): Activity가 사용자나 시스템에 의해 완전히 종료될 떄 호출된다&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;SetContentView()란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;레이아웃 xml의 내용을 파싱하여 뷰를 생성하고, 뷰에 정의된 속성을 설정하는 함수&lt;/li&gt;
  &lt;li&gt;우리가 만든 xml의 View를 참조하기 위해선 레이아웃 xml을 메모리에 객체화 시켜야 한다&lt;/li&gt;
  &lt;li&gt;안드로이드에서는 setContentView()라는 함수를 통해 xml을 객체화 시킨다&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;ViewBinding이란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;findViewById()라는 함수는 상당히 무겁다 또한 null값에 상대적으로 안전하지 않다 -&amp;gt; ViewBinding&lt;/li&gt;
  &lt;li&gt;각 XML 레이아웃 파일마다 Binding 클래스(Binding 클래스의 객체에는 상응하는 레이아웃파일의 ID가 있는 모든 뷰의 직접 참조가 포함된다)를 생성하는 기능 (또 ID가 없는 뷰의 경우 참조가 생기지 않아 안전하다)&lt;/li&gt;
  &lt;li&gt;사용하려면 build.gradle module에 아래 코드를 추가해야한다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\ad\ad05.png&quot; alt=&quot;안드로이드&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ViewBinding 사용하기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\ad\ad06.png&quot; alt=&quot;안드로이드&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;intent를-통한-화면전환&quot;&gt;&lt;strong&gt;Intent를 통한 화면전환&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;화면(Activity)의 전환을 담당하는 메시징 객체 Intent&lt;/li&gt;
  &lt;li&gt;startActivity()에 생성한 Intent 객체를 파리미터 값으로 넣어 호출 (Intent(context, 호출할 액티비티::class.java))&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="android" />
      

      
        <summary type="html">1차 세미나</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Set-UID Privileged Programs</title>
      <link href="https://lee989898.github.io/sc2-04" rel="alternate" type="text/html" title="Set-UID Privileged Programs" />
      <published>2022-04-06T01:06:00+09:00</published>
      <updated>2022-04-06T01:06:00+09:00</updated>
      <id>https://lee989898.github.io/sc2-04</id>
      <content type="html" xml:base="https://lee989898.github.io/sc2-04">&lt;h2 id=&quot;set-uid-privileged-programs&quot;&gt;&lt;strong&gt;Set-UID Privileged Programs&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;권한 있는 프로그램의 필요성&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;비밀번호 딜레마
    &lt;ul&gt;
      &lt;li&gt;/etc/shadow 파일의 권한: &lt;img src=&quot;\assets\built\images\sc2\sc40.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;일반 사용자는 비밀번호를 어떻게 변경할까? &lt;img src=&quot;\assets\built\images\sc2\sc41.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Two-Tier 접근&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;세분화된 액세스 구현 운영 체제의 제어가 OS를 만든다 -&amp;gt; 너무 복잡하다&lt;/li&gt;
  &lt;li&gt;OS는 extension에 의존하여 세분화된 액세스 제어한다&lt;/li&gt;
  &lt;li&gt;권한 있는 프로그램은 그러한 extension이다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc42.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Privileged 프로그램의 종류&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Daemons
    &lt;ul&gt;
      &lt;li&gt;백그라운드에서 실행되는 컴퓨터 프로그램&lt;/li&gt;
      &lt;li&gt;루트 또는 기타 권한이 있는 사용자로 실행해야 한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Set-UID Programs
    &lt;ul&gt;
      &lt;li&gt;UNIX 시스템에서 널리 사용&lt;/li&gt;
      &lt;li&gt;특수 비트로 표시된 프로그램&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;슈퍼맨 이야기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Power Suit
    &lt;ul&gt;
      &lt;li&gt;슈퍼피플: 그들에게 직접 힘을 준다&lt;/li&gt;
      &lt;li&gt;이슈: 나쁜 슈퍼피플&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Power Suit 2.0
    &lt;ul&gt;
      &lt;li&gt;컴퓨터 칩&lt;/li&gt;
      &lt;li&gt;특정 작업&lt;/li&gt;
      &lt;li&gt;사전 프로그래밍된 작업에서 벗어날 방법 없음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Set-UID 매커니즘 : 파워 슈트 메커니즘 리눅스 OS에서 구현&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Set-UID Concept&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;사용자가 프로그램 소유자의 권한으로 프로그램을 실행할 수 있도록 허용한다&lt;/li&gt;
  &lt;li&gt;사용자가 일시적으로 상승된 권한으로 프로그램을 실행할 수 있도록 허용&lt;/li&gt;
  &lt;li&gt;Example: the passwd program&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwd&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rwsr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;41284&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2012&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;모든 프로세스에는 두 개의 사용자 ID가 있다&lt;/li&gt;
  &lt;li&gt;Real UID (RUID): 프로세스의 실제 소유자 식별&lt;/li&gt;
  &lt;li&gt;Effective UID (EUID): 프로세스의 권한을 식별
    &lt;ul&gt;
      &lt;li&gt;액세스 제어는 EUD를 기반으로 한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;일반 프로그램이 실행될 때 RUID = EUID,프로그램을 실행하는 사용자의 ID로 둘 다 동일하다&lt;/li&gt;
  &lt;li&gt;Set-UID가 실행되면 RUID ≠ EUID. RUID는 여전히 같다. 사용자 ID이지만 EUID는 프로그램 소유자 ID와 동일하다
    &lt;ul&gt;
      &lt;li&gt;프로그램이 root에 의해 소유된 경우 프로그램은 root 권한으로 실행된다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;프로그램을 Set-UID로 전환&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;소유자 변경 -&amp;gt; root에 대한 파일로 &lt;img src=&quot;\assets\built\images\sc2\sc43.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;활성화하기 전에 Set-UID 비트 &lt;img src=&quot;\assets\built\images\sc2\sc44.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;활성화 후 Set-UID 비트 &lt;img src=&quot;\assets\built\images\sc2\sc45.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;작동 원리&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Set-UID 프로그램은 Set-UID 비트라고 하는 단일 비트인 특수 마킹을 제외하고는 다른 프로그램과 같다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc46.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;
&lt;img src=&quot;\assets\built\images\sc2\sc47.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;UID 설정 예&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;privileged program 아님&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc48.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;p&gt;privileged program 임&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc49.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;p&gt;privileged program 이지만 root privilege는 아님&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc50.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Set-UID는 어떻게 안전한가?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;일반 사용자가 권한을 에스컬레이션할 수 있다
    &lt;ul&gt;
      &lt;li&gt;권한을 직접 부여하는 것과는 다르다(sudo 명령)&lt;/li&gt;
      &lt;li&gt;제한된 행동 – 슈퍼맨이 디자인한 컴퓨터 칩과 유사&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;모든 프로그램을 Set-UID로 전환하는 것은 안전하지 않다
    &lt;ul&gt;
      &lt;li&gt;예: /bin/sh&lt;/li&gt;
      &lt;li&gt;예: vi&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;슈퍼맨에 대한 공격&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;사용자가 코딩된 작업만 수행할 수 있다고 가정할 수 없음
    &lt;ul&gt;
      &lt;li&gt;개발자의 코딩 결함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;슈퍼맨 말로이
    &lt;ul&gt;
      &lt;li&gt;북쪽으로 비행한 다음 좌회전&lt;/li&gt;
      &lt;li&gt;이 코드를 어떻게 악용하는가?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;슈퍼맨 말로리
    &lt;ul&gt;
      &lt;li&gt;북쪽으로 날아 서쪽으로 회전&lt;/li&gt;
      &lt;li&gt;이 코드를 어떻게 악용하는가?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc51.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Set-UID 프로그램의 표면 공격&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc52.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;사용자 Input을 통한 공격&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;사용자 Input: 명시적 입력&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;버퍼 오버 플로우
    &lt;ul&gt;
      &lt;li&gt;악성코드 실행을 위한 버퍼 오버플로우&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;형식 문자열 취약점
    &lt;ul&gt;
      &lt;li&gt;사용자 입력을 형식 문자열로 사용하여 프로그램 동작 변경&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CHSH – 쉘 변경
    &lt;ul&gt;
      &lt;li&gt;기본 셸 프로그램을 변경할 수 있는 Set-UID 프로그램&lt;/li&gt;
      &lt;li&gt;쉘 프로그램은 /etc/passwd 파일에 저장된다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;문제
    &lt;ul&gt;
      &lt;li&gt;사용자 입력 삭제 실패&lt;/li&gt;
      &lt;li&gt;공격자가 새 루트 계정을 만들 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;공격
&lt;img src=&quot;\assets\built\images\sc2\sc53.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;시스템 Input을 통한 공격&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;경쟁 조건
    &lt;ul&gt;
      &lt;li&gt;권한이 없는 파일에서 권한 있는 파일에 대한 심볼릭 링크&lt;/li&gt;
      &lt;li&gt;인플루언서 프로그램&lt;/li&gt;
      &lt;li&gt;world writable 폴더 내부에 쓰기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;환경변수를 통한 공격&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;동작은 내부에 표시되지 않는 입력의 영향을 받을 수 있다&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;환경 변수 : 사용자가 실행하기 전에 설정할 수 있다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;PATH 환경 변수
    &lt;ul&gt;
      &lt;li&gt;사용자가 명령의 전체 경로 제공하지 않은 경우 쉘 프로그램에서 명령을 찾는 데 사용한다&lt;/li&gt;
      &lt;li&gt;system(): /bin/sh를 먼저 호출한다&lt;/li&gt;
      &lt;li&gt;system(“ls”)
        &lt;ul&gt;
          &lt;li&gt;/bin/sh는 PATH 환경 변수를 사용하여 “ls”를 찾는다&lt;/li&gt;
          &lt;li&gt;공격자는 PATH 변수를 조작하고 “ls” 명령을 찾는 방법을 제어할 수 있다&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Capability Leaking&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;몇몇 경우에 권한 있는 프로그램은 실행중에 스스로 다운그레이드 한다&lt;/li&gt;
  &lt;li&gt;예: su 프로그램
    &lt;ul&gt;
      &lt;li&gt;권한이 있는 Set-UID 프로그램이다&lt;/li&gt;
      &lt;li&gt;한 사용자가 다른 사용자로 전환할 수 있다(예: user1에서 user2로)&lt;/li&gt;
      &lt;li&gt;프로그램은 루트로 EUID를, user1로 RUID로 시작한다&lt;/li&gt;
      &lt;li&gt;비밀번호 확인 후, EUID와 RUID는 모두 user2가 됩니다(권한을 통해 다운그레이드)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이러한 프로그램은 기능 누출로 이어질 수 있다
    &lt;ul&gt;
      &lt;li&gt;프로그램은 다운그레이드하기 전에 권한 있는 기능을 정리하지 못할 수 있다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Capability Leaking을 통한 공격: 예&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;sudo chown root ./prog
sudo chmod 4755 ./prog&lt;/p&gt;

&lt;p&gt;운영체제에서 실행 중인 프로세스에대해서 접근제어를 적용할대는 EUID를 기준으로 이 프로세스가 현쟈 하고자 하는 오퍼레이션을 허용할지 말지를 결정한다&lt;br /&gt;
EUID를 기준으로 시스템의 접근제어가 이루어진다&lt;/p&gt;

&lt;p&gt;set-uid를 통해 공격이 들어오기 때문에 Set-UID 비트를 해제한다. 공격의 예로는 시스템 인풋, 유저 인풋, 환경 변수가 있다&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="systemcloud" />
      

      
        <summary type="html">Set-UID Privileged Programs</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Bitcoin, white paper</title>
      <link href="https://lee989898.github.io/bc-02" rel="alternate" type="text/html" title="Bitcoin, white paper" />
      <published>2022-03-29T01:06:00+09:00</published>
      <updated>2022-03-29T01:06:00+09:00</updated>
      <id>https://lee989898.github.io/bc-02</id>
      <content type="html" xml:base="https://lee989898.github.io/bc-02">&lt;h2 id=&quot;introduction&quot;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Introduction&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;TTP 기반 금융시스템의 한계
    &lt;ul&gt;
      &lt;li&gt;non-reversible 거래는 불가&lt;/li&gt;
      &lt;li&gt;mediation 비용은 거래 비용을 증가 시킴&lt;/li&gt;
      &lt;li&gt;TTP 없이 통신을 통한 결제 수단 없음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;새로운 전자결제시스템이 필요
    &lt;ul&gt;
      &lt;li&gt;신뢰가 아닌 암호화 증명 기반&lt;/li&gt;
      &lt;li&gt;사실상 계산할 수 없는 되돌릴 수 없는 트랜잭션&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이중 지출 문제 해결
    &lt;ul&gt;
      &lt;li&gt;P2P 분산 타임스탬프 서버는 트랜잭션의 만성적 순서를 계산적으로 증명한다&lt;/li&gt;
      &lt;li&gt;정직한 노드 만큼 보안성이 높다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Transactions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\bc\bc18.png&quot; alt=&quot;블록체인&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Coin = 일련의 디지털 서명&lt;/li&gt;
  &lt;li&gt;T ${x_i}$ : A는 B에게 코인을 전송한다
    &lt;ul&gt;
      &lt;li&gt;
        &lt;table&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td&gt;Coin += $Pub_B$, H ( T $x_{i-1}$&lt;/td&gt;
              &lt;td&gt;$Pub_B$ ), $Sign_A$ H ( T $x_{i-1}$&lt;/td&gt;
              &lt;td&gt;$Pub_B$ )&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;One can
    &lt;ul&gt;
      &lt;li&gt;$Tx_i^,$ 지출이 $Tx_{i-1}^,$’s 수신자 인지 확인&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;One cannot
    &lt;ul&gt;
      &lt;li&gt;$Tx_{i-1}^,$’s 수신자가 한번만 지출한지 확인&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Double Spending&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;TTP (mint) model
    &lt;ul&gt;
      &lt;li&gt;TTP는 이중 지출에 대한 모든 거래를 확인해야 한다&lt;/li&gt;
      &lt;li&gt;TTP는 새로운 코인을 발행하고 TTP에서 발행한 코인만 신뢰할 수 있다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Distributed way
    &lt;ul&gt;
      &lt;li&gt;Payee는 지급인이 처음르로 트랜잭션에 서명했는지 확인한다&lt;/li&gt;
      &lt;li&gt;Payee는 모든 거래를 알아야 하므로 알려져야 한다&lt;/li&gt;
      &lt;li&gt;모든 참여자는 거래의 단일 주문 기록에 동의해야 한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Timestamp Server&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;타임스탬프 서버 게시
    &lt;ul&gt;
      &lt;li&gt;Ht = 해쉬(H-1, Blockt)&lt;/li&gt;
      &lt;li&gt;Blockt = 시간 t에 존재했던 항목 집합&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;신문이나 게시판에 게시
    &lt;ul&gt;
      &lt;li&gt;à 중앙 집중식 타임스탬프 서버 = TTP ?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\bc\bc17.png&quot; alt=&quot;블록체인&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Proof of Work&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;목표: 분산 타임스탬프 서버&lt;/li&gt;
  &lt;li&gt;Proof-of-work
    &lt;ul&gt;
      &lt;li&gt;0비트 시작 값으로 해시되는 값 찾기
        &lt;ul&gt;
          &lt;li&gt;시작 0비트 수만큼 기하급수적으로 어렵다&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;하나의 해싱으로 확인됨&lt;/li&gt;
      &lt;li&gt;해시캐시&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;비트코인 PoW
    &lt;ul&gt;
      &lt;li&gt;Nonce 찾기
        &lt;ul&gt;
          &lt;li&gt;H(Blockt) = {0}n{0,1}*
            &lt;ul&gt;
              &lt;li&gt;
                &lt;table&gt;
                  &lt;tbody&gt;
                    &lt;tr&gt;
                      &lt;td&gt;where Blockt := H(Blockt-1)&lt;/td&gt;
                      &lt;td&gt;Tx’s&lt;/td&gt;
                      &lt;td&gt;Nonce&lt;/td&gt;
                    &lt;/tr&gt;
                  &lt;/tbody&gt;
                &lt;/table&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;비트코인 PoW 해결
    &lt;ul&gt;
      &lt;li&gt;Block&amp;gt;=t에 대한 PoW를 다시 실행하지 않고 블록을 변경할 수 없다&lt;/li&gt;
      &lt;li&gt;CPU 과반수 의사 결정당 투표 구현
        &lt;ul&gt;
          &lt;li&gt;Longest chain wins&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;이동 목표: 시간당 평균 블록 수 = 6을 유지하기 위해 n 증가&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;해시캐쉬&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Cynthia Dwork이 제안함&lt;/li&gt;
  &lt;li&gt;Adam Back이 해시캐쉬 제안&lt;/li&gt;
  &lt;li&gt;이메일을 보내면 PoW 비용이 발생한다
    &lt;ul&gt;
      &lt;li&gt;&amp;lt; counter &amp;gt; 찾기
        &lt;ul&gt;
          &lt;li&gt;SHA-1(1:20:&amp;lt; time &amp;gt;:&amp;lt; recipient &amp;gt;:&amp;lt; rand &amp;gt;:&amp;lt; counter &amp;gt;)= ${10}^{(20)}$ ${0,1}^{140}$&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;약 1초 걸린다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;수신자는 다음 경우에만 이메일을 수락한다
    &lt;ul&gt;
      &lt;li&gt;&amp;lt; time &amp;gt;은 최근(2일), &amp;lt; recipient &amp;gt;는 맞을때&lt;/li&gt;
      &lt;li&gt;유효한 PoW&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이것은 스팸 발송자를 방지한다&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;네트워크&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;새로운 트랜잭션은 모든 노드에 브로드캐스트된다&lt;/li&gt;
  &lt;li&gt;각 노드는 새로운 트랜잭션을 블록으로 수집한다&lt;/li&gt;
  &lt;li&gt;각 노드는 각각의 블록에서 어려운 proof-of-work을 찾기 위해 노력합니다.&lt;/li&gt;
  &lt;li&gt;노드가 proof-of-work를 찾으면 모든 노드들에 브로드캐스트 한다&lt;/li&gt;
  &lt;li&gt;노드는 모든 트랜잭션이 다음과 같은 경우에만 블록을 수락한다. 유효하며 아직 사용하지 않았을 때&lt;/li&gt;
  &lt;li&gt;노드는 다음 블록을 체인에 만들며 받아들인 블록의 이전 해쉬 값을 이용하며 블록을 허용한다&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;인센티브&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;노드는 인센티브를 얻을 수 있다
    &lt;ul&gt;
      &lt;li&gt;블록의 첫 번째 트랜잭션은 블록의 새 코인을 시작한다&lt;/li&gt;
      &lt;li&gt;거래 수수료 = input – output의 트랜잭션&lt;/li&gt;
      &lt;li&gt;충분한 비트코인이 만들어 졌으면 트랜잭션 수수료만이 인센티브이다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인센티브는 공격자들이 공격하지 않고 참여하게 장려한다
    &lt;ul&gt;
      &lt;li&gt;시스템을 훼손하는 것보다 수익성이 높기 때문이다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Reclaiming Disk Space&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;블록 체인이 늘어나면 디스크를 소진할 수 있다&lt;/li&gt;
  &lt;li&gt;충분한 블록에 묻힌 오래된 거래는 폐기될 수 있다
    &lt;ul&gt;
      &lt;li&gt;그러나 블록의 해시를 변경하여 대량의 복잡함이 생긴다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Merkle Tree를 사용하여 일련의 트랜잭션 해시
    &lt;ul&gt;
      &lt;li&gt;트랜잭션 세트(예: 분기)는 영향을 주지 않고 정리할 수 있다. 트리의 루트 해시&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\bc\bc19.png&quot; alt=&quot;블록체인&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Simplified Payment Verification&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;노드(광부)는 이중 지출에 대한 지불을 확인할 수 있다
    &lt;ul&gt;
      &lt;li&gt;가장 긴 체인의 모든 블록과 트랜잭션을 가지고 있기 때문에&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사용자(채굴자가 아님)는 다음을 통해 간소화된 검증을 수행할 수 있다
    &lt;ul&gt;
      &lt;li&gt;가장 긴 체인의 블록 헤더만 유지&lt;/li&gt;
      &lt;li&gt;트랜잭션의 MTree 브랜치를 확인하기 위해 가져온다&lt;/li&gt;
      &lt;li&gt;트랜잭션이 MTree와 일치하는지 확인&lt;/li&gt;
      &lt;li&gt;블록 생성자가 트랜잭션을 확인했으며 블록이 가장 긴 사슬에서 받아들여진다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\bc\bc20.png&quot; alt=&quot;블록체인&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Combining and Splitting Value&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;값 결합/분할을 허용하려면
    &lt;ul&gt;
      &lt;li&gt;트랜잭션에 여러 입력/출력이 포함됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;최대 2개 출력
    &lt;ul&gt;
      &lt;li&gt;결제 1개&lt;/li&gt;
      &lt;li&gt;보낸 사람에게 다시 한 번&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Privacy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;TTP 모델은 액세스 제어를 통해 개인 정보를 보호한다&lt;/li&gt;
  &lt;li&gt;Bitcoin 개인 정보는 다음으로 보호된다
    &lt;ul&gt;
      &lt;li&gt;거래당 생성된 공개 키의 익명성&lt;/li&gt;
      &lt;li&gt;모든 거래가 공개적으로 발표되었음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;그러나 일부 거래간 연계는 불가피
    &lt;ul&gt;
      &lt;li&gt;트랜잭션당 다중 입력을 사용할 때&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\bc\bc21.png&quot; alt=&quot;블록체인&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Probability&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Why probability?
    &lt;ul&gt;
      &lt;li&gt;블록체인 proof-of-work은 확률을 기반으로 한다&lt;/li&gt;
      &lt;li&gt;따라서 블록체인 보안은 확률에 기반한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이중 지출 공격 성공 확률은?&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="blockchain" />
      

      
        <summary type="html">Introduction</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">리눅스 사용자 계정과 권한 체계, 쉘 기본</title>
      <link href="https://lee989898.github.io/sc2-03" rel="alternate" type="text/html" title="리눅스 사용자 계정과 권한 체계, 쉘 기본" />
      <published>2022-03-21T01:06:00+09:00</published>
      <updated>2022-03-21T01:06:00+09:00</updated>
      <id>https://lee989898.github.io/sc2-03</id>
      <content type="html" xml:base="https://lee989898.github.io/sc2-03">&lt;h2 id=&quot;리눅스-사용자-계정과-권한-체계-쉘-기본&quot;&gt;&lt;strong&gt;리눅스: 사용자 계정과 권한 체계, 쉘 기본&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;리눅스유닉스-파일-시스템&quot;&gt;&lt;strong&gt;리눅스/유닉스 파일 시스템&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;리눅스/유닉스 파일 시스템은 디렉토리와 파일로 구성&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;디렉토리&lt;/th&gt;
      &lt;th&gt;내용&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;/&lt;/td&gt;
      &lt;td&gt;파일 시스템 트리 구조의 최상위 디렉토리이다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/etc&lt;/td&gt;
      &lt;td&gt;시스템의 환경 설정 및 주요 설정 파일을 담고있다 (passwd, shadow 등)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;dev&lt;/td&gt;
      &lt;td&gt;프린터 같은 물리적인 장치를 다루기 위한 특수 파일을 담고있다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/usr/bin&lt;/td&gt;
      &lt;td&gt;쉘 명령어 실행 파일 등 기본적으로 실행 가능한 파일을 담고 있다 (ls, mv, cp, pwd 등)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/usr/include&lt;/td&gt;
      &lt;td&gt;주요 라이브러리 헤더파일이 저장되는 디렉토리이다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/usr/lib&lt;/td&gt;
      &lt;td&gt;라이브러리에 대한 shared object 파일(.so)이 저장되는 디렉토리&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/usr/sbin&lt;/td&gt;
      &lt;td&gt;시스템 관리 명령어가 저장되는 디렉터리&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/home&lt;/td&gt;
      &lt;td&gt;사용자 홈 디렉터리가 저장되는 디렉터리&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tmp&lt;/td&gt;
      &lt;td&gt;프로그램 실행 및 설치 시 생성되는 임시 파일을 담고있다. 이 디렉터리에 파일을 저장하면 재부팅 시 임의로 삭제될 수 있다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/var&lt;/td&gt;
      &lt;td&gt;시스템 로그가 저장되는 디렉터리이다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/proc&lt;/td&gt;
      &lt;td&gt;실행중인 프로세스 정보를 담고 있는 파일들이 저장됨. 실행 중인 각 프로세스 id마다 파일이 존재&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;리눅스유닉스의-계정과-권한-체계&quot;&gt;&lt;strong&gt;리눅스/유닉스의 계정과 권한 체계&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;로그인: 아이디와 패스워드 입력을 통해 자신이 누군지 밝히고, 그에 따른 권한을 부여 받아 시스템 사용을 허가 받는 과정&lt;/li&gt;
  &lt;li&gt;리눅스 시스템의 계정과 권한 체계: root라고 불리는 관리자와 일반 사용자 계정으로 구분. 모든 계정 정보가 /etc/passwd 파일에 저장됨&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;vi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc3.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;/etc/passwd 파일&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc4.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;사용자 계정명&lt;/li&gt;
  &lt;li&gt;패스워드가 암호화되어 /etc/shadow 파일에 저장되어 있음을 나타냄&lt;/li&gt;
  &lt;li&gt;사용자 번호(UID, User ID)&lt;/li&gt;
  &lt;li&gt;그룹 번호(GID, Group ID)&lt;/li&gt;
  &lt;li&gt;사용자의 이름이다&lt;/li&gt;
  &lt;li&gt;사용자의 홈 디렉터리 나타냄
    &lt;ul&gt;
      &lt;li&gt;관리자의 홈 디렉터리는 /root이다&lt;/li&gt;
      &lt;li&gt;일반 사용자의 홈 디렉터리는 /hoom/seed 같이 /home 디렉터리 하위에 위치한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사용자 계정 로그인 쉘을 지정. 기본 설정은 /bin/bash 쉘&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;리눅스에서 관리자는 UID를 0번으로 부여받고 일반 사용자는 그 외의 번호를 부여 받는데 보통 500번 또는 1000번 이상을 부여 받는다&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;/etc/shadow 파일&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;각 사용자 계정의 패스워드가 암호화 된 상태로 저장되어 있음&lt;/li&gt;
  &lt;li&gt;사용자 계정 seed에 대한 정보 예&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc5.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;주요 필드&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;사용자 계정명&lt;/td&gt;
      &lt;td&gt;첫번째 필드는 사용자 계정명을 나타냄&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;암호화된 패스워드&lt;/td&gt;
      &lt;td&gt;두번째 필드는 암호화된 패스워드를 나타냄. $로 아래와 같이 추가 구분 &amp;lt;/br&amp;gt; $algoritihm_id$salt$hash_value_of_password &amp;lt;/br&amp;gt; &amp;gt; algorithm_id: 패스워드 해쉬값 계산에 사용된 암호학적 해쉬 함수 종류를 나타냄(MD5, BlowFish, SHA-256, SHA-512 등) &amp;lt;/br&amp;gt; &amp;gt; salt 패스워드 해쉬값 계산에 사용된 랜덤값 &amp;lt;/br&amp;gt; hash_value_of_password: 사용자 패스워드 및 salt를 입력으로 해쉬 함수를 통해 계산된 값 &amp;lt;/br&amp;gt; 패스워드 필드에 *, ! 등이 설정될 수도 있음 &amp;lt;/br&amp;gt; *: 패스워드가 잠긴 상태로 일반적인 방식의 로그인은 불가하지만 별도의 인증 방식을 사용하여 로그인을 하루 수는 있음 &amp;lt;/br&amp;gt; !: 패스워드가 잠긴 상태로 일반적인 방식의 로그인은 불가함. 또는 사용자 계정을 생성하고 패스워드를 설정하지 않은 상태이기도 함&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;마지막 변경&lt;/td&gt;
      &lt;td&gt;마지막으로 패스워드를 변경한 날을 1970년 1월1일 기준으로 일수로 표시함. 위 예에서는 마지막으로 패스워드를 변경한 날은 1970년 1월1일 이후 18950일이 지났음을 의미&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;패스워드 최소 사용기간&lt;/td&gt;
      &lt;td&gt;패스워드를 변경한 이후 최소 이 정도의 기간은 사용해야함을 의미&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;패스워드 최대 사용기간&lt;/td&gt;
      &lt;td&gt;패스워드를 변경한 이후 만료되는 일수를 나타냄. 보안을 위해 주기적으로 패스워드 변경이 필요한 경우 활용&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;경고&lt;/td&gt;
      &lt;td&gt;패스워드 만료일 몇일 전에 경고 알림할건지를 설정&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;비활성화&lt;/td&gt;
      &lt;td&gt;패스워드가 만료된 이후에 계정이 잠기기 전까지 비활성 일수를 나타냄. 해당 비활성 기간 동안 패스워드를 변경해야 계정이 잠기지 않음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;만료일&lt;/td&gt;
      &lt;td&gt;계정이 만료되는 날짜를 1970년 1월1일 기준으로 일수로 표시&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;패스워드 해쉬값 계산 과정&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc36.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;사용자 로그인 시 패스워드 검증 과정(/etc/shadow 파일에서 사용자 패스워드 해쉬값, 해쉬 함수 ID, salt 값을 읽어 온다)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc37.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;만약 salt 없이 패스워드만을 입력으로 해쉬값을 계산한다면?
    &lt;ul&gt;
      &lt;li&gt;패스워드가 동일하면 그 해쉬값도 동일하다&lt;/li&gt;
      &lt;li&gt;공격자는 shadow 파일에 해쉬값들을 비교하는 것만으로 동일한 패스워드가 사용된 사용자 계정을 알아낼 수 있다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;패스워드 크래킹 공격 비용을 높이는 효과
    &lt;ul&gt;
      &lt;li&gt;레인보우 테이블을 이용한 패스워드 크래킹 공격: 일반적으로 많이 사용되는 패턴의 패스워드에 대한 해쉬값을 미리 계산해두는 방식&lt;/li&gt;
      &lt;li&gt;만약 salt가 사용되지 않는다면 공격자는 모든 고려 대상 패스워드 각각에 대한 해쉬값을 게산하면 됨&lt;/li&gt;
      &lt;li&gt;salt가 사용되면 모든 고려 대상 패스워드 및 모든 가능한 salt 값에 대해 미리 해쉬값을 계산해두어야 함 -&amp;gt; 공격 비용이 훨씬 높아짐&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;al&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc38.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc39.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;파일 속성&lt;/th&gt;
      &lt;th&gt;파일 소유자&lt;/th&gt;
      &lt;th&gt;권한 그룹 권한&lt;/th&gt;
      &lt;th&gt;일반(Others)권한&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;d&lt;/td&gt;
      &lt;td&gt;rwx&lt;/td&gt;
      &lt;td&gt;r-x&lt;/td&gt;
      &lt;td&gt;r-x&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;문자&lt;/th&gt;
      &lt;th&gt;파일 속성&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;d&lt;/td&gt;
      &lt;td&gt;디렉터리 파일(Dirctory File)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;일반 정규 파일(Regular File)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;l&lt;/td&gt;
      &lt;td&gt;링크되어 있는 파일(Symbolic Link File)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;c&lt;/td&gt;
      &lt;td&gt;버퍼에 저장되지 않은 특수 파일(Character File)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;b&lt;/td&gt;
      &lt;td&gt;버퍼링된 특수 파일(Block File)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;s&lt;/td&gt;
      &lt;td&gt;소켓 기능을 하는 파일(Socket File)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;p&lt;/td&gt;
      &lt;td&gt;파이프 기능을 수행하는 파일(Pipe File)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;파일의 소유자에게 허용되는 권한
    &lt;ul&gt;
      &lt;li&gt;rwx는 파일의 소유자에 대한 접근 권한&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;파일 소유자와 같은 그룹에 속한 사용자에게 허용되는 권한
    &lt;ul&gt;
      &lt;li&gt;r-x는 그룹에 대한 접근 권한&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;일반(Others) 권한
    &lt;ul&gt;
      &lt;li&gt;r-x는 파일 소유자 및 그룹에 속하지 않는 사용자들(others)에 대한 접근 권한&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;rwx의 r,w,x는 각각 읽기(Read), 쓰기(Write), 실행하기(eXecution)가 해당 사용자에게 허용됨을 의미
    &lt;ul&gt;
      &lt;li&gt;read, write, execution 각각에 대해 허용할지 말지를 3개의 플래그 비트로 표현&lt;/li&gt;
      &lt;li&gt;r: 4(2진수 100)&lt;/li&gt;
      &lt;li&gt;w: 2(2진수 10)&lt;/li&gt;
      &lt;li&gt;x: 1(2진수 1)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;rwx = (2진수 111) = (10진수 7)
    &lt;ul&gt;
      &lt;li&gt;read, write, execution 권한이 모두 허용됨을 의미&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;rwxrwxrwx = (2진수 111111111) = (10진수 777)
    &lt;ul&gt;
      &lt;li&gt;파일의 소유자, 그룹, others 모두에 대해 해당 파일에 대한 읽기, 쓰기, 실행 권한이 허용됨을 의미&lt;/li&gt;
      &lt;li&gt;할 수 있으며, 권한을 777이라고 읽음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;rwxr-x-r-x = (2진수 111101001) = (10진수 755)
    &lt;ul&gt;
      &lt;li&gt;파일 소유자에게 읽기, 쓰기, 실행 권한 모두 허용됨&lt;/li&gt;
      &lt;li&gt;그룹 &amp;amp; others에게는 읽기, 실행 권한만 혀용되며, 쓰기 권한은 허용안됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;rwxr-x–x = (2진수 111101001) = (10진수 751)
    &lt;ul&gt;
      &lt;li&gt;파일 소유자에게는 읽기, 쓰기, 실행 권한 모두 허용됨&lt;/li&gt;
      &lt;li&gt;그룹에게는 읽기, 실행 권한만 허용되며, 쓰기 권한은 허용안됨&lt;/li&gt;
      &lt;li&gt;Others에게는 실행 권한만 허용되며, 읽기, 쓰기는 허용안됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;쉘shell&quot;&gt;&lt;strong&gt;쉘(shell)&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;사용자와 운영체제 간 상호 작용을 위한 command line interface를 제공하는 프로그램&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용자 입력 명령어 처리기(command line interpreter)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;쉘 종류
    &lt;ul&gt;
      &lt;li&gt;Windows PowerShell&lt;/li&gt;
      &lt;li&gt;Linux/Unix sh, csh, bash, ksh etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;쉘(shell): 기본 명령어&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;pwd: print working directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc6.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;cd: change directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc7.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ls: 현재 디렉터리에 속한 파일 및 서브 디렉터리를 나열해서 보여줌
    &lt;ul&gt;
      &lt;li&gt;ls -l: 퍼미션, 소유자, 그룹, 파일크기 등 파일에 대한 자세한 내용을 출력&lt;/li&gt;
      &lt;li&gt;ls -a: 숨겨진 파일이나 디렉터리도 보여줌&lt;/li&gt;
      &lt;li&gt;ls -al 같이 둘 이상의 옵션을 복합적으로 줄 수도 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc8.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mv: “move”의 약자로 파일이나 디렉토리를 원하는 곳으로 옮기거나, 이름을 변경할 떄 사용할 수 있는 명령어&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc9.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;cp: “copy”의 약자로 파일이나 디렉토리를 원하는 곳에 원하는 이름으로 복사하기 위한 명령어&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc10.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;echo: 인수로 주어진 문자열이나 환경변수 값을 출력해주는 명령어&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc11.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;cat: 하나 이상의 파일을 연결해서 출력해주는 명령어&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc12.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;tail: 파일의 마지막 행을 기준으로 지정한 행까지의 파일 내용 일부를 출력해준다. 아무 옵션을 주지 않으면 기본적으로 10개 행을 출력&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc13.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mkdir: “make directory”의 약자로 새로운 디렉토리를 만들 수 있는 명령어&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc14.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;touch &lt;파일명&gt; : 현재 디렉토리에 주어진 &lt;파일명&gt;의 새로운 파일을 생성해주는 명령어&lt;/파일명&gt;&lt;/파일명&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;rm: remove의 약자로 파일과 디렉토리 삭제에 사용되는 명령어&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc15.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;clear: 쉘 창에 있는 기록을 모두 지워주는 명령어&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;chown: 파일이나 디렉토리의 소유권자 및 그룹식별자를 바꾸는 명령어&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc16.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;chmod: “change mode” 약자로 파일이나 디렉토리의 퍼미션을 수정하기 위한 명령어&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc17.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sudo: 일반 사용자가 root 권한을 잠시 빌려 명령을 실행할 수 있도록 하는 명령어이다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc18.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;umask: 파일이나 디렉터리 생성 시 기본 접근권한을 설정할떄 사용하는 명령어
    &lt;ul&gt;
      &lt;li&gt;기본 파일 생성 시 최고 권한이 666이며, 디렉터리의 생성 시 최고 권한은 777이다&lt;/li&gt;
      &lt;li&gt;파일 및 디렉터리 생성 시 기본 권한은 가능한 최고 권한에서 umask 값을 빼준 값이다&lt;/li&gt;
      &lt;li&gt;기본 파일은 660-002=664가, 디렉터리는 777-002=775가 된다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc19.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;id: 현재 실행중인 쉘에 로그인 된 사용자 ID, 그룹 ID 등을 출력해주는 명령어
    &lt;ul&gt;
      &lt;li&gt;일반 사용자 계정으로 로그인한 경우
&lt;img src=&quot;\assets\built\images\sc2\sc20.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;root 사용자로 로그인한 경우
&lt;img src=&quot;\assets\built\images\sc2\sc21.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;grep: 특정 파일 내에서 지정한 패턴을 가진 문자열을 찾은 후, 해당 문자열을 출력해주는 명령어. 패턴에는 정규표현식의 패턴을 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc22.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;find: 파일 시스템에서 인자로 주어진 파일 및 디렉토리를 찾는 명령어
    &lt;ul&gt;
      &lt;li&gt;파일명으로 찾기(-name)
        &lt;ul&gt;
          &lt;li&gt;find . -name “*txt” 현재 디렉터리(모든 하위 디렉터리 포함)에서 확장자가 .txt인 파일 모두 찾음&lt;/li&gt;
          &lt;li&gt;find . -name “*txt” -delete 현재 디렉터리에서 확장자가 .txt인 파일 모두 찾은 다음 삭제&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;타입으로 찾기(-type)
        &lt;ul&gt;
          &lt;li&gt;find . -name “*test” -type d 현재 디렉터리에서 이름에 test가 포함된 모든 디렉터리 찾기&lt;/li&gt;
          &lt;li&gt;find . -type f 현재 디렉터리에서 모든 파일 찾기&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;파일 크기로 찾기(-empth, -size)
        &lt;ul&gt;
          &lt;li&gt;find . -empty 현재 디렉터리에서 빈 디렉터리 또는 크기가 0인 파일 찾ㄱ기&lt;/li&gt;
          &lt;li&gt;find . -size + 1024c 현재 디렉터리에서 1024byte 보다 큰 파일 찾기&lt;/li&gt;
          &lt;li&gt;find . -size + 1k -size -10k 1kb 보다 크고 10kb 보다 작은 파일 찾기&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;man: 명령어를 어떻게 쓰는지 설명해주는 내용을 출력해주는 명령어
    &lt;ul&gt;
      &lt;li&gt;main ls 실행 결과로 보여지는 내용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc23.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Redirection: &amp;gt;, »를 사용해서 주어진 명령 실행 결과로 출력되는 내용이 파일에 쓰여지도록 할 수 있다
    &lt;ul&gt;
      &lt;li&gt;&amp;gt;: overwrite, »: append&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc27.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;Pipeline: 첫번쨰 명령 (&lt;/td&gt;
          &lt;td&gt;기호 왼쪽) 실행 결과가 두번째 명령 (&lt;/td&gt;
          &lt;td&gt;기호 오른쪽)으로 넘겨지도록 한다&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc28.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;심볼릭링크 생성&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;심볼릭링크 생성 명령어&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-ㅊ&quot;&gt;ln -s 우너본 링크파일
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;원본 파일 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc24.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;심볼릭 링크 설정 및 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc25.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;하드링크와 차이&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc26.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;하드 링크 파일의 inode number는 원본과 같다&lt;/li&gt;
  &lt;li&gt;디스크 상에서 근본적으로 같은 파일이라 할 수 있다&lt;/li&gt;
  &lt;li&gt;반면 심볼릭 링크는 디스크 상에서 다른 파일이며, 바로가기 파일이라 할 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;쉘 스크립트&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;파일에 쉘 명령어들을 나열해서 순차적으로 실행되도록 하는 것&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;쉘 스크립트 예시
    &lt;ul&gt;
      &lt;li&gt;#!/bin/sh: 파일에 작성된 내용은 쉘 스크립트라는 것을 시스템에 알려주는 역할
&lt;img src=&quot;\assets\built\images\sc2\sc29.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;아래 두가지 방법 중 하나로 쉘 스크립트 실행
&lt;img src=&quot;\assets\built\images\sc2\sc30.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;
&lt;img src=&quot;\assets\built\images\sc2\sc31.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;read로 입력, echo로 출력&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc32.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;변수 활용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc33.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;특별한 변수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\sc2\sc34.png&quot; alt=&quot;시스템클라우드보안&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;배열&lt;/li&gt;
  &lt;li&gt;조건문: if elif else if, case문&lt;/li&gt;
  &lt;li&gt;반목문: for, while, until&lt;/li&gt;
  &lt;li&gt;함수&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo 명령어&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;다른 사용자 권한, 보통은 root 사용자 권한으로 프로그램을 실행할 수 있도록 하는 명령어이다&lt;/li&gt;
  &lt;li&gt;sudo 명령어를 사용하면 일반 사용자가 root 사용자 자격으로 프로그램을 실행할 수 있기 때문에 보안에 대한 고려가 반드시 필요&lt;/li&gt;
  &lt;li&gt;/etc/sudoers 파일: 어느 사용자/그룹에게 어떤 프로그램 실행에 대해서 sudo 사용을 허용할 것인지에 대한 룰을 설정&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="systemcloud" />
      

      
        <summary type="html">리눅스: 사용자 계정과 권한 체계, 쉘 기본</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">안드로이드 면접 준비</title>
      <link href="https://lee989898.github.io/ad" rel="alternate" type="text/html" title="안드로이드 면접 준비" />
      <published>2022-03-19T01:06:00+09:00</published>
      <updated>2022-03-19T01:06:00+09:00</updated>
      <id>https://lee989898.github.io/ad</id>
      <content type="html" xml:base="https://lee989898.github.io/ad">&lt;h2 id=&quot;안드로이드-면접-준비&quot;&gt;&lt;strong&gt;안드로이드 면접 준비&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;안드로이드-질문&quot;&gt;&lt;strong&gt;안드로이드 질문&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Context 란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Context는 Application의 글로벌 Infomation에 대한 인터페이스다.&lt;br /&gt;
Context를 이용해서 액티비티를 실행시키거나 인텐트를 broadcasting또는 receiving과 같은 어플리케이션 레벨의 명령을 수행 할 수 있다.&lt;br /&gt;
즉 액티비티나 서비스, 여러 컴포넌트들을 시스템과 연결시키는 역할을 한다.&lt;/p&gt;

&lt;p&gt;어플리케이션 환경에 대한 글로벌 정보를 가진 인터페이스&lt;br /&gt;
안드로이드 시스템에 의해 구현이 제공되는 Abstract class&lt;br /&gt;
어플리케이션에 특화된 리소스와 클래스들에 대한 접근&lt;br /&gt;
launching, 액티비티, 브로드케스팅과 intents 수신 등과 같이 어플리케이션 레벨의 동작에 대한 업콜도 가능&lt;br /&gt;
즉, 안드로이드 시스템이 애플리케이션이나 컴포넌트 등을 관리하기 위한 것이라 생각&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;AAC 란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;AAC는 Android Architecture Components를 뜻하며 테스트와 유지관리가 쉬운 앱을 디자인하도록 돕는 라이브러리 모음이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Intent 란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Intent는 다른 앱 구성요소로 부터 작업을 요청하는 메세지 객체이다.&lt;br /&gt;
두가지 종류가 있으며, 명시적 인텐트는 수신하는 컴포넌트가 명시적으로 지정된 인텐트이다.&lt;br /&gt;
암시적 인텐트는 해당 작업을 수행 할 수 있는 컴포넌트를 찾아서 수행을 요청하는 인텐트이다.&lt;br /&gt;
주로 액티비티, 서비스를 시작하거나 브로드 캐스트를 전달할 때 사용된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Parcelable 이란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Parcelable은 JAVA의 Serializable의 안드로이드 구현체다.&lt;br /&gt;
서로 다른 컴포넌트 사이의 데이터 교환에 사용된다.&lt;br /&gt;
안드로이드는 Intent를 통해서 데이터를 전달할 때 Parcelable을 이용해서 전달하는 것을 권장하고 있다.&lt;br /&gt;
만약 다른 앱이 수신할 수 있는 Intent의 경우 Parcelable을 이용하면 안된다.&lt;br /&gt;
그 이유는 다른 앱에서 Parcelable로 구현된 클래스에 접근하지 못하면 런타임 에러가 발생하기 때문이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;4가지의 앱 구성 요소&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;안드로이드 앱은 컴포넌트로 구성되어 있다.&lt;br /&gt;
각 컴포넌트들은 하나의 독립된 형태로 존재하며, 정해진 역할을 수행한다.&lt;br /&gt;
앱의 필수적인 구성 요소로 시스템 또는 사용자가 앱에 들어올 수 있는 진입점이다.
컴포넌트? = 앱의 구성 단위, 컴포넌트를 조합하여 하나의 앱을 만드는 것을 의미&lt;/p&gt;

&lt;h3 id=&quot;activity&quot;&gt;Activity&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;UI 화면을 담당하는 컴포넌트&lt;/li&gt;
  &lt;li&gt;특징
    &lt;ol&gt;
      &lt;li&gt;안드로이드 어플리케이션은 반드시 하나 이상의 Activity를 가지고 있어야 합니다.&lt;/li&gt;
      &lt;li&gt;두개의 액티비티를 동시에 Display할 수 없습니다.&lt;/li&gt;
      &lt;li&gt;다른 어플리케이션의 액티비티도 불러낼 수 있습니다.&lt;/li&gt;
      &lt;li&gt;액티비티 내에는 프래그먼트(Fragment)를 추가하여 화면을 분할시킬 수 있습니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;service&quot;&gt;Service&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;화면에 존재하지 않고 백그라운드에서 실행되는 컴포넌트&lt;/li&gt;
  &lt;li&gt;특징
    &lt;ol&gt;
      &lt;li&gt;화면이 없습니다. 그저 백그라운드에서 돌아가는 컴포넌트입니다.&lt;/li&gt;
      &lt;li&gt;한번 시작된 서비스는 어플리케이션이 종료되도 계속해서 백그라운드에서 돌아갑니다.&lt;/li&gt;
      &lt;li&gt;모든 서비스는 Service클래스를 상속받아서 사용합니다.&lt;/li&gt;
      &lt;li&gt;네트워크를 통해서 데이터를 가져올 수 있습니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;서비스에는 크게 3가지로 나뉜다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;포그라운드 서비스 : 알림을 표시해 놓고 사용자와 상호 작용하지 않아도 계속 실행되는 걸 말함&lt;/li&gt;
  &lt;li&gt;백그라운드 서비스 : 사용자가 직접 알지 못하는 작업을 수행할 떄 사용&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;바운드 서비스 : 앱 내에서 서비스를 사용하여 간단한 클라이언트 - 서버 환경을 구성하는 것을 말함(특정 컴포넌트와 서비스간 상호작용)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;startService&lt;br /&gt;
⇒ 단순 서비스를 시작, 종료하게 하는 서비스이다.&lt;br /&gt;
생명주기는 onCreate - onStartCommand - onDestroy&lt;br /&gt;
onStartCommand return result&lt;br /&gt;
START_STICKY : 안드로이드가 서비스를 강제 정지한 경우, null intent를 보내서 재시작한다.&lt;br /&gt;
START_NOT_STICKY : 안드로이드가 서비스를 강제 정지한 경우, 재시작 하지 않는다.&lt;br /&gt;
START_REDELIVER_INTENT : 안드로이드가 서비스를 강제 정지한 경우, 동일한 intent를 보내서 재시작한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;bindService&lt;br /&gt;
⇒ 특정 컴포넌트와 서비스간 상호작용이 있을 때 사용하는 서비스이다.&lt;br /&gt;
생명주기는 onCreate - onBind - onUnbind - onDestroy&lt;/p&gt;

&lt;p&gt;intentService&lt;br /&gt;
⇒ 액티비티와 프래그먼트 LifeCycle에 의존하지 않고 백그라운드에서 처리하고 싶은 경우 사용한다. 이 서비스는 핸들스레드루퍼 + 핸들러를 조합해 구현되어 있다. 콜백메소드를 구현할 필요 없고 onHandleIntent()만 구현하면 되고 요청한 작업이 완료되면 자동적으로 서비스를 중단한다.&lt;/p&gt;

&lt;h3 id=&quot;broadcast-receiver&quot;&gt;Broadcast Receiver&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;단말기에서 발생하는 다양한 이벤트, 정보를 받고 반응하는 컴포넌트&lt;/li&gt;
  &lt;li&gt;안드로이드 단말기에서 발생하는 다양한 이벤트 정보(화면이 켜지거나 꺼짐, 리부팅 등)를 받고 반응하는 컴포넌트&lt;/li&gt;
  &lt;li&gt;특징
    &lt;ol&gt;
      &lt;li&gt;디바이스에서 발생하는 일 중에서 어플리케이션이 알아야 하는 상황이 발생하면 알려줍니다.&lt;/li&gt;
      &lt;li&gt;수신기를 통해 디바이스의 상황을 감지하고 적절한 작업을 수행합니다.&lt;/li&gt;
      &lt;li&gt;대부분 UI가 존재하지 않습니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;정적 리시버: 매니페스트에 등록하여 리시버를 구현하는 형태인데 한 번 등록하면 해제할 수 없는 방식이다.
동적 리시버: 클래스 파일에서 리시버를 등록, 해제할 수 있는 형태이기 때문에 앱에 부하를 줄 일 수 있다. 하지만 해제를 적절히
해주지 않는다면 메모리 락이 발생할 수 있다.&lt;/p&gt;

&lt;p&gt;(❌ 리시버에는 너무 많은 작업, 시간이 오래걸리는 작업을 하면 안된다. 처리 지연시간이 길어진 경우 ANR이 발생하기 떄문에 리시버에는 간단한 일을 처리하도록 하고, 스레드를 별도로 생성해서 처리하도록 해야한다)&lt;/p&gt;

&lt;h3 id=&quot;content-provider&quot;&gt;Content Provider&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;데이터를 저장하고,가져오고, 모든 App에서 접근할 수 있도록 하는 컴포넌트&lt;/li&gt;
  &lt;li&gt;데이터를 관리하고 다른 애플리케이션 데이터를 제공&lt;/li&gt;
  &lt;li&gt;데이터베이스의 데이터를 전달할때 많이 사용&lt;/li&gt;
  &lt;li&gt;콘텐트 제공자는 생명주기를 가지고 있지 않음
    &lt;ol&gt;
      &lt;li&gt;파일 입출력, SQLiteDB, Web 등을 통해서 데이터를 관리&lt;/li&gt;
      &lt;li&gt;콘텐트 제공자를 통하여 다른 어플리케이션의 데이터도 변경 가능&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;RxJava or RxKotlin and RxAndroid&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;rx가-무엇이며-사용한-이유&quot;&gt;Rx가 무엇이며, 사용한 이유&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Rx는 Reactive Programming 을 좀 더 편하게 사용하기 위한 라이브러리&lt;/li&gt;
  &lt;li&gt;Reactive Programming은 반응형 프로그래밍으로, 어떤 데이터를 관찰(Observe)하고 있다가, 데이터가 변경이 되면 반응을 하고, 그 변경된 이벤트를 가지고 관련된 업데이트 로직을 처리하는 것을 뜻함&lt;/li&gt;
  &lt;li&gt;사용 이유는 설명 그대로 데이터 흐름에 관해 중복되는 코드들을 제거하고 간단히 구성하기 위해 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reactive-programming&quot;&gt;Reactive Programming&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;데이터 흐름과 전달에 관한 프로그래밍 패러다임&lt;/li&gt;
  &lt;li&gt;데이터 흐름을 먼저 정의하고, 그 데이터가 변경 시 연관되는 함수나 수식이 업데이트 될 수 있는 것을 의미&lt;/li&gt;
  &lt;li&gt;메모리 누수를 해결하기 위한 방법
    &lt;ol&gt;
      &lt;li&gt;Disposable Interface를 이용한 명시적 자원해제
   onCreate()에서 subscribe()를 호출하면 onDestroy()에서 메모리 참조를 해제하고 onResume()에서 호출하면 onPause()에서 해제합니다.&lt;/li&gt;
      &lt;li&gt;CompositeDisposable class 사용 시 생성된 모든 Observable을 안드로이드 라이프 사이클에 맞춰서 한 번에 모두 메모리 해제를 할 수 있습니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;ANR?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Android 앱의 UI 스레드가 너무 오랫동안 차단되면 ‘ANR(Application Not Respoding, 애플리케이션 응답 없음)’ 오류가 트리거&lt;/p&gt;

&lt;h3 id=&quot;정의&quot;&gt;정의&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Application Not Responding 로, Main Thread(UI Thread)가 일정 시간 어떤 Task에 잡힘으로써 발생&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;발생-요인&quot;&gt;발생 요인&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;액티비티가 포그라운드에 있는 동안, 앱이 5초 이내에 입력 이벤트 또는 BroadcastReceiver(예: 키 누름 또는 화면 터치 이벤트)에 응답하지 않을 때&lt;/li&gt;
  &lt;li&gt;포그라운드에 액티비티가 없을 때, BroadcastReceiver가 상당한 시간 내에 실행을 완료하지 못할 때&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;회피-방법&quot;&gt;회피 방법&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;매인 스레드(UI Thread)에서 실행되는 메소드는 가능한 한 적은 작업을 수행해야 합니다. 특히 엑티비티의 onCreate() 그리고 onResume() 에서는 가능한한 최소한의 작업만을 수행해야 함. 네트워크 접근, 데이터 처리 또는 비트맵 리사이징과 같은 잠재적으로 오래 걸리는 작업은 작업 스레드(Worker Thread)에서 처리해야 합니다.&lt;/li&gt;
  &lt;li&gt;UI 변동이 있을 때는 프로그레스와 같은 화면을 띄어 사용자에게 기달릴 것을 명시&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Compile Time? Run Time?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;compiletime&quot;&gt;CompileTime&lt;/h3&gt;

&lt;p&gt;개발자에 의해 작성된 프로그래밍 언어를 컴퓨터가 인식할 수 있는 기계어 코드로 변환되어 실행 가능한 응용 프로그램이 되는 과정&lt;/p&gt;

&lt;p&gt;ex) Compile time error? 소스 코드가 컴파일 되는 과정 중 발생하는 Syntax Error로 파일 참조 오류 등과 같은 문제들로 인해 컴파일이 방해되어 발생하는 오류 형태, 즉, 소스 코드 문제다! 라고 말해주는 시간!&lt;/p&gt;

&lt;h3 id=&quot;runtime&quot;&gt;RunTime&lt;/h3&gt;

&lt;p&gt;컴파일 과정을 마친 응용 프로그램이 사용자에 의해 실행되어 지는 “Time”, 즉 프로그램이 실행되는 동안의 그 time을 의미!&lt;/p&gt;

&lt;p&gt;ex) Run time error? 이미 컴파일이 완료되어 프로그램이 실행 중 임에도 불구하고, 의도치 않은 예외 상황으로 인해 프로그램 실행 중 발생하는 오류 형태&lt;/p&gt;

&lt;p&gt;예를 들어, “0 으로 나눌 때, null 참조”는 RunTime 시 발생하는 error이며, “타입 체크가 잘못 되었을 때 에러”는 CompileTime 시 발생하는 error 이다.&lt;/p&gt;

&lt;파트 기술질문=&quot;&quot;&gt;
이전 협업에서 본인이 어떤 역할을 했는지, 기술적으로 어느 부분을 담당했는지 자세히

객체지향 언어가 무엇인지 알고 있는지?
클래스란 무엇인지?

성공적인 프로젝트를 이뤄내기 위해 팀에 어떤 부분에 기여하여 어떻게 할 것인지?

&amp;gt; FragmentManager vs SupportFragmentManager

fragmentManager : fragment 객체를 관리하기 위한 것

Activity에서의 fragmentManager 와 supportFragmentManager 의 차이는, FragmentManager의 경우 Activity class에서 가져오고 SupportFragmentManager는 FragmentActivity에서 가져오는 것.
FragmentActivity 역시 Activity를 상속받지만, 상속받으면서 androidx로 마이그레이션 된다. 즉, supportFragmentManager는 androidx에서 사용하기 위한 fragmentManager이다.

Fragment에서의 fragmentManager 와 childFragmentManager 의 차이는, fragmentManager는 Activity와 Fragment 둘 다에서 관리가 가능하며, childFragmentManager는 Fragment에서만 관리가 가능하다.

&amp;gt; Android Jetpack

개발자가 고품질 앱을 손쉽게 개발할 수 있게 돕는 라이브러리, 도구, 가이드 모음으로, 플랫폼 API와는 별도로 제공되는 androidx.* 패키지 라이브러리로 구성  
향상된 Android 기능의 이점을 활용하기 위한 일련의 구성 요소인 Support Library 로, 이전 버전까지 호환한다.  
구성요소는 Architecture(아키텍처), Foundation(기초), Behavior(동작), UI로 총 4가지로 나뉜다.  

가장 많이 사용하고 있는 부분은 Architecture Component 이다.  

---

• 실력있는 개발자가 되고 싶다 하였는데 실력있는 개발자란 무엇인지?
• MVC 패턴과 MVVM 패턴의 차이점은?
• Observer 패턴이란?
• 오버로딩과 오버라이딩의 차이점은?
• 멀티 프로세싱과 멀티 스레드의 차이는?
• 최근 카카오와 같은 IT회사에서 주간근무시간을 초과하는 일에 대해 어떻게 생각하는지
정시 퇴근 후 정말 중요한 약속이 잡혔을 때 팀장님께서 추가업무를 부탁하면 어떻게 대처할
지

&amp;gt; Context란?

자신이 어떤 어플리케이션을 나타내고 있는지 알려주는 ID 역할 ActivityManagerService 에 접근 할수 있도록 하는 통로 역할

ANR(Application Not Responding) 이란

메인 스레드가 일정 시간 어떤 TASK 에 잡혀 있으면 발생한다. 시간 소모가 많은 작업은 스레드를 통해 처리해야 함

ViewModel 의 장점

화면 회전시 데이터를 유지할 수 있는 구조로 디자인하였으며 Android Lifecycle 의 onDestroy코드가 동작한다. Lifecycle 을 내부적으로 알아서 호출해주기 때문에 좋다.

ConstraintLayout vs RelativeLayout vs LinearLayout 차이(ConstraintLayout 장점)

LinearLayout 은 orientation 이 있어서 가로 또는 세로로 차곡차곡 쌓여지는 방식이다. RelativeLayout 은 상대적인 기준으로 어떤 위젯의 왼쪽 오른쪽등등의 방향으로 배치 할 수 있게 해주는 레이아웃이다. ConstraintLayout 은 복잡한 레이아웃을 단순한 계층구조를 이용하여 표현할 수 있는 ViewGroup 이다. RelativeLayout과 비슷하지만 더 유연하고 다양하고 강력한 기능을 제공한다.

CustomView 와 Fragment 의 차이점

Fragment 는 자체 생명주기를 따르고 Activity 의 생명주기에 따라 직접적으로 영향을 받는다. Fragment를 사용하려면 Activity 내에서 또는 상위 프래그먼트내에서 사용이 가능하고 다른 액티비티에서 재사용이 가능하다. 여기서 CustomView 는 자체 생명주기는 가지고 있지 않고 Fragment 보다는 더 작은 단위?를 커스터마이징해서 재사용을 할 수 있다.

Android KTX 란 무엇인가?
안드로이드 프레임워크와 서포트 라이브러리를 모두 지원하여 안드로이드를 위한 코틀린(Kotlin) 코드를 간결하고 편하게 사용할 수 있게 설계된 확장 라이브러리이다.

mvp 패턴과 mvvm 패턴의 차이

mvp 와 mvvm 의 차이는 presenter와 viewModel 의 차이가 가장 크다. presenter 는 view의 interface 를 가지고 있고 view 관련 처리를 요청한다. 하지만 viewModel 은 view 의 참조를 하지않고 Rx를 사용하거나 LiveData를 사용해서 데이터가 변경될때 같이 자동으로 변경될수 있게 구조가 되어있다.

LiveData 는 인터럽트방식인가 폴링방식인가

폴링방식은 정해진 시간 또는 순번에 상태를 확인해서 상태 변화가 있는지 없는지 체크 하는 방식이고 인터럽트방식은 main문을 실행 하는 동중 외부에서 정해져 있는 인터럽트 핀에 신호가 들어오면 MCU는 즉각적으로 하고 있는 동작을 멈추고 인터럽트 서비스 루틴을 실행하는 것이다.
LiveData 는 데이터가 변경된 시점에 Observer 가 실행 되기 때문에 인터럽트 방식이라고 볼 수 있다.
옵저버패턴 설명

한객체의 상태가바뀌면 그 객체에 의존하는 다른 객체들한테 연락이 가고 자동으로 내용이 갱신되는 방식으로 일대다(one-to-many) 의존성을 정의한다.
데이터 전달 방식은 2가지가 있다 주제 객체에서 옵저버로 데이터를 보내는 방식 (푸시방식) 옵저버에서 주제객체의 데이터를 가져가는 방식(풀 방식)
Subject 와 Observer 가 존재하고 Subject에 Observer 를 등록하고 난 뒤 subject 의 데이터가 변경 되면 등록된 Observer 가 호출 되는 방식

어댑터패턴 설명

한 클래스의 인터페이스를 클라이언트에서 사용하고자하는 다른 인터페이스로 변환한다. 어댑터를 이용하면 인터페이스 호환성 문제 때문에 같이 쓸 수 없는 클래스들을 연결해서 쓸 수 있다.

프로토콜이란?

통신 프로토콜 또는 통신 규약은 컴퓨터나 원거리 통신 장비 사이에서 메세지를 주고 받는 양식과 규칙의 체계이다. 통신 프로토콜은 신호 체계, 인증 그리고 오류 감지 및 수정기능을 포함할 수 있다. 간단히 말해서 데이터 주고받는 상호간에 미리 약속된 규칙, 규약이다!!

ViewModel 상속받은 클래스에서 ViewModel 상속을 받지 않는다면 달라지는점은?
viewModel 상속을 받지 않는다면 생명주기에 따른 처리,rotate상황 등등을 추가 해주어야한다는 점이 달라진다.

반응형 프로그래밍 - RXJava
리액티브 프로그래밍은 데이터 흐름(data flow)과 변화 전파에 중점을 둔 프로그래밍 패러다임프로그래밍 언어로 정적 또는 동적인 데이터 흐름을 쉽게 표현데이터 흐름을 통해 하부 실행 모델이 자동으로 변화를 전파할 수 있는 것을 의미

Observable
• 데이터 흐름
• 주기적으로 데이터를 처리하고 변화를 방출하며 데이터 흐름을 다른 구성요소에게 전달
Observer
• Observable이 방출한 데이터를 받아서 데이터 흐름의 변화를 관찰
• Observable이 방출한 데이터를 메인 스레드나 UI에 전달하는 역할
• onComplete()Observable이 더 이상 방출할 데이터가 없을 때 호출
• onError(Throwable e)Error 발생 시 호출
• onNext(Object o)새로운 데이터가 방출될 때 호출방출된 데이터는 매개변수에서 찾을 수 있음
Schedulers
• Rx의 핵심은 비동기 처리에 있음
• Observable과 Observer가 어떤 스레드에서 작업을 수행할지 지정
• subscribeOn(Thread)Observable이 실행되어야 하는 스레드 지정
• observeOn(Thread)Observer가 실행되어야 하는 스레드 지정
Manifest file
• 애플리케이션에 관한 정보를 입력하는 파일로 xml 형태
• 패키지 이름, 앱 이름, 앱 설명, 아이콘, 앱이나 구성요서에서 필요한 권한, 앱에서 사용되는 액티비티, 서비스, 브로드캐스트에 대한 정보 등 전반적 앱 정보 저장
Activity
• 화면에 UI를 표시하는 기본요소
• 대부분의 경우 액티비티는 꽉찬 화면을 구성하지만, 예외적으로 floating windows, multi-window mode 처럼 화면의 일부를 차지하게 할수 있다.
• Acitivty 의 종류 중 하나로 FragmentActivity가 있는데, nested fragment는 fragment 안에 다른 fragment가 있는 경우 고려
• AppCompatActivity는 안드로이드 하위버전의 안드로이드를 지원하기 위해 사용
• AppCompatActivity는 FragmentActivity를 상속
Activity Life Cycle
• 재개 (create, start, resume)
• 일시정지 (pause)
• 멈춤 (stop, destroy)
• onCreate (액티비티 생성 직전)onRestart (액티비티가 stop상태에서 재시작될 경우)onStart (액티비티가 화면에 보여지기 직전)onResumed (액티비티가 사용자와 상호작용하기 직전)onPause (액티비티가 부분적으로 가려짐)onStopped (액티비티가 더 이상 보이지 않을때)onDestroy (액티비티가 소멸되기 직전)
Fragment
• 프래그먼트는 액티비티의 부분부분을 동적으로 동작시키기 위해 생긴 개념
• 탭레이아웃의 탭을 눌러서 다른화면으로 전환하는 앱의 경우, 한 액티비티안에서 탭을 눌렀을 때 보여지는 프래그먼트만 변경되며, 프래그먼트는 액티비티와 달리 스택에 쌓이지 않기 때문에 백버튼을 누른다고 해서 이전 프래그먼트로 돌아가지 않는다. (이는 BackStack을 추가하여 직접 구현)
• 프래그먼트의 라이프사이클은 액티비티와 거의 동일한데, onAttach, onCreateView, onDestroyView, onDetach라는 콜백이 추가
Thread &amp;amp; Handler &amp;amp; Looper
Thread
• 안드로이드는 기본적으로 하나의 메인 스레드로 작동
• UI 조작은 메인 스레드만 가능 &amp;gt; 두 개 이상의 스레드가 UI에 동시에 접근 시 의도와 다르게 동작할 가능성이 크기 때문
• 멀티 스레드 환경에서 동기화 이슈를 차단하고 스레드 간 통신을 위해 사용되는 것이 Handler &amp;amp; Looper

1. Java IO에서 제공하는 파이프 이용
2. 스레드 간 공유 메모리를 통한 접근
3. Synchronized를 이용한 시그널링
4. BlockingQueue를 이용한 방법
스레드 통신 메커니즘핸들러 - 루퍼 - 메시지 큐 - 메시지
android.os.Looper - UI 스레드에 하나가 존재하며 소비자 스레드와 연관된 메시지 발송자 (데이터를 읽는 역활)
android.os.Handler - 큐에 메시지를 삽입하는 생산자 스레드를 위한 인터페이스와 소비자 스레드 메시지 처리, 하나의 Looper 객체는 많은 핸들러를 갖지만 모두 같은 큐에 삽입
android.os.MessageQueue - 소비자 스레드에서 처리할 메시지들이 담긴 무제한의 연결 리스트. 모든 루퍼와 스레드는 최대 하나의 메시지 큐를 가진다.
android.os.Message : 소비자 스레드에서 실행하는 메시지
Handler
• 핸들러 생성 시 기본적으로 행들러를 생성한 스레드와 루퍼에 연결
• postDelayed / postAtFrontOfQueue와 같이 메시지 순서나 보내는 시간 조작 함수 보유 &amp;gt; 스케줄링가능
Looper
• MessageQueue의 메시지나 Runnable 객체를 꺼내 핸들러에게 전달
• run() 메소드 내부에 MessageQueue 생성 &amp;gt; Looper.loop()를 통해 메시지 전달 대기
AsyncTask
• 백그라운드에서 작업 수행 뒤 결과를 UI Thread에서 생신할때 주로 사용
• 순차적으로 실행
단점
• 액티비티 종료 시 따로 명시하지 않으면 메모리에 남아 Memory leak 발생
• 한 번만 실행되고 재사용 불가
• 처리 작업의 수가 1개
• Configuration 변경 시 크래쉬 발생
대안으로 java.util.concurrent API / Kotlin coroutine / RxJAVA 사용 권장
Intent
• 구성 요소 실행 &amp;amp; 구성 요소 간 데이터 전달
• putExtra()를 통해 데이터 보관 &amp;gt; getExtra()로 전달 받을 수 있음
CustomView
• 기존에 있는 View (ImageView, TextView 등)로 표현할 수 없는 모양의 View를 구현해야 할때 필요
• View를 상속받는 자손 클래스를 만들어서 구현

1.기존 View 상속
2.onDraw(), onMeasure(), onKeyDown() 처럼 'on'으로 시작하는 슈퍼클래스 메서드를 오버라이드

• onDraw()
• 뷰를 실제 그릴때 사용
• Canvas 객체를 매개변수로 받음
• Canvas 객체는 어떤 도형을 그릴지 설정
• Paint 객체는 도형의 색, 스타일, 글꼴 등을 설정
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)
뷰의 크기 설정 시 사용

Rx관련 질문 :
새로운 스레드를 생성해도 되는데 왜 Schedulers.io() 를 사용하는가? 내부 동작이 어떻게 돌아가는 것인가를 묻는 질문
화면단에서 사용되는 request 가 하나가 아니라 적게는 한자리수 많게는 두세자리수까지 갈수 있는데 이부분에서 Thread를 계속해서 생성,수거 하게 된다면 사용할 때마다 드는 비용을 무시할수 없다. 그렇기 때문에 Thread Pool 이 사용된다. 몇개의 스레드를 생성한뒤 큐에 Task를 넣고 작업하고 있지 않은 Thread에 Task를 할당하는 방식이다. 작업이 끝난 Thread 는 다시 어플리케이션에 결과값을 리턴한다. Thread를 재사용 하기때문에 성능저하를 방지할 수 있다. 하지만 Thread를 너무 많이 만들어 놓게 되면 메모리만 낭비하게 되므로 주의해서 사용해야 한다.

프로가드
코드 축소와 바이트코드를 최적화하고 미사용 코드 명령을 제거하며 남아 있는 클래스,필드 및 메서드를 짧은 이름으로 난독 처리한다. 난독 처리된 코드는 APK 의 리버스 엔지니어링을 어렵게 만들며 보안에 민감한 기능이 앱에 사용되는 경우 특히 유용하다. 64K 참조 제한을 해결하기 위한 유용한 도구 이기도 하다.

코틀린 by lazy
lateinit은 필요할 경우 언제든 초기화가 가능한 Properties 이지만 lazy properties는 생성 후 값을 변경할 수 없는 val 로 되어 있다. by lazy 정의에 의해서 초기화를 진행하고 val 이므로 값을 교체하는 건 불가능하다. lazy를 사용하는 경우 기본 synchronized 로 동작한다.

viewModel rotate 상황에서 파기 왜 안되는지 과정 ?
ViewModelStoreOwner 인터페이스를 가지고 있는 Activity 또는 Fragment 는 viewModelStore를 가지고 있다. rotate 될 때 onDestroy 가 불리게 되는데

```kotlin
      boolean isChangingConfigurations = activity != null &amp;amp;&amp;amp; activity.isChangingConfigurations();
        if (this.mViewModelStore != null &amp;amp;&amp;amp; !isChangingConfigurations) {
            this.mViewModelStore.clear();
        }
```

viewModelStore 가 null 이 아니고 configuration변화가 없을때 clear 를 불러 주기 때문에 rotate상황에서 viewModel이 clear 되지 않는다.

Multi dex
안드로이드 앱을 구성하는 코드는 컴파일 되어 덱스 파일로 만들어 진다. 하나의 덱스 파일에는 64K 메소드참조만 저장할 수 있다. 큰 규모 앱을 작성하다 보면 앞의 메소드 제한을 훌쩍 넘게 되는데 멀티덱스를 사용하면 덱스 파일을 여러 개로 나누어 이러한 문제를 피할 수 있다.

액티비티 생명 주기
onCreate onStart onResume Running onPause onStop onDestroy

프래그먼트 생명 주기
onAttach onCreate onCreateView onActivityCreated onStart onResume Running onPause onStop onDestroyView onDestroy onDetach

서비스 생명 주기 2가지
onCreate onStartCommand() return start_sticky , start_not_sticky, start_redeliver_intent Service Running onDestroy

onCreate onBind onUnbind onDestroy

FLAG_ACTIVITY_CLEAR_TOP 과 FLAG_ACTIVITY_SINGLE_TOP 차이
CLEARTOP 은 A -&amp;gt; B -&amp;gt; A 일 때 최상위 A 만 남고 나머지 다 destroy SINGLETOP 은 A -&amp;gt; B -&amp;gt; B 일때 A -&amp;gt; B 로 B가 하나로 됨.

스레드 통신방법?
스레드가 시작 되면 이 스레드는 루퍼! 핸들러! 메세지 큐! 를 하나씩 가지고 있다. 메세지큐는 외부 스레드로부터 핸들러를 통하여 받은 message 혹은 Task 를 저장하는 역할을 한다. 루퍼는 메세지큐에서 메세지를 순차적으로 꺼내서 핸들러에게 전달하는 역할!! 핸들러는 두가지 기능이 있다.

루퍼에게서 받은 메세지 혹은 Task 를 일정한 시간에 수행하는 기능을 한다.
외부 스레드로부터 받은 메세지를 핸들러를 통하여 Message Queue에 집어 넣는 역할을 한다.
스레드 충돌을 막으려면?
두개 이상의 스레드가 같이 참조 하는 메소드 혹은 블럭구문을 synchronized , synchronized block 사용해서 해결할 수 있다.

Viewholder 패턴에 대해 설명
예전 ListView 를 사용할 때 getView() 를 오버라이드 해서 뷰를 인플레이팅 시키는데 이부분에서 계속해서 생성하고 findviewById 를 불러주게 되면 부담이 많이 가는 작업이 된다. 데이터가 많아 질 수록 버벅거리는 현상이 일어날 확률이 높다. 그래서 viewHolder 패턴이 나오게 되었는데 해당 뷰가 널일때만 view를 인플레이트 시키고 viewHolder 클래스에 findviewById 를 사용해서 viewHolder 는 해당 뷰에 태깅처리해서 다음번 부터는 태그한 viewHolder 를 가져와서 사용한다. 그 이후에 viewHolder 를 강제로 구현하게 나온것이 RecyclerView 이다.

Dangerous permission
시스템 권한은 두가지로 나눠 지는데 정상권한과 위험권한이 있다. 정상권한은 사용자 개인정보를 직접 위험에 빠뜨리지않는다. 앱이 매니페스트에 정산 권한을 나열하는 경우 시스템은 자동으로 권한을 부여. 위험권한은 사용자 기밀 데이터에 대한 액세스를 앱에 부여할 수 있다. 위험권한을 나열하는 경우, 사용자는 앱에 대한 명시적 승인을 제공해야 한다.

Intent service 란?
IntentService 는 Intent를 사용해서 시작되고 하나의 workerThread 가 생성 되고 Queue에 작업이 들어 가게 된다. onHandleIntent() 메소드가 이 스레드 내에서 호출되고 작업이 다 끝나면 알아서 destroy 되는 방식이라 stopSelf를 불러줄 필요가 없다.

Foreground service 사용?
Fragment 사용 장점 ?
Activity를 분할하여 화면의 한 부분을 정의할수 있고 자신의 생명주기를 가진다. 액티비티내에서 실행 중 추가 제거가 가능하고 다른 액티비티에서도 사용 할 수 있어 재사용성이 뛰어나다. 태블릿 지원하게 될 때 용이하게 사용 가능하다.

Parcelable serializable 차이와 성능은?
복잡한 클래스의 객체를 이동시키려고 할 때 Serializable 또는 Parcelable 을 사용해서 직렬화하여 인텐트에 추가합니다. Serializable 은 Java 의 인터페이스이다. 해당 객체에 인터페이스 Serializable 을 사용해주면 되기 때문에 사용하기 쉽다. 하지만 내부에서 Reflection 을 사용하여 직렬화 처리하기 때문에 성능 저하 및 배터리 소모가 발생되게 된다. Parcelable 은 Android SDK 의 인터페이스이다. 직렬화 방법을 사용자가 명시적으로 작성하기 때문에 작동으로 처리하기 위한 reflection이 필요없다. 속도적인 측면에서는 Parcelable 이 10배 이상 빠르다.

하지만 Serializable 을 사용할 때 writeObject 와 readObject 를 구현해 주면 Parcelable 보다 쓰기는 속도가 3배 읽기의 경우 1.6배 더 빠르다. 어떻게 사용하느냐에 따라 속도적인 측면에서 비교할 수 있다.

onSaveInstanceState 와 onRestoreInstanceState
Activity 또는 Fragment 가 종료 될 때 onSaveInstanceState은 onPause 다음 상태에서 불리게 된다. 이때 파라미터로 받은 Bundle에 데이터를 저장하고 onCreate 시점에서 savedInstanceState bundle 을 통해 값을 가져와서 사용할 수 있다. onRestoreInstanceState 은 정상적인 경우는 불리지 않고 메모리 부족한 경우 프로세스 자체에서 Activity 또는 Fragment 를 강제종료할 때 onRestoreInstanceState가 불리게 된다. bundle 통해서 데이터 백업 가능
&lt;/파트&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="android" />
      

      
        <summary type="html">안드로이드 면접 준비</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">코틀린 면접 준비</title>
      <link href="https://lee989898.github.io/ad" rel="alternate" type="text/html" title="코틀린 면접 준비" />
      <published>2022-03-18T01:06:00+09:00</published>
      <updated>2022-03-18T01:06:00+09:00</updated>
      <id>https://lee989898.github.io/ad</id>
      <content type="html" xml:base="https://lee989898.github.io/ad">&lt;h2 id=&quot;코틀린-면접-준비&quot;&gt;&lt;strong&gt;코틀린 면접 준비&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;코틀린-질문&quot;&gt;&lt;strong&gt;코틀린 질문&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;코틀린 사용의 장점&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;널 안전성&lt;/li&gt;
  &lt;li&gt;가변/불변 구분&lt;/li&gt;
  &lt;li&gt;람다 표현식 지원&lt;/li&gt;
  &lt;li&gt;스트림 API 지원&lt;/li&gt;
  &lt;li&gt;완벽한 자바 호환성&lt;/li&gt;
  &lt;li&gt;Java에 비해 훨씬 간결한 코드&lt;/li&gt;
  &lt;li&gt;객체지향이면서 함수형 프로그래밍 언어&lt;/li&gt;
  &lt;li&gt;자바와 상호운용 가능 (자바에서 코틀린으로 작성된 클래스를 부를 수 있으며 반대로도 가능)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;클래스, 객체, 인스턴스&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;클래스: 객체를 만들어 내기 위한 설계도 혹은 툴
객채: 소프트웨어 셰계에 구현할 대상
인스턴스: 설계도를 바탕으로 소프트웨어 세계에 구현된 구체적인 실체&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Array와 List의 차이&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Array의 경우 고전적인 의미의 배열이며, 고정된 사이즈의 연속된 메모리 공간에 할당된다.&lt;br /&gt;
따라서 인덱스를 통해 값을 변경하는 것이 가능하며(mutable), 사이즈를 변경하는 것이 불가능하다.&lt;br /&gt;
List의 경우 크게 List와 MutableList가 있는데, ArrayList또는 LinkedList의 구현체다.
Default로는 ArrayList의 구현체를 따른다.&lt;br /&gt;
이름에서도 볼 수 있듯이 List는 Immutable이며 MutableList는 Mutable이다.
성능이 중요시 되는 부분을 제외하고는 List를 쓰는것이 바람직 하다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Scope Function&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;코틀린에서 제공하는 기본 라이브러리 함수로, 객체를 context내에서 코드 단위 블럭으로 실행하는데 묵적을 가진 함수&lt;br /&gt;
5개의 스코프 함수가 존재: let, run, with, apply, and also&lt;/p&gt;

&lt;p&gt;리시버와 람다 함수&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;스코프 함수를 사용할 떄 넘겨주는 두 객체&lt;/li&gt;
  &lt;li&gt;차이점
    &lt;ul&gt;
      &lt;li&gt;객채를 접근하는 방법: this, it
        &lt;ul&gt;
          &lt;li&gt;run, with, apply -&amp;gt; 자기 자신을 블럭(this)으로 넘기고 this를 사용해 객체에 접근&lt;/li&gt;
          &lt;li&gt;let, alse -&amp;gt; 자기 자신을(람다) 인자(it)으로 넘기고 it을 사용해 객체에 접근&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;리턴 값
        &lt;ul&gt;
          &lt;li&gt;apply, also -&amp;gt; 리시버 객체를 마지막에 리턴(자기 자신을 리턴)&lt;/li&gt;
          &lt;li&gt;let, run, with -&amp;gt; 람다 함수의 마지막 결과를 리턴(코드 블럭의 결과를 리턴)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;let : 이 함수를 호출한 객체를 이어지는 함수 블록의 인자로 전달한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it으로 리시버에 접근하고 람다 함수의 마지막 결과를 리턴&lt;/li&gt;
  &lt;li&gt;리시버의 여러 함수들을 호출할 떄 사용&lt;/li&gt;
  &lt;li&gt;리시버 객체의 확장 함수로 사용 -&amp;gt; val length = str?.let {it.length}&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;getPadding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;은&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;패딩&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;값&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setPadding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;with : 인자로 받은 객체를 이어지는 함수 블록의 리시버로 전달, block 함수의 결과를 반환&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;this로 리시버에 접근, 람다 함수의 마지막 결과를 리턴(리턴 값을 사용하지 않는 경우에 쓸 것을 권장)&lt;/li&gt;
  &lt;li&gt;리시버 객체의 확장 함수로 사용하지 않음 -&amp;gt; with(리시버 객체) { 람다 함수}&lt;/li&gt;
  &lt;li&gt;run과 동일한 기능&lt;/li&gt;
  &lt;li&gt;인스턴스를 참조연산자 대신 parameter로 받아 사용 ( &amp;lt;-&amp;gt; run과 차이)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;textView!!!&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;gravity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gravity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CENTER_HORIZONTAL&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;run : 인자가 없는 익명 함수처럼 사용하는 형태와 객체에서 호출하는 형태 제공 함수형 인자 block 을 호출하고 결과반환 또는 호출한 객체를 함수형 인자 block의 리시버로 전달하고 그 결과를 반환한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;this로 리시버에 접근하고, 람다 함수의 마지막 결과를 리턴&lt;/li&gt;
  &lt;li&gt;마지막 구문의 결과 값을 반환한다. ( &amp;lt;-&amp;gt; apply와 차이)&lt;/li&gt;
  &lt;li&gt;with와 동일한 기능&lt;/li&gt;
  &lt;li&gt;리시버의 확장 함수로 사용 -&amp;gt; 리시버.run { 람다 함수 }&lt;/li&gt;
  &lt;li&gt;람다함수에서 여러 값을 초기화하고 리턴 값을 어떤 객체의 초기값으로 사용할 때 사용&lt;/li&gt;
  &lt;li&gt;이미 인스턴스가 만들어진 후에 인스턴스의 함수나 속성을 scope 내에서 사용해야 할 떄 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;AplusB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;textView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;와&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;비슷하지만&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textView&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;의&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;널체크를&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;해야&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;하는경우&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;사용하면&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;좋다&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;textView!!!&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;gravity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gravity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CENTER_HORIZONTAL&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;apply : 이 함수를 호출한 객체를 이어지는 함수 블록의 리시버로 전달한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it으로 리시버에 접근하고, 리시버 객체를 리턴&lt;/li&gt;
  &lt;li&gt;리시버 스스로를 리턴하기 때문에 빌더패턴처럼 연속적으로 함수 호출 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1f&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;를&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;리시버로&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;전달&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;받았기&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;때문에&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;이나&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topMargin&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;바로사용&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;topMargin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;처리가 끝나면 인스턴스를 반환 : apply, also&lt;/li&gt;
  &lt;li&gt;처리가 끝나면 최종 값을 반환 : run, let, with(?)&lt;/li&gt;
  &lt;li&gt;참조 연산자 없이 인스턴스의 변수와 함수 사용 → apply, run&lt;/li&gt;
  &lt;li&gt;파라미터로 인스턴스를 넘긴 것처럼 it을 통해 인스턴스를 사용 : also, let&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;LiveData 란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;주어진 lifecycle 내에서 관찰할 수 있는 data holder class.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;get()과 직접 참조(=)의 차이&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MutableLiveData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LiveData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LiveData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;직접 선언하는 것(b)과 get() = … 으로 선언하는 것(c)의 차이점은, 직접 선언하면 b 와 a 는 서로 동일한 객체를 바라보게 되는 것이고, get() 으로 선언할 경우엔 내부적으로 함수가 호출되고, 해당 함수의 결과 값으로 a 객체를 리턴하는 것.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;by lazy vs lateinit&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;쉽게 설명하자면, var에서만 사용 가능한 lateInit, val에서만 사용 가능한 by lazy.&lt;br /&gt;
lateInit은 언제든 null을 제외한 값으로 초기화 값을 변경할 수 있지만, by lazy 는 값을 교체하는게 불가능하다.&lt;br /&gt;
null이 필요할 때를 생각해서 사용해야 한다!&lt;/p&gt;

&lt;h3 id=&quot;by-lazy--initializer-&quot;&gt;by lazy { initializer }&lt;/h3&gt;

&lt;p&gt;지정된 초기화 함수 “initializer” 과 기본 thread-safety 모드인 “LazyThreadSafetyMode.SYNCHRONIZED” 을 사용한 “Lazy” interface의 새 인스턴스를 만든다.
값의 초기화에서 exception이 발생하면, 다음 access에서 값을 재 초기화를 시도한다.&lt;br /&gt;
반환된 인스턴스는 동기화하는데 자기 자신을 사용한다. 반환된 인스턴스의 외부 코드로부터 동기화를 하지 마라. 그건 우연히 deadLock을 야기시킬 수 있다. 또한, 이 행동은 나중에 변경될 수도 있다.&lt;/p&gt;

&lt;p&gt;즉, 기본 쓰레드 세잎 모드를 사용해 initializer 함수에 해당하는 새로운 인스턴스를 만들어 사용하는 것이며, kotlin.jvm 에서 동작한다.
이외 (1)스레드를 컨트롤 할 수 있고, (2)객체를 지정해 동기화할 수도 있다.&lt;/p&gt;

&lt;p&gt;즉, 첫 인스턴스를 생성한 후로는 그 인스턴스의 값 만을 가지고 사용한다.&lt;/p&gt;

&lt;h3 id=&quot;lateinit&quot;&gt;lateInit&lt;/h3&gt;

&lt;p&gt;사용 전 반드시 초기화를 해줘야 한다. 물론 초기화가 되어있는지 확인하는 함수가 있긴 하지만, 초기화 하지 않고 사용할 경우 익셉션이 발생한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;companion object 란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;properties(속성)과 functions(함수)가 클래스에 연결되어 있지만, 해당 클래스의 인스턴스에는 연결되어 있지 않은 싱글톤 오브젝트이다. 기본적으로 java의 “static” 키워드와 같지만, 꼬임이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ex-1 : 기본 사용법 ( 클릭 )&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;LATTE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;latte&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bestBeverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;c1&quot;&gt;// all return &quot;latte&quot;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Companion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bestBeverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ex-1을 보고 아래와 같이 생각할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cafe class의 메소드는 companion object 내에 어떤 프로퍼티든 참조할 수 있다. 마치 프로퍼티가 Cafe class 자체에서 field로 선언된 것 처럼&lt;/li&gt;
  &lt;li&gt;companion object 내 프로퍼티들은 ContainingClass.PROPERTY_IN_COMPANION_OBJECT 처럼 “statically”하게 참조될 수 있다.&lt;/li&gt;
  &lt;li&gt;companion object에 대한 기본 이름은 Companion 이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;ex-2 : companion object 에 이름 붙이기 ( 클릭 )&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;LATTE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;latte&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bestBeverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// all return &quot;latte&quot;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bestBeverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// this no longer compiles&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Companion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;ex-3 : companion object 내 프로퍼티에 private ( 클릭 )&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;LATTE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;latte&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bestBeverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// both of these will give you an error&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// this still evaluates to &quot;latte&quot;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bestBeverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;companion object 는 최초 한번만 선언되고 두 개 이상 선언이 되지 않는다. 또한, 인터페이스를 상속받아 작업할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ex-4 : interface 상속 ( 클릭 )&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Drinkable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;LATTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Drinkable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;I like coffee&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;LATTE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LATTE&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;가능&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그럼 일반 object 대신 companion object 를 사용하는 이유는 뭘까?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ex-5 : &lt;del&gt;companion&lt;/del&gt; object&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;LATTE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;latte&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bestBeverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ex-5를 보면 아래와 같은 차이점을 발견할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Companion 의 기본 이름이 지정된 companion object와 달리, 일반 object 선언은 이름을 지어야만 한다.&lt;/li&gt;
  &lt;li&gt;일반 object 내 fields를 참조하기 위해선 객체 이름을 명시적으로 사용한 포함된 클래스를 요구한다. companion object를 가지고, 간단하게 Cafe.LATTE를 만들 수 있지만, 일반 object를 가지고는, Cafe.Beverage.LATTE를 써야만 한다.&lt;/li&gt;
  &lt;li&gt;Companion object 는 포함된 클래스가 처음 로드될 때 초기화 된다. - 비록 companion object가 사용되지 않더라도. 결과적으로, companion objects는 lazy가 아니다. 위 예제 내 일반 object는 그들이 처름 접근할 때 초기화 된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;그래서-왜-companion-object를-쓰는-걸까&quot;&gt;그래서 왜 companion object를 쓰는 걸까?&lt;/h3&gt;

&lt;p&gt;“static” 프로퍼티/함수에 접근하기 위한 편리한 약칭을 제공하기 때문. 그게 전부다. 뭔 이유가 있다면, 만약 늦은 초기화를 해야 한다면, 일반 object를 대신 사용해라.&lt;/p&gt;

&lt;hr /&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="android" />
      

      
        <summary type="html">코틀린 면접 준비</summary>
      

      
      
    </entry>
  
</feed>
