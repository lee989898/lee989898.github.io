<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://lee989898.github.io/author/lee989898/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://lee989898.github.io/" rel="alternate" type="text/html" />
  <updated>2021-10-15T22:22:26+09:00</updated>
  <id>https://lee989898.github.io/author/lee989898/feed.xml</id>

  
  
  

  
    <title type="html">LEE | </title>
  

  
    <subtitle>공부 블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">PL-04</title>
      <link href="https://lee989898.github.io/pl-04" rel="alternate" type="text/html" title="PL-04" />
      <published>2021-10-13T19:18:00+09:00</published>
      <updated>2021-10-13T19:18:00+09:00</updated>
      <id>https://lee989898.github.io/pl-04</id>
      <content type="html" xml:base="https://lee989898.github.io/pl-04">&lt;h1 id=&quot;제-4장--프로그래밍-언어&quot;&gt;&lt;strong&gt;제 4장  프로그래밍 언어&lt;/strong&gt;&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;언어 평가 기준과 언어 설계시 기준 간의 균형&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;좋은 프로그래밍 언어가 갖춰야 할 기준은 무엇인가 살펴 보자. ​&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Readability(읽기 쉬움): 프로그램을 읽고 이해하기 쉬운 정
도를 프로그래밍 언어의 readability라고 한다. ​&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Writability(쓰기쉬움): 프로그램을 작성하기 쉬운 정
도를 프로그래밍 언어의 writability라고 한다. ​&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reliability(신뢰성): 프로그램이 다양한 조건 아래
서 ‘원래 하기로 되어 있던’ 일을 수행하는 것을 
reliability라고 한다. 즉, 인풋이 같으면 아웃풋이 같아
야 한다. 만일 인풋이 같은데 조건에 따라 다른 아웃풋을 낸
다면 이 프로그램은 신뢰성이 없는 것이다. ​&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;비용: 프로그램은 학습 비용, 개발 비용(인건비 등 포함)
, 실행 비용 등 여러 가지 비용을 수반한다. 이 모든 비용
이 적으면 좋은 프로그래밍 언어인 것이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;프로그래밍 언어의 Readability를 올리려면 다음과 
같은 특성을 갖는 것이 바람직하다.
 ​&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;첫째, 단순성이다. 만일 프로그래밍 언어가, 언어의 고유 기능과 기본 컨스트럭트(construc
ts; control structure를 의미함)를 비교적 적게 갖고 있으며, ​
고유 기능에 대한 다중성이 적을 수록,   ​
연산의 오버로딩을 최소한으로 허용할 수록 읽기 쉽다.   ​
여기서 다중성이란 동일한 연산을 수행하는 방법이 
여러 가지가 있다는 것을 의미하며,
충돌이 발생할 가능성에 대비하여 프로그래머에 의한 조치가 필요하다. 
이러한 다중성은 객체 지향 언어에서 두드러지는데, ​
C++에서는 허용되지만 Java에서는 허용되지 않는다.   ​
오버로딩은 동일한 이름의 연산을 여러 개 정의하는 것을 의미하고, ​
컴파일할 때 어느 연산을 실행할지 컴파일러가 결정한다. ​&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;둘째, 독립성입니다. ​
독립성이란 컨스트럭트 결합 규칙이 문맥에 대해 
종속되지 않고 독립적인 것을 의미합니다. ​
컨스트럭트 간의 결합 규칙에 예외나 불규칙성이 비교적 적고, ​
모든 결합(combination)이 구문적으로 적
합하고 문맥에 독립적이어야 읽기 쉽습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;구조적 프로그래밍에 필요한 loop, if-then-else, begin
-end와 같은 컨트롤 구조를 충분히 제공하면, ​
프로그램을 위에서 아래로 읽어 내려가면서 이해할 수 있
어서 readability에 기여한다. ​&lt;/p&gt;

&lt;p&gt;데이터 타입과 데이터 구조의 정의 기능 또한 프로그램
의 readability에 기여한다. ​
데이터 타입의 정의를 통해 데이터가 가질 수 있는 값의 범위와 ​
이들 데이터에 허용되는 연산을 이해할 수 있다. ​
데이터 구조의 정의 기능은 다양한 여러 복잡한 데이터 유형을 모아서, ​
새로운 단순한 유형의 데이터를 정의할 수 있는 능력을 프로
그래머에게 제공한다. ​
프로그래머는 이와 같이 복잡한 것을 단순화시킬 수 있어서, ​
프로그램을 쉽게 작성할 수 있는 동시에, 다른 프로그
래머를 쉽게 이해시킬 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Writablility: 프로그래밍 언어의 쓰기쉬움의 주요 평가 기준은 ​
단순성과 독립성, 추상화 지원, 표현력을 들 수 있다. ​
단순성이란 컨스트럭트의 수가 적다는 것을 의미하고, ​
독립성이란 컨스트럭트 결합 규칙이 문맥에 대해 독립적이라는 것을 의미한다. ​
그러나 컨스트럭트 결합 규칙이 문맥에 지나치게 독립적이면, ​
실행시 발생하는 오류를 탐지할 수 없게 될 수도 있다. ​
따라서 독립성은 프로그래밍 언어를 설계할 때 신중하게 고려해야 한다.
 &lt;br /&gt;​
복잡한 구조 또는 연산의 추상화도 프로그래밍 언어의 쓰기쉬움을 평가하는 기준이다. ​
추상화에는 처리 절차의 추상화(서브 프로그램)와 데이터 추상화가 있다.
For loop과 같이 편리한 표현 방식과 같은 표현력 또한 쓰기쉬움 평가의 기준입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reliablitiy:
신뢰성은 타입 검사에 의한 오류 처리, ​
프로그램 실행시에 발생하는 예외 처리, ​
Aliasing(같은 메모리 주소를 다른 이름으로 레퍼런스하는 것), ​
읽기쉬움과 쓰기쉬움 등은 모두 프로그래밍 언어의 신뢰성 평가의 기준이 된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cost: 
학습, 개발, 컴파일 및 실행, 컴파일러 및 인터프리터와 
같은 언어 구현 시스템, 신뢰성, 유지 보수 등 ​
프로그래밍 언어 사용에 관련된 모든 비용은 언어 평가 기준에 속한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이밖에 구현 시스템간의 이식성, 다양한 응용에 대한 적용성, 언어
의 표준화에 의한 완결성 및 정확성, 전력 소비 효율 등도 ​
프로그래밍 언어의 평가 기준이다&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;언어 설계시 이들 모든 평가 기준을 최적화하기는 매우 어렵다. ​
문제 해결에 필요한 기준을 먼저 설정하고 이들 간의 
균형점을 찾는 것이 중요하다. ​&lt;/p&gt;

&lt;p&gt;레퍼런스 변수는 메모리 상에 있는 인스턴스를 가리키는 데 사용되는 변수이다. ​
자바에서는 모든 레퍼런스 변수에 대해, ​
이들이 가리키는 메모리에 대한 인덱싱이 적절한지 검사합니다. ​
이것은 신뢰성을 높여 주지만 매우 높은 실행 비용을 유발한다. ​&lt;/p&gt;

&lt;p&gt;강력한 연산자가 많으면 프로그램 짜기는 쉽지만, ​
읽고 이해하기 어려울 수도 있다. ​&lt;/p&gt;

&lt;p&gt;C++의 포인터는 매우 강력하고 유연하여 쓰기 쉬움을 높여주지만, ​
주의를 기울이지 않으면 신뢰성에 문제를 일으킨다.&lt;/p&gt;

&lt;hr /&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="study" />
      

      
        <summary type="html">제 4장 프로그래밍 언어</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">PL-03</title>
      <link href="https://lee989898.github.io/pl-03" rel="alternate" type="text/html" title="PL-03" />
      <published>2021-10-13T19:18:00+09:00</published>
      <updated>2021-10-13T19:18:00+09:00</updated>
      <id>https://lee989898.github.io/pl-03</id>
      <content type="html" xml:base="https://lee989898.github.io/pl-03">&lt;h1 id=&quot;제-3장--프로그래밍-언어&quot;&gt;&lt;strong&gt;제 3장  프로그래밍 언어&lt;/strong&gt;&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;프로그래밍 언어가 프로그램 설계 방법에 준 영향&lt;/strong&gt;
&lt;br /&gt;&lt;br /&gt;
역사적으로 프로그래밍 언어는 응용의 표현에 적합한 개념이 추가되면서 발전되어 왔으며,  ​
그 개념의 활용에 필요한 프로그램 설계 방법이 개발되었다. ​
이에 대해 간략히 간단히 살펴 보자.&lt;br /&gt;
&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;50년대와 60년대 초반에는 숫자 계산을 주로 수행하는 수치 해석 등 비교적 단순한 응용이 컴퓨팅의 주류를 이루었고, 이들 프로그램은 수식 표현이 용이한 Fortran으로 작성되었다.  이러한 이유로 프로그램 설계 방법은 
기계(컴퓨팅 자원)의 효율적 사용 방법을 찾는데 집중되었다.&lt;br /&gt;
 &lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;60년대 후반에는 프로그램의 데이터 처리 절차가 복잡해지고 타인이 작성
한 프로그램을 이해하고 수정하기가 어려워지면서, 기계의 효율적 
사용보다 프로그래머의 효율(생산성)에 관심이 집중되었다. 따라서
 프로그램의 가독성(readability), 다양한 컨트롤 스트럭처에 의한
표현의 편리성이 언어의 중요한 요소로 인식되고, 이를 지원하는 A
LGOL 언어가 등장했다. 이러한 언어를 통해 구조적 프로그래밍, 
하향식 설계, 단계적 정련 기법 등 프로그래밍 기법 또는 설계 방법
이 개발되었다.  여기서 컨트롤 스트럭처란 if-then, loop, {중
괄호} 등과 같이 인풋의 처리 로직을 표현하는 데 사용되는 구조를 
말한다.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;1970년대 후반에는 데이터의 구조가 복잡해지면서,
 처리 절차 중심의 프로그램 설계에서 데이터 중심의 프
 로그램 설계로 옮겨갔다. 이를 위해 데이터 추상화 기법이 창안되었다
 . 데이터 추상화 기법은 데이터를 구조화하고, 이 데이터에 대한 연산
 을 정의한다. 이와 같은 데이터 추상화 기법은 추상 데이터 타입을 지
 원하는 프로그래밍 언어를 탄생시켰다. 이것이 바로 ALGOL을 발전시
 킨 Pascal의 등장이다. Pascal은 Java가 등장하기 전까지 모든 컴
 퓨터 관련 학과에서 필수 언어로 가르쳤다.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;1980년 중반에 데이터 추상화, 상속(속성, 메소드), 
동적 바인딩을 특징으로 하는 객체 지향 언어가 등장하여
 지금까지 이어오고 있다. C++, Java 등이 대표적인 언
 어로, 이들 특징은 이후의 다른 언어에서도 지원할 수 있
 을 정도로 일반적이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/pl/pl03.png&quot; width=&quot;100%&quot; height=&quot;50%&quot; title=&quot;제목&quot; alt=&quot;프로그래밍언어03&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이 그림은 널리 사용되어 온 프로그래밍 언어의 족보를 보여주고 있다. ​
 많은 언어가 생멸하는 와중에 지속적인 발전이 있었음을 알 수 있다. ​
 눈여겨 볼만한 중요한 언어로는 FORTRAN, COBO
 L, COMMON LISP, Pascal, C, C++, Java 등이다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="study" />
      

      
        <summary type="html">제 3장 프로그래밍 언어</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">PL-02</title>
      <link href="https://lee989898.github.io/pl-02" rel="alternate" type="text/html" title="PL-02" />
      <published>2021-10-13T19:18:00+09:00</published>
      <updated>2021-10-13T19:18:00+09:00</updated>
      <id>https://lee989898.github.io/pl-02</id>
      <content type="html" xml:base="https://lee989898.github.io/pl-02">&lt;h1 id=&quot;제-2장--프로그래밍-언어&quot;&gt;&lt;strong&gt;제 2장  프로그래밍 언어&lt;/strong&gt;&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;왜 PL을 공부하는가?&lt;/strong&gt;
&lt;br /&gt;&lt;br /&gt;
프로그래밍 언어는 알고리즘 또는 계산을 표현하는데 적합하도록 설계된 인공
언어이다.&lt;br /&gt;
프로그램은 알고리즘을 프로그래밍 언어로 코딩한 것으로, 데이터 입력,
입력 데이터 처리, 데이터 출력으로 구성된다.
&lt;br /&gt;&lt;br /&gt;
언어의 특징을 이해하면, 효과적인 알고리즘의 개발 능력과 언어 활용 능력을
개선 할 수 있다.&lt;br /&gt;
대표적인 특성을 예를 들면, 객체지향성, recursion, call by value,
call by reference 등이 있다.&lt;/p&gt;

    &lt;p&gt;응용의 특성에 더욱 적합한 PL을 선택할 수 있게 되고 새로운 언어 학습 능력을
올려주고 새로운 언어를 더욱 쉽게 설계 할 수 있다. 또한 구현 시스템의 중요성을 
이해할 수 있다.
구현 이슈 예로는 아래 두가지가 있다. 구현 이슈에 관한 지식을 활용하면
효율성이 더 좋은 것을 선택할 수 있다. 
&lt;br /&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Recursion과 Loop 중에서 어느 것이 더욱 효율적인가?
&lt;br /&gt;​&lt;/li&gt;
      &lt;li&gt;작은 서브프로그램을 자주 호출하는 것은 좋은 방법인가? ​
        &lt;ul&gt;
          &lt;li&gt;Recursion이나 서브 프로그램 호출 비용에 비해 실행 시간이 너무 짧다면,
성늘을 떨어뜨리기 때문에, Loop을 사용하거나 서브 프로그램을 일정 규모 이상
으로 설계하는 것이 좋다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;응용의 특성에 대한 적절한 PL의 선택의 예&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Fortran
    &lt;ul&gt;
      &lt;li&gt;포트란은 부동점 소수를 4바이트로 표현하고, double precision은 8
바이트로 표한하기 때문에 부동점 소수 계산에 강점이 있다. 또한 데이터 구조로
배열을 지원하며, 2차원 배열로 매트릭스를 표현한다. 이러한 이유들로
숫자 계산을 주로 수행하는 과학 응요에서 사용된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;COBOL
    &lt;ul&gt;
      &lt;li&gt;입출력 데이터는 여러 데이터 필드로 구성된 레코드 구조이며,
 각 필드는 숫자와 문자값을 갖는다. 십진수, 문자를 주로 처리하여 
 비즈니스 응용에 주로 사용된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Lisp
    &lt;ul&gt;
      &lt;li&gt;심볼릭 컴퓨팅을 주로 수행하는 인공 지능 응용에서 주로 사용된다.
 데이터를 링크드 리스트로 표현하며 문자열의 조작에 특화되어 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;PL의 범주에는 세가지가 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;명령/절차적 언어(imperative, procedural)&lt;/li&gt;
  &lt;li&gt;함수적 언어&lt;/li&gt;
  &lt;li&gt;논리적 언어
 etc) 객체지향 언어는 명령/절차적 언어에서 파생된 것으로서, 별도의 범주로 다루지
 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;컴퓨터는 명령어를 받아서 연산을 수행한다. 따라서 프로그래밍은 컴퓨터에게
 절차적 명령어를 보내는 것과 같다.
 아래 코드를 보자.&lt;/p&gt;

&lt;hr /&gt;

&lt;noscript&gt;&lt;pre&gt;int fact(int n) {
  int sofar = 1;
  while (n&amp;gt;0) sofar *= n--;
  return sofar;
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/7c9d341efe4369acac607d2e56a9f3ce.js&quot;&gt; &lt;/script&gt;

&lt;hr /&gt;
&lt;p&gt;fact(n)은 n!을 계산하는 함수이며, 
 함수안에 정의된 sofar는 현재까지 계산된 n!값을 간직하는 변수이다. ​
 While loop을 끝까지 돌려보면 n에서 시작하여 n=1일 때까지 계속 곱셈(*)을 실행한다. ​
 즉, sofar는 1에서 n까지 곱한 결과이다.  ​
 오늘날 모든 컴퓨터는 본 뉴만 아키텍처로 구성되어 있기 때문에, PL은 이 아키텍처를 모방하고 있다. ​
아래 그림이 본 뉴만 아키텍처이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/pl/pl02.png&quot; width=&quot;100%&quot; height=&quot;50%&quot; title=&quot;제목&quot; alt=&quot;프로그래밍언어02&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;본 뉴만 아키텍처 컴퓨터에서는 다음과 같이 프로그램을 실행한다.
메모리는 프로그램과 메모리를 저장하고, CPU는 연산을 수행한다.   ​
프로그램을 실행하려면, 먼저 프로그램과 데이터를 메모리에 저장해야한다.   ​
PC(program counter)를 프로그램의 첫번째 명령어 위치로 초기화하고, ​
PC가 가리키는 명령어를 Control unit(Decoder 포함)에 적재한다. ​
Control unit(Decoder)는 명령어의 의미(무슨 연산을 해야할지)를 해석하고,​
데이터를 레지스터에 적재하여 ALU에서 연산을 수행한다. ​
연산이 끝나면 그 결과를 메모리에 저장하거나 출력 장치로 내보낸다. ​
연산 뿐만 아니라 control structure(loop, if-then, etc)도 PC와 control unit에 의해 통제된다.&lt;/p&gt;

&lt;p&gt;메모리에서 인스트럭션을 CPU로 가져와서 실행하는 반복적인 절차를 Fetch-execute-cycle이라고 한다. ​
Fetch-execution 사이클이 실행하는 인스트럭션은 어셈블리 코드 또는 머신 코드이다. ​
머신 코드는 컴퓨터가 이해할 수 있는 명령어이고, 어셈블리 코드는 머신코드를 기호로 표현한 것이다.​&lt;/p&gt;

&lt;p&gt;Fetch-execution cycle은 다음과 같다. ​&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;PC를 초기화한다. ​&lt;/li&gt;
  &lt;li&gt;PC가 가리키는 명령어를 fetch하고 ​&lt;/li&gt;
  &lt;li&gt;PC를 증가시킨 다음, ​&lt;/li&gt;
  &lt;li&gt;Fetch한 명령어를 decod하여 ​&lt;/li&gt;
  &lt;li&gt;실행한다. ​&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;더 이상 실행할 명령어가 없을 때까지 1~4를 반복적으로 실행한다. ​&lt;/p&gt;

&lt;p&gt;팩토리얼 함수를 예로 들어보자.
여기서는 메모리와 CPU간의 데이터 이동에 대해 살펴보도록 하자.
컴퓨터가 고급언어를 머신코드로 번역하지 않고 이해할 수는 없지만, ​
설명을 위해 고급 언어를 컴퓨터가 직접 이해한다고 가정한다.
변수 sofar과 n은 메모리에서 공간을 잡고 값을 저장하고 있으며, ​
프로그램 코드는 메모리에 저장되어 있다.
PC가 int sofar를 읽어 오면 Control unit은 =을 assignment로 해석하여 sofar에 1을 할당한다. 
PC가 while loop의 sofar *=n–를 읽어 오면 ALU에서 반복적으로 n!을 계산하고,
PC가 return sofar를 읽어 오면 sofar 값을 메모리에 저장한다. ​&lt;/p&gt;

&lt;p&gt;이와 같이 명령/절차적 언어는 본 뉴만 아키텍처에 적합하게 다음과 같이 실행된다.    ​&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;프로그램의 변수는 메모리 셀을 지칭하고, 그 셀에 저장된 값을 대표한다. ​&lt;/li&gt;
  &lt;li&gt;Assignment 문장은 메모리와 CPU 간의 데이터를 이동시킨다. ​&lt;/li&gt;
  &lt;li&gt;연산과 표현식(expression)은 CPU에서 실행된다. ​&lt;/li&gt;
  &lt;li&gt;실행 흐름의 명시적 통제는 프로그램 카운터에 의한다. ​
현재 널리 사용되고 있는 C, C++, Java는 이런 유형의 PL이다. ​&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;명령/절차적 언어는 실행 성능의 최적화를 위한 언어와 하드웨어 간의 효율적 매핑을 허용하지만, ​&lt;br /&gt;
본 뉴만 아키텍처에 의해 제한된다.&lt;/p&gt;

&lt;p&gt;고급어 프로그램은 컴파일러에 의해 어셈블리어 프로그램으로 번역되고 ​
어셈블리어 프로그램은 어셈블러에 의해 기계어 프로그램으로 번역된다. ​
기계어 프로그램은 인터프리터에 의해 ALU 연산으로 해석되어 실행된다.     ​&lt;/p&gt;

&lt;p&gt;어셈블리어 프로그램은 RISC 아키텍처의 인스트럭션을 포함하고 있다. ​
RISC 아키텍처는 인스트럭션 집합을 가능한 줄이고 단순화시켜 성능 개선을 이룩한 사례로 남아 있다. ​&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;함수적 프로그래밍은 수학 함수식과 유사하다. ​
각 서브 프로그램은 함수의 구현이다.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;fun fact x =
  if x &amp;lt;= 0
  then 1 
  else x * fact(x-1);&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/8c70fd99576b6311bb713fd3e2d2cda8.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;코드는 ML 언어로 팩토리얼을 구하는 프로그램을 보여주고 있다. ​
Fact 내에서 fact를 호출하는 Recursion을 사용하고 있다.&lt;/p&gt;

&lt;p&gt;또 다른 함수 언어로 리스프를 들 수 있다.
ML과 달리 변수와 assignment가 없다. ​
이 말은 변수로 인해 고정적으로 소비되는 메모리가 없다는 말이다.
즉, 필요시 동적으로 메모리를 할당하고 계산한다.
ML과 마찬가지로 리커전을 컨트롤 구조로 갖고 있다.
이후 리스프는 변화를 겪으면서 사용되고 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;​로직 프로그래밍은 술어 논리(predicate logic)에 기반하고 있다.
 로직 프로그램은 사실(fact), 규칙(rule), 목표(goal)로 구성되어 있으며, 
 로직 프로그램의 실행은 목표에 사실과 규칙을 적용하여&lt;br /&gt;
 목표가 논리적으로 추론될 수 있는지, 다시 말하면 참인지 거짓인지 증명하는 절차이다.  ​
 이를 위해 추론 엔진이 필요한데, ​
 로직 프로그램의 추론은 resolution reputation에 의한 추론 엔진을 사용한다.
 이 프로그램에서 grandparent(vern, kake)가 추론될 수 있는 살펴보자.​&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fact:  mother(joanne,jake).​
  father(vern,joanne).​
 
rule:  grandparent(X,Z) :- parent(X,Y),​
           parent(Y,Z).​
goal:  grandparent(vern,jake). ​
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;규칙 grandparent(X,Z) :- parent(X,Y), parent(Y,Z)에 X, Z에 각각 vern, jake를 대입하면,  ​
 grandparent(vern,Z) :- parent(X,Y), parent(Y,jake)가 추론된다.
 사실의 mother, father 모두 parent이므로, parent(joanne, jake), parent(vern, joanne)이다. ​&lt;/p&gt;

&lt;p&gt;로직 프로그래밍 언어는 프로그램에 입력 데이터에서 출력 데이터를 생성하는 절차를 서술하는 것이 아니라, ​
 사실과 규칙을 술어 논리로 선언하고, 원하는 것(목표)가 무엇인지 선언한다. ​
 따라서 로직 프로그래밍 언어는 비절차적(선언적)이다.&lt;/p&gt;

&lt;p&gt;로직 프로그래밍은 resolution을 해야 하기 때문에, 매우 비효율적(느리다)이다. ​
 따라서 응용 분야가 대단히 좁다.(DB, AI)  ​ 
 팩토리알 계산하는 프로그램을 봅자.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;fact(X,1) :-  X =:= 1.
fact(X,Fact) :-
  X &amp;gt; 1, NewX is X - 1,
  fact(NewX,NF),
  Fact is X * NF.&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/fca92516fff281d9b22e9c38494280bf.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;보기엔 깔끔해 보일 수 있지만, 레졸루션해서 풀려면 오래걸린다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="study" />
      

      
        <summary type="html">제 2장 프로그래밍 언어</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">PL-01</title>
      <link href="https://lee989898.github.io/pl-01" rel="alternate" type="text/html" title="PL-01" />
      <published>2021-10-13T19:18:00+09:00</published>
      <updated>2021-10-13T19:18:00+09:00</updated>
      <id>https://lee989898.github.io/pl-01</id>
      <content type="html" xml:base="https://lee989898.github.io/pl-01">&lt;h1 id=&quot;제-1장--프로그래밍-언어&quot;&gt;&lt;strong&gt;제 1장  프로그래밍 언어&lt;/strong&gt;&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;프로그래밍 언어란?&lt;/strong&gt;
&lt;br /&gt;&lt;br /&gt;
프로그래밍 언어는 인공적으로 설계된 언어로 컴퓨터가 실행할 수 있는 계산이나
알고리즘을 표현하는 수단이다.
&lt;br /&gt;&lt;br /&gt;
인간의 언어는 타인에게 자신의 생각을 표현하듯이 프로그래밍 언어는
자신의 생각을 컴퓨터에게 표현하는 수단이다.
&lt;br /&gt;&lt;br /&gt;
현재 프로그래밍 언어는 매우 다양할까?&lt;br /&gt;
문제의 특성에 따라, 프로그램이 각기 요구하는 프로그래밍 언어의 표현력이
다르기 때문이다. 표현력은 언어 선택에 있어 매우 중요하다.&lt;/p&gt;

    &lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
문제해결에 적합한 언어를 선택하려면 아래 내용을 숙지해야 한다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;언어가 다르면, 알고리즘의 표현이 어떻게 다른가? ​&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;어떤 언어가 더 적합한가? 언어의 적합성(goodness)을 어떻게 평가할 것인가? ​&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;왜 이렇게 다른 언어가 많은가? ​&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;도대체 프로그래밍 언어가 뭔가? ​&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;프로그래밍 언어의 특성이 왜 이렇게 많은가? ​&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;이들 특성은 어떻게 구현시스템에서 실현되는가?​&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;여기서 구현 시스템이란 컴파일러나 인터프리터 등 PL을 실행할 수 있는 소프트웨어를 말한다. ​&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;프로그래밍 언어의 역사, 신택스 및 시맨틱스, 바인딩, 데이터 타입,
컨트롤 구조, 서브 프로그램, 추상데이터 타입, 캡슐화, 예외 처리,
함수 프로그래밍을 공부할 것이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/pl/pl01.png&quot; width=&quot;100%&quot; height=&quot;50%&quot; title=&quot;제목&quot; alt=&quot;프로그래밍언어01&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;PL의 트렌드에 따른 언어를 살펴보면 다음과 같은 특성을 갖고 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;타입의 안정성을 고려한 언어의 사용 증가: C,C++에 비해 Java, C# 타입이 안정적임&lt;/li&gt;
  &lt;li&gt;웹 응용을 위해 클라이언트 측의 기능성을 갖춘 스크립트 언어&lt;/li&gt;
  &lt;li&gt;신택스 보다 알고리즘의 표현력에 중점을 둔 언어&lt;/li&gt;
  &lt;li&gt;컴파일, 분석, 타입 검사 등 실행 환경과 가상화를 갖춘 언어&lt;/li&gt;
  &lt;li&gt;자동 오류 탐지 및 복구 등 프로그램 분석 능력을 갖춘 언어&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PL에 영향을 미치는 요인을 표현력과 구현 시스템의 효율 측면에서 살펴보면 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;표현력: 응용 도메인의 특성과 프로그래밍 방법을 들 수 있다. &lt;br /&gt;
    다중 프로그래밍은 큰 작업(프로그램)이 여러 개의 작은 작업(서브프로그램)으로
    나뉘어져서 서로 연관성을 가지고 동시에 실행되는 것을 말한다.&lt;br /&gt;
    물론 동시라는 말은 특정 시간에는 작은 작업 하나가 실행되지만, 
    타임 피리어드 동안 여러 개의 작은 프로그램이 
    동시에 처리되는 것으로 보이게 된다.&lt;br /&gt;
    이것은 CPU의 시분할과 메모리의 공간 분할에 의해 이루어진다.
    이렇게 하여 큰 프로그램 하나가 다른 프로그램의 방해없이
    여러 개의 작은 서브프로그램으로 나누어져 처리될 수 있는 것이다.  ​&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;언어 구현 시스템의 효율성: 즉 컴파일러나 인터프리터의 성능을 말한다.&lt;br /&gt;
    컴파일러나 인터프리터의 성능은 주로 컴퓨터 구조, OS, 관련 도구, 라이브러리 등에 달려 있다.    ​
    편의성은 비용을 수반한다. 추상적 관점을 지원하면 편의성은 좋아지지만, 이것을 머신에 
    표현하는데는 나름의 비용이 들어간다.   이러한 사실을 고려하여 편의성과 비용간에 균형을 잡는 것이 
    중요하다.   ​&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="study" />
      

      
        <summary type="html">제 1장 프로그래밍 언어</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">PL-05</title>
      <link href="https://lee989898.github.io/pl-05" rel="alternate" type="text/html" title="PL-05" />
      <published>2021-10-13T19:18:00+09:00</published>
      <updated>2021-10-13T19:18:00+09:00</updated>
      <id>https://lee989898.github.io/pl-05</id>
      <content type="html" xml:base="https://lee989898.github.io/pl-05">&lt;h1 id=&quot;제-5장--프로그래밍-언어&quot;&gt;&lt;strong&gt;제 5장  프로그래밍 언어&lt;/strong&gt;&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;프로그래밍 언어의 구현 시스템&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;프로그래밍 언어의 각 특징과 컨스트럭트들이 ​
어떻게 구현되는지 이해하는 것은 매우 중요하다. ​
PL 컨스트럭트의 구현은 고급 언어를 어셈블리 언어와 같은 
하위 언어로 번역한다.&lt;br /&gt;
  ​
프로그램의 문장을 번역하는 것을 컴파일이라고 하고, ​
문장을 의미에 적합하게 매핑하는 것을 인터프리테이션이라고 한다. ​&lt;/p&gt;

&lt;p&gt;이와 같은 구현 시스템에 대해 왜 알아야 할까? ​
 컨스트럭트가 효율적으로 구현되고 있는지, ​
 더 좋은 구현 방법이 있는지, ​
  이들간의 절충점이 있는지 등을 알아내기 위함이다.&lt;/p&gt;

&lt;p&gt;컴파일 방법은 컴파일러를 써서 고급 언어로 짠 
 프로그램을 기계 언어로 번역한다.
 컴파일 프로세스는 어휘 분석, 구문 분석, 의
 미 분석, 코드 생성, 링크 및 적재 단계로 구성되어 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/pl/pl04.png&quot; width=&quot;100%&quot; height=&quot;50%&quot; title=&quot;제목&quot; alt=&quot;프로그래밍언어05&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;위 그림은 컴파일러의 구성요소와 이들 요소간의 처
리 순서에 의한 컴파일 과정을 ​
플로우 차트로 보여주고 있다. ​&lt;/p&gt;

&lt;p&gt;어휘 분석기(lexical analyzer)는 소스 프로그램의 글
자들을 어휘 단위로 모아 놓는다. ​
프로그램의 어휘 단위는 변수, 키워드, 연산자 등을 의미한다.&lt;/p&gt;

&lt;p&gt;구문 분석기(syntax analyzer)는 어휘 단위를 받아서 파스 트리를 생성한다. ​
파스 트리는 프로그램의 구문 구조를 나타낸다. ​&lt;/p&gt;

&lt;p&gt;중간 코드 생성기는 소스 프로그램과 기계 코드
 사이의 중간 수준의 언어로 작성된 프로그램을 생성한다. ​
중간 언어로 어셈블리 어가 쓰이기도 하고, 이보다 
조금 더 고급 수준의 언어가 사용되기도 한다. ​&lt;/p&gt;

&lt;p&gt;의미 분석기(semantic analyzer)는 중간 코드 생성기(i
ntermediate code generator)의 일부분으로 통합되어 있으며, ​
구문 분석시에 탐지되지 않는 타입 오류 등을 검사한다. ​&lt;/p&gt;

&lt;p&gt;최적화 단계는 중간 코드의 프로그램을 좀더 작고 빠르게 만든다. ​
기계 언어보다 중간 코드를 최적화하는 이유는 기계 코드가 
바이너리 형태이기 때문에​ 중간코드(알파벳으로 표현된)에 비해 최
적화가 더 어렵기 때문이다. ​&lt;/p&gt;

&lt;p&gt;코드 생성기는 중간 코드를
받아서 컴퓨터가 직접 실행할 수 있는 기계 언어로 변환한다. ​&lt;/p&gt;

&lt;p&gt;심볼 테이블은 소스 프로그램내의 변수의 타입과 속성(길이 
등)을 저장하고 있다. 이들 정보는 어휘 분석기와 구문
 분석기에 의해 심볼 테이블에 저장되고, 의미 분석기와 중간 코
 드 생성기 및 코드 생성기에 의해 사용된다. ​&lt;/p&gt;

&lt;p&gt;이렇게 컴파일된 사용자 코드는 실행 시 시스템 코드를 호출하여 ​
시스템 소프트웨어의 도움을 받는다. ​&lt;/p&gt;

&lt;p&gt;이를 위해 실행 직전에 사용자 코드와 시스템 코드를 링크(연결)한다. ​
이 과정을 linking 또는 linking and loading이라고 하고, ​
이러한 역할을 하는 시스템 소프트웨어를 linker라고 한다. ​
링킹에 의해 생성된 것을 executable image(실행 이미지)
 또는 load module(적재 모듈)이라고 한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/pl/pl05.png&quot; width=&quot;50%&quot; height=&quot;25%&quot; title=&quot;제목&quot; alt=&quot;프로그래밍언어05&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;인터프리터는 프로그램을 기계 언어로 번역하지 않고, ​
문장의 의미에 적합하게 시뮬레이션하여 결과를 낸다. ​&lt;/p&gt;

&lt;p&gt;따라서 인터프러터는 고급 언어 처리를 위한 시뮬레이터 또는 ​
고급언어를 기계어처럼 처리하는 가상 머신의 역할을 한다. ​&lt;/p&gt;

&lt;p&gt;인터프리터의 장점은, 프로그램의 실행 오류 발생시, ​
소스 프로그램의 몇번 라인에서 오류가 발생했는지 오
류 메시지가 알려주기 때문에 ​
프로그램 개발에 매우 편리한다. ​&lt;/p&gt;

&lt;p&gt;단점은 컴파일 코드에 비해 10-100배 느리다는 것이며, ​
프로그램의 인터프리테이션 동안에 심볼 테이블이 메모리에
 적재되어 있어야 하기 때문에 ​
메모리 공간을 많이 차지한다는 것이다. ​&lt;/p&gt;

&lt;p&gt;인터프리터를 이용하는 대표적인 언어
로 자바스크립트, PHP, 파이썬 등이 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/pl/pl06.png&quot; width=&quot;50%&quot; height=&quot;25%&quot; title=&quot;제목&quot; alt=&quot;프로그래밍언어05&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;하이브리드 방식은 먼저 컴파일을 해서 중간 코드를 생성한 다음에, ​
중간 코드를 인터프리터에 의해 실행한다. ​&lt;/p&gt;

&lt;p&gt;자바에서는 자바 가상 머신에서 실행되는 바이트 코드를 중간 코드로 생성한다.  ​
바이트 코드는 이진 코드지만 CPU가 아닌 자바 가상 머신이 이해할 수 
있는 언어이다.​&lt;/p&gt;

&lt;p&gt;자바 가상 머신은 바이트 코드 명령어를 하나씩 읽어 들여 실행한다. ​&lt;/p&gt;

&lt;p&gt;이와 같이 중간 코드를 생성하여 자바 가상 머신으로 실행하면, ​
하드웨어의 특이 사항에 제한을 받지 않아서 portability가 높
은 장점이 있다. ​&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;​   &lt;img src=&quot;/assets/built/images/pl/pl07.png&quot; width=&quot;100%&quot; height=&quot;50%&quot; title=&quot;제목&quot; alt=&quot;프로그래밍언어05&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;클래스 및 변수를 선언하고 초기화하는 자바 소스 프로그램을 바
이트 코드로 번역한 예는 위와 같다. ​
빨간색 박스를 눈여겨 보시기 보자. ​
메모리에 위치를 잡고, 초기화 함수를 호출하거나 조작하고 반환한다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;​&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="study" />
      

      
        <summary type="html">제 5장 프로그래밍 언어</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">클래스의 상속</title>
      <link href="https://lee989898.github.io/kotlin-10" rel="alternate" type="text/html" title="클래스의 상속" />
      <published>2021-09-25T01:07:00+09:00</published>
      <updated>2021-09-25T01:07:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-10</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-10">&lt;h1 id=&quot;클래스의-상속&quot;&gt;클래스의 상속&lt;/h1&gt;

&lt;hr /&gt;

&lt;noscript&gt;&lt;pre&gt;fun main() {
    var intValue:Int = 1234
    var LongValue:Long = 1234L
    var intValueByHex:Int = 0x1af
    var intValueByBin:Int = 0b10110110
    
    var doubleValue:Double = 123.5
    var doubleValueWithExp: Double = 123.5e10
    var floatValue:Float = 123.5f
    
    var charValue: Char = &amp;#39;a&amp;#39;
    var koreanCharValue: Char = &amp;#39;가&amp;#39;
    
    var booleanValue: Boolean = true
    
    var stringValue = &amp;quot;one line string test&amp;quot;
    
    val multiLineStringValue = &amp;quot;&amp;quot;&amp;quot;multiline
    string
    test&amp;quot;&amp;quot;&amp;quot;
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/c6ccc4221fdbd96eae8b91fa55199f92.js&quot;&gt; &lt;/script&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">클래스의 상속</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">클래스의 생성</title>
      <link href="https://lee989898.github.io/kotlin-09" rel="alternate" type="text/html" title="클래스의 생성" />
      <published>2021-09-25T01:07:00+09:00</published>
      <updated>2021-09-25T01:07:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-09</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-09">&lt;h1 id=&quot;클래스의-생성&quot;&gt;클래스의 생성&lt;/h1&gt;

&lt;hr /&gt;

&lt;noscript&gt;&lt;pre&gt;fun main() {
    var intValue:Int = 1234
    var LongValue:Long = 1234L
    var intValueByHex:Int = 0x1af
    var intValueByBin:Int = 0b10110110
    
    var doubleValue:Double = 123.5
    var doubleValueWithExp: Double = 123.5e10
    var floatValue:Float = 123.5f
    
    var charValue: Char = &amp;#39;a&amp;#39;
    var koreanCharValue: Char = &amp;#39;가&amp;#39;
    
    var booleanValue: Boolean = true
    
    var stringValue = &amp;quot;one line string test&amp;quot;
    
    val multiLineStringValue = &amp;quot;&amp;quot;&amp;quot;multiline
    string
    test&amp;quot;&amp;quot;&amp;quot;
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/c6ccc4221fdbd96eae8b91fa55199f92.js&quot;&gt; &lt;/script&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">클래스의 생성</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">형변환과 배열</title>
      <link href="https://lee989898.github.io/kotlin-03" rel="alternate" type="text/html" title="형변환과 배열" />
      <published>2021-09-25T01:07:00+09:00</published>
      <updated>2021-09-25T01:07:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-03</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-03">&lt;h1 id=&quot;형변환과-배열&quot;&gt;형변환과 배열&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;형변환&quot;&gt;형변환&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;형변환은 하나의 변수에 지정된 자료형을 
호환되는 다른 자료형으로 변경하는 기능입니다&lt;/p&gt;

&lt;p&gt;코틀린은 형변환시 발생할 수 있는 오류를 막기 위해 자동으로 형변환 
해주는 암시적 형변환은 지원하지 않습니다&lt;/p&gt;

&lt;p&gt;명시적 형변환은 변환될 자료형을 개발자가 직접 지정하는 것입니다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;형변환 함수
    &lt;ul&gt;
      &lt;li&gt;toByte()&lt;/li&gt;
      &lt;li&gt;toShort()&lt;/li&gt;
      &lt;li&gt;toInt()&lt;/li&gt;
      &lt;li&gt;toLong()&lt;/li&gt;
      &lt;li&gt;toFloat()&lt;/li&gt;
      &lt;li&gt;toDouble()&lt;/li&gt;
      &lt;li&gt;toChar()&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;noscript&gt;&lt;pre&gt;fun main() {
    var a: Int = 54321
    var b: Long = a.toLong()
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/c96b8a54be145f7b4b07f03f4e1336e6.js&quot;&gt; &lt;/script&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;배열&quot;&gt;배열&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;배열은 내부적으로 Array&lt;T&gt; 클래스로 제공되는 기능입니다&lt;/T&gt;&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;fun main() {
    
    var intArr = arrayOf(1,2,3,4,5)
    
    val nullArr = arrayOfNulls&amp;lt;Int&amp;gt;(5) //비어있는 배열 만들기
    
    intArr[2] = 8
    
    println(intArr[4])
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/6e915687a4c5bcea20ac0c89e590ce74.js&quot;&gt; &lt;/script&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">형변환과 배열</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">타입추론과 함수</title>
      <link href="https://lee989898.github.io/kotlin-04" rel="alternate" type="text/html" title="타입추론과 함수" />
      <published>2021-09-25T01:07:00+09:00</published>
      <updated>2021-09-25T01:07:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-04</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-04">&lt;h1 id=&quot;타입추론과-함수&quot;&gt;타입추론과 함수&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;타입추론&quot;&gt;타입추론&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;타입추론은 변수나 함수들을 선언할 때나 연산이 이루어 질 떄
자료형을 코드에 명시하지 않아도 코틀린이 자동으로 자료형을 추론해주는
기능입니다&lt;/p&gt;

&lt;p&gt;변수가 선언될 때 할당된 값의 형태로 해당 변수가 어떤 자료형을 가지는지 
추론이 가능하기 때문입니다&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;fun main() {
    
   var a = 1234
   var b = 1234L
   
   var c = 12.45
   var d = 12.45f
    
   var e = 0xABCD
   var f = 0b01010101
    
   var g = true
   var h = &amp;#39;c&amp;#39;
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/425656230beda11e903155fee1a0eb07.js&quot;&gt; &lt;/script&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;함수&quot;&gt;함수&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;함수는 특정한 동작을 하거나 원하는 결과값을 연산하는데 사용합니다.&lt;/p&gt;

&lt;p&gt;함수안에서 return은 뒤에 오는 값을 반환하는 키워드로 return이 발생하면
함수의 중간이더라도 값을 반환하고 함수를 종료합니다&lt;/p&gt;

&lt;p&gt;코틀린은 함수를 좀 더 간단하게 기술할 수
 있도록 단일 표현식 함수를 지원합니다&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;fun main() {
    
    println(add(5,6,7))
   
}

fun add(a: Int, b: Int, c: Int): Int{
    return a+b+c    
}

fun add(a: Int, b: Int, c: Int) = a + b + c //위 함수와 동일합니다&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/9e247743b379a5df3a1bc54a6c16124f.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;코틀린에서 함수는 내부적으로 기능을 가진 형태이지만 외부에서
볼 때는 파라미터를 넣는다는 점 외에는 자료형이 결정된 변수라는 개념으로
접근합니다&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">타입추론과 함수</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">조건문과 비교연산자</title>
      <link href="https://lee989898.github.io/kotlin-05" rel="alternate" type="text/html" title="조건문과 비교연산자" />
      <published>2021-09-25T01:07:00+09:00</published>
      <updated>2021-09-25T01:07:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-05</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-05">&lt;h1 id=&quot;조건문과-비교연산자&quot;&gt;조건문과 비교연산자&lt;/h1&gt;

&lt;hr /&gt;

&lt;noscript&gt;&lt;pre&gt;fun main() {
    var intValue:Int = 1234
    var LongValue:Long = 1234L
    var intValueByHex:Int = 0x1af
    var intValueByBin:Int = 0b10110110
    
    var doubleValue:Double = 123.5
    var doubleValueWithExp: Double = 123.5e10
    var floatValue:Float = 123.5f
    
    var charValue: Char = &amp;#39;a&amp;#39;
    var koreanCharValue: Char = &amp;#39;가&amp;#39;
    
    var booleanValue: Boolean = true
    
    var stringValue = &amp;quot;one line string test&amp;quot;
    
    val multiLineStringValue = &amp;quot;&amp;quot;&amp;quot;multiline
    string
    test&amp;quot;&amp;quot;&amp;quot;
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/c6ccc4221fdbd96eae8b91fa55199f92.js&quot;&gt; &lt;/script&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">조건문과 비교연산자</summary>
      

      
      
    </entry>
  
</feed>
