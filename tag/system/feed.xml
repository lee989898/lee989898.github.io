<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://lee989898.github.io/tag/system/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://lee989898.github.io/" rel="alternate" type="text/html" />
  <updated>2021-11-06T16:27:18+09:00</updated>
  <id>https://lee989898.github.io/tag/system/feed.xml</id>

  
  
  

  
    <title type="html">LEE | </title>
  

  
    <subtitle>공부 블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">프로세스통신-pipe</title>
      <link href="https://lee989898.github.io/st-08" rel="alternate" type="text/html" title="프로세스통신-pipe" />
      <published>2021-10-31T01:06:00+09:00</published>
      <updated>2021-10-31T01:06:00+09:00</updated>
      <id>https://lee989898.github.io/st-08</id>
      <content type="html" xml:base="https://lee989898.github.io/st-08">&lt;h3 id=&quot;프로세스통신-pipe&quot;&gt;&lt;strong&gt;프로세스통신-pipe&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="system" />
      

      
        <summary type="html">프로세스통신-pipe</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Signal</title>
      <link href="https://lee989898.github.io/st-07" rel="alternate" type="text/html" title="Signal" />
      <published>2021-10-27T01:06:00+09:00</published>
      <updated>2021-10-27T01:06:00+09:00</updated>
      <id>https://lee989898.github.io/st-07</id>
      <content type="html" xml:base="https://lee989898.github.io/st-07">&lt;h3 id=&quot;signal&quot;&gt;&lt;strong&gt;Signal&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="system" />
      

      
        <summary type="html">Signal</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Process_Control</title>
      <link href="https://lee989898.github.io/st-06" rel="alternate" type="text/html" title="Process_Control" />
      <published>2021-10-20T01:06:00+09:00</published>
      <updated>2021-10-20T01:06:00+09:00</updated>
      <id>https://lee989898.github.io/st-06</id>
      <content type="html" xml:base="https://lee989898.github.io/st-06">&lt;h3 id=&quot;process-control&quot;&gt;&lt;strong&gt;Process Control&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;exec&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;프로세스가 exec 함수 중 하나를 호출할 때&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;프로세스는 새 프로그램으로 완전히 대체된다. 텍스트, 데이터, 힙 및 스택 세그먼트를 부모의 주소 공간에 로드한다.&lt;/li&gt;
  &lt;li&gt;새 program은 main function에서 시작한다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;새 program은 caller와 동일한 PID를 사용한다.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;unistd.h&amp;gt;
main()
{ printf(&quot;execiton ls\n&quot;)};
execl(&quot;/bin/ls&quot;,&quot;ls&quot;,&quot;-l&quot;, (char *)0);
perror(&quot;execl failed to run ls\n&quot;);
exit(1);}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;exec: Program Execution&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;프로세스 실행을 맡고 있는 시스템 콜은 execve()이다&lt;/li&gt;
  &lt;li&gt;같은 기능을 하면서 라이브러리 함수로 분류되어 있는것으로 execv(), execvp(), execle(), execl(), execlp()가 있다 ​&lt;/li&gt;
  &lt;li&gt;이 6가지를 합쳐서 exec()시스템 콜이라 부른다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;exec() 이후에 오는 문자에 의해 구별되는 표시는 다음의 의미가 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;l -&amp;gt; argv 정보를 개개의 문자열 데이터를 가르키는 포인터 arg0,arg1……. argn으로 전달한다&lt;/li&gt;
  &lt;li&gt;v -&amp;gt; argv 정보를 개개의 문자열 데이터를 가리키는 포인터 배열의 ​
선두주소 argv로 전달한다​&lt;/li&gt;
  &lt;li&gt;e -&amp;gt; envp 정보를 전달한다​&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;p -&amp;gt; p를 사용하는 경우, 실행할 파일이름을 환경 변수 PATH로 지정한 디렉토리 안에서 찾아내어 실행한다​&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;unistd.h&amp;gt;

int execl(const char *path, const char *arg0, ... *argn,
(char *)0);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;path: 실행 가능한 파일 경로&lt;/li&gt;
  &lt;li&gt;arg0~argn: 파일에 전달한 argv 정보(명령 인수)&lt;/li&gt;
  &lt;li&gt;(char*)0: 마지막임을 알리는 표시로 NULL 포인터&lt;/li&gt;
  &lt;li&gt;리턴값: 에러시 -1&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;execl.c&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;unistd.h&amp;gt;

main(int argc, char *argv[]){
    execl(&quot;/bin/ls&quot;,&quot;ls&quot;,argv[1],(char *)0);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;execv.c&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;unistd.h&amp;gt;
main(){
    char *av[3];

    av[0]=&quot;ls&quot;;
    av[1]=&quot;-1&quot;;
    av[2]=(char *)0;

    execv(&quot;/bin/ls&quot;,av);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;execle()&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; #include &amp;lt;unistd.h&amp;gt;

 int execle(const char *path, const char *arg0...*argn,
                    (char *)0, char *const envp[]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;path: 파일의 경로명&lt;/li&gt;
  &lt;li&gt;arg0 ~ argn: 파일에 전달한 argv 정보(명령 인수)&lt;/li&gt;
  &lt;li&gt;envp[]: envp 정보(환경변수)&lt;/li&gt;
  &lt;li&gt;리턴 값: 에러시 -1&lt;/li&gt;
  &lt;li&gt;execl()에 환경 변수 정보를 전달하는 기능을 추가한 것&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;execve()&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;unistd.h&amp;gt;

int execve(const char* path, char *const argv[],
                char *const envp[]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;path: 파일의 경로명&lt;/li&gt;
  &lt;li&gt;argv: 파일에 전달한 argv 정보(명령 인수)&lt;/li&gt;
  &lt;li&gt;envp[]: envp 정보(환경변수)&lt;/li&gt;
  &lt;li&gt;리턴 값: 에러시 -1&lt;/li&gt;
  &lt;li&gt;execv()에 환경 변수 정보를 전달하는 기능을 추가한 것&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;execlp()&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;unistd.h&amp;gt;

int execlp(const char *file, const char *arg0, .... *argn);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;file: 실행하는 파일의 파일 이름&lt;/li&gt;
  &lt;li&gt;arg0 ~ argn: 파일에 전달한 argv 정보(명령 인수)&lt;/li&gt;
  &lt;li&gt;리턴 값: 에러시 -1&lt;/li&gt;
  &lt;li&gt;execlp()는 첫 번째 인자 file에서 지정한 파일 이름을 환경 변수 PATH에서 지정하고 있는 디렉토리 안에서 찾아 실행한다&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;execvp()&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;unistd.h&amp;gt;

int execvp(const char *file, char *const argv[]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;file: 실행하는 파일의 파일 이름&lt;/li&gt;
  &lt;li&gt;argv: 파일에 전달한 argv 정보(명령 인수)&lt;/li&gt;
  &lt;li&gt;리턴 값: 에러시 -1&lt;/li&gt;
  &lt;li&gt;execlp()는 첫 번째 인자 file에서 지정한 파일 이름을 환경 변수 PATH에서 지정하고 있는 디렉토리 안에서 찾아 실행한다&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Race Conditions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;여러 프로세스가 일부 데이터를 공유&lt;/li&gt;
  &lt;li&gt;결과는 실행 순서(예: RACE)에 따라 다르다&lt;/li&gt;
  &lt;li&gt;fork() 후에는 부모 또는 자식이 먼저 실행되는지 예측할 수 없다&lt;/li&gt;
  &lt;li&gt;실행 순서는 다음에 따라 다르다
    &lt;ul&gt;
      &lt;li&gt;시스템 부하&lt;/li&gt;
      &lt;li&gt;커널의 스케줄링 알고리즘&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Race condition 문제는 대부분의 시간 작동하기 때문에 감지하기 어렵다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;after fork
    &lt;ul&gt;
      &lt;li&gt;parent,child 모두 스스로 무언가를 한다&lt;/li&gt;
      &lt;li&gt;예를 들어 parent: 로그 파일에 기록 쓰기&lt;/li&gt;
      &lt;li&gt;예를 들어 child: 로그 파일 생성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;parent,child는 다음을 수행해야 한다
    &lt;ul&gt;
      &lt;li&gt;초기 작업 세트가 완료되면 서로 알리고&lt;/li&gt;
      &lt;li&gt;서로 완료될 때까지 기다린다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;system()&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;

int system(const char *cmdstring);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;문자열이 터미널에서 명령으로 입력된 것처럼 문자열이 sh(1)에 입력으로 제공한다. ex) system(“date &amp;gt; file”);&lt;/li&gt;
  &lt;li&gt;fork, exec 및 waitpid를 호출하여 시스템을 구현한다.&lt;/li&gt;
  &lt;li&gt;반환 값:
    &lt;ul&gt;
      &lt;li&gt;-1 with errno: fork 또는 waitpid 실패&lt;/li&gt;
      &lt;li&gt;127 : 실행 실패&lt;/li&gt;
      &lt;li&gt;쉘 종료 상태: 3개 모두 성공&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Process Times&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;sys/times.h&amp;gt;

clock_t times(struct tms *buf);

struct tms(
    clock_t tms_utime;
    clock_t tms_stime;
    clock_t tms_cutime;
    clock_t tms_cstime;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;wall clock time: 프로세스가 실행되는 데 걸리는 시간이며 시스템 부하에 따라 다르다.
    &lt;ul&gt;
      &lt;li&gt;반환된 wall clock time의 시간은 과거의 임의의 지점에서 측정된다. 상대 값을 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사용자 CPU 시간: 사용자 지침에 기인&lt;/li&gt;
  &lt;li&gt;시스템 CPU 시간: 프로세스를 대신하여 실행될 때 커널에 귀속됨&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="system" />
      

      
        <summary type="html">Process Control</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Process</title>
      <link href="https://lee989898.github.io/st-05" rel="alternate" type="text/html" title="Process" />
      <published>2021-10-06T01:06:00+09:00</published>
      <updated>2021-10-06T01:06:00+09:00</updated>
      <id>https://lee989898.github.io/st-05</id>
      <content type="html" xml:base="https://lee989898.github.io/st-05">&lt;h3 id=&quot;process&quot;&gt;&lt;strong&gt;Process&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="system" />
      

      
        <summary type="html">Process</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">File 조작</title>
      <link href="https://lee989898.github.io/st-04" rel="alternate" type="text/html" title="File 조작" />
      <published>2021-09-24T01:06:00+09:00</published>
      <updated>2021-09-24T01:06:00+09:00</updated>
      <id>https://lee989898.github.io/st-04</id>
      <content type="html" xml:base="https://lee989898.github.io/st-04">&lt;h3 id=&quot;file-조작&quot;&gt;&lt;strong&gt;File 조작&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="system" />
      

      
        <summary type="html">File 조작</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">File IO</title>
      <link href="https://lee989898.github.io/st-03" rel="alternate" type="text/html" title="File IO" />
      <published>2021-09-15T01:06:00+09:00</published>
      <updated>2021-09-15T01:06:00+09:00</updated>
      <id>https://lee989898.github.io/st-03</id>
      <content type="html" xml:base="https://lee989898.github.io/st-03">&lt;h3 id=&quot;file-io&quot;&gt;&lt;strong&gt;File IO&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;open()&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;open()은 버퍼 공간을 확보하여 파일을 읽거나 쓸 때 사용한다&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파일이 존재하지 않을 경우 open()에 의해 새로운 파일이 만들어지기도 한다&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/stat.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;

int open(const char *pathname, int flags);
int open(const char *pathname, int flags, mode_t mode);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;pathname: 경로(path)명을 포함한 파일의 이름 또는 장치 이름&lt;/li&gt;
  &lt;li&gt;flag: 파일 상태 플래그
    &lt;ul&gt;
      &lt;li&gt;파일을 열 때 취해지는 구체적 행동을 기술한다&lt;/li&gt;
      &lt;li&gt;파일 액세스 flag와 선택적인 flag의 OR 연산으로 나타낸다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;파일 액세스 flag: 다음 중 하나만 사용할 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;모드(값,8진수)&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;O_RDONLY(00)&lt;/td&gt;
      &lt;td&gt;읽기 전용으로 열기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;O_WRONLY(01)&lt;/td&gt;
      &lt;td&gt;쓰기 전용으로 열기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;O_RDWR(02)&lt;/td&gt;
      &lt;td&gt;읽기/쓰기용으로 열기&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;선택적인 flag:&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;제목&lt;/th&gt;
      &lt;th&gt;내용&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;테스트1&lt;/td&gt;
      &lt;td&gt;테스트2&lt;/td&gt;
      &lt;td&gt;테스트3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;테스트1&lt;/td&gt;
      &lt;td&gt;테스트2&lt;/td&gt;
      &lt;td&gt;테스트3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;테스트1&lt;/td&gt;
      &lt;td&gt;테스트2&lt;/td&gt;
      &lt;td&gt;테스트3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;mode:
    &lt;ul&gt;
      &lt;li&gt;mode_t 타입(unsigned int)&lt;/li&gt;
      &lt;li&gt;새로운 파일을 만들 대만 필요&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;리턴 값: 파일 디스크립터 값 또는 -1(open()이 실패할 경우)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;close()&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;creat()&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="system" />
      

      
        <summary type="html">File IO</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">File</title>
      <link href="https://lee989898.github.io/st-02" rel="alternate" type="text/html" title="File" />
      <published>2021-09-08T01:06:00+09:00</published>
      <updated>2021-09-08T01:06:00+09:00</updated>
      <id>https://lee989898.github.io/st-02</id>
      <content type="html" xml:base="https://lee989898.github.io/st-02">&lt;h3 id=&quot;file&quot;&gt;&lt;strong&gt;File&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;File Structure&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Tree 구조&lt;/li&gt;
  &lt;li&gt;계층 구조&lt;/li&gt;
  &lt;li&gt;Three types: 일반 file(네모), directory file(동그라미), divice file(역삼각형) &lt;img src=&quot;/assets/built/images/st/st03.png&quot; width=&quot;50%&quot; height=&quot;25%&quot; title=&quot;제목&quot; alt=&quot;시스템프러그래밍&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;File Types&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;일반 파일
    &lt;ul&gt;
      &lt;li&gt;데이터를 포함하고 있는 텍스트 또는 이진 파일&lt;/li&gt;
      &lt;li&gt;트리 구조의 잎에 해당&lt;/li&gt;
      &lt;li&gt;Stream file (collection of bytes)임&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;디렉토리 파일
    &lt;ul&gt;
      &lt;li&gt;자기 자신도 하나의 파일&lt;/li&gt;
      &lt;li&gt;상위 디렉토리에 등록되어 있음(트리 구조를 이룸)&lt;/li&gt;
      &lt;li&gt;파일의 이름들과 파일 정보에 대한 포인터들을 포함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;디바이스 파일
    &lt;ul&gt;
      &lt;li&gt;시스템에 접속하는 주변 기기나 메모리, 등의 장치 각각에 대응하는 특수 파일&lt;/li&gt;
      &lt;li&gt;/dev 디렉토리에서 관리&lt;/li&gt;
      &lt;li&gt;Special file 이라고 부름
        &lt;ul&gt;
          &lt;li&gt;Character special file과 block special file로 나뉨&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Stream file임
        &lt;ul&gt;
          &lt;li&gt;사용자 프로그램 내에서 일반 파일과 같은 입출력 명령으로 처리&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;디바이스 파일의 종류
        &lt;ul&gt;
          &lt;li&gt;문자 특수 파일(Character special file)
            &lt;ul&gt;
              &lt;li&gt;문자 단위로 데이터를 처리하는 장치에 해당하는 파일&lt;/li&gt;
              &lt;li&gt;Treminal, printer, …&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;블럭 특수 파일(block special file)
            &lt;ul&gt;
              &lt;li&gt;블럭 단위로 데이터를 처리하는 장치에 해당하는 파일&lt;/li&gt;
              &lt;li&gt;Disk, magnetic tape&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;File Name&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;File name
    &lt;ul&gt;
      &lt;li&gt;같은 이름의 파일은 다른 디렉토리에 존재한다&lt;/li&gt;
      &lt;li&gt;구별하기 위해서 “path” 이름이 필요하다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Path name
    &lt;ul&gt;
      &lt;li&gt;Relative path: from .&lt;/li&gt;
      &lt;li&gt;Absolute path: from /&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Home directory: ~&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;File Info&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;%ls -la&lt;br /&gt;
합계 180&lt;br /&gt;
drwx——    4 mhlee    mhlee        4096  3월 23 14:19 C2​&lt;br /&gt;
drwx——    4 mhlee    mhlee        4096  3월 25 17:10 SUBMIT​&lt;br /&gt;
-rwxrwxr-x   1 mhlee    mhlee      11888   9월  5 10:35 a.out&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;u&gt;d&lt;/u&gt; &lt;u&gt;rwx&lt;/u&gt; &lt;u&gt;rwx&lt;/u&gt; &lt;u&gt;rwx&lt;/u&gt;​
    &lt;ul&gt;
      &lt;li&gt;d: directory file​&lt;/li&gt;
      &lt;li&gt;-: 일반 file​&lt;/li&gt;
      &lt;li&gt;l: symbolic link​&lt;/li&gt;
      &lt;li&gt;b: block device file​&lt;/li&gt;
      &lt;li&gt;c: char device file​&lt;/li&gt;
      &lt;li&gt;p: named pipe (FIFO)​&lt;/li&gt;
      &lt;li&gt;s: socket​&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;rwx
    &lt;ul&gt;
      &lt;li&gt;Read&lt;/li&gt;
      &lt;li&gt;Write&lt;/li&gt;
      &lt;li&gt;Execute&lt;/li&gt;
      &lt;li&gt;-: no permission&lt;/li&gt;
      &lt;li&gt;Owner
        &lt;ul&gt;
          &lt;li&gt;User, Group, Other&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;chmod
    &lt;ul&gt;
      &lt;li&gt;Whom: u,g,o,a&lt;/li&gt;
      &lt;li&gt;What: r,w,x&lt;/li&gt;
      &lt;li&gt;How: +,-&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;chown&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;chgrp&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;File System 소개&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Disk
    &lt;ul&gt;
      &lt;li&gt;Collection of contiguous block&lt;/li&gt;
      &lt;li&gt;Sector, track, cylinder&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;논리적인 디스크로 나누어서 사용한다&lt;/li&gt;
  &lt;li&gt;각각의 파티션에 대응되는 디바이스 파일이 있다 &lt;img src=&quot;/assets/built/images/st/st04.png&quot; width=&quot;50%&quot; height=&quot;25%&quot; title=&quot;제목&quot; alt=&quot;시스템프러그래밍&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Root file system
    &lt;ul&gt;
      &lt;li&gt;OS가 동작하는데 필요한 최소한의 file과 directory들로 이루어짐&lt;/li&gt;
      &lt;li&gt;Kernel system file, /bin,/etc,/lib,/dev&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Swap file system
    &lt;ul&gt;
      &lt;li&gt;적어도 DRAM사이즈에 두배 이상이다&lt;/li&gt;
      &lt;li&gt;데이터를 메모리에 저장하기 위해서 사용한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Usr file system
    &lt;ul&gt;
      &lt;li&gt;Utilty files&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Home file system
    &lt;ul&gt;
      &lt;li&gt;User area&lt;/li&gt;
      &lt;li&gt;Login directories, etc&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;File System Structure&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;각각의 파일 시스템은 4개 영역으로 나뉜다.
    &lt;ul&gt;
      &lt;li&gt;Boot block
        &lt;ul&gt;
          &lt;li&gt;파일 시스템의 첫번째 블록&lt;/li&gt;
          &lt;li&gt;파일 시스템을 구동하기 위한 시스템이 위치&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Super block
        &lt;ul&gt;
          &lt;li&gt;Boot block 바로 다음의 영역&lt;/li&gt;
          &lt;li&gt;File system을 관리하는 정보가 저장됨&lt;/li&gt;
          &lt;li&gt;DRAM,disk에서 카피가 있다&lt;/li&gt;
          &lt;li&gt;관리자 유저가 “sync”를 사용할 수 있다&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;i-node block list
        &lt;ul&gt;
          &lt;li&gt;Super block 다음의 영역&lt;/li&gt;
          &lt;li&gt;각 파일당 하나의 i-node가 대응한다&lt;/li&gt;
          &lt;li&gt;File 관리에 필요한 정보 저장&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Data block
        &lt;ul&gt;
          &lt;li&gt;마지막 영역&lt;/li&gt;
          &lt;li&gt;파일들의 실제 내용이 저장&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;File System Mount/Unmount&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;각각의 파일 시스템은 트리 형태로 표현가능하다&lt;/li&gt;
  &lt;li&gt;파일 시스템이 여러개면 파일 트리도 여러개 일 것이다&lt;/li&gt;
  &lt;li&gt;두개 이상의 파일 시스템을 합치는 것을 mount라고 하고 반대를 unmount라고 한다&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="system" />
      

      
        <summary type="html">File</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">System Call</title>
      <link href="https://lee989898.github.io/st-01" rel="alternate" type="text/html" title="System Call" />
      <published>2021-09-02T01:06:00+09:00</published>
      <updated>2021-09-02T01:06:00+09:00</updated>
      <id>https://lee989898.github.io/st-01</id>
      <content type="html" xml:base="https://lee989898.github.io/st-01">&lt;h3 id=&quot;system-call&quot;&gt;&lt;strong&gt;System Call&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;System Calls and Library Functions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;System Call: 운영체제의 커널(kernal) 서비스를 받기 위한 일종의 함수 호출&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;​System Call의 구조 &lt;img src=&quot;/assets/built/images/st/st01.png&quot; width=&quot;50%&quot; height=&quot;25%&quot; title=&quot;제목&quot; alt=&quot;시스템프러그래밍&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Library Functions
    &lt;ul&gt;
      &lt;li&gt;ex) printf(), scanf(), fopen(), fclose(), gets(), puts(), getw(), fread(), fseek()&lt;/li&gt;
      &lt;li&gt;대게 system calls을 호출합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;System Calls
    &lt;ul&gt;
      &lt;li&gt;ex) open(), create(), close(), read(), write(), lseek(), unlink()&lt;/li&gt;
      &lt;li&gt;user’s program에서 호출할 수 있다&lt;/li&gt;
      &lt;li&gt;커널 함수를 호출하는 C 함수처럼 보인다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;System Call Structure&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;user 프로그램이 system call을 사용하면 커널 서비스를 호출한다&lt;/li&gt;
  &lt;li&gt;Two phases
    &lt;ul&gt;
      &lt;li&gt;User code 실행 -&amp;gt; user space/mode&lt;/li&gt;
      &lt;li&gt;Kernel code 실행 -&amp;gt; kernel space/mode&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Kernel mode
    &lt;ul&gt;
      &lt;li&gt;일반적으로 interrupts와 같은 예외에 의해 활성화된다&lt;/li&gt;
      &lt;li&gt;trap(SW interrupts)에 의한 시스템 호출 내에서 활성화된다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;System Call Table entries
    &lt;ul&gt;
      &lt;li&gt;System call no: 3,4&lt;/li&gt;
      &lt;li&gt;No of parameters: 3,3&lt;/li&gt;
      &lt;li&gt;Routine name: read, write &lt;img src=&quot;/assets/built/images/st/st02.png&quot; width=&quot;50%&quot; height=&quot;25%&quot; title=&quot;제목&quot; alt=&quot;시스템프러그래밍&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;System Calls: No &amp;amp; Name&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;Exit&lt;/li&gt;
  &lt;li&gt;Fork&lt;/li&gt;
  &lt;li&gt;Read&lt;/li&gt;
  &lt;li&gt;Write&lt;/li&gt;
  &lt;li&gt;Open&lt;/li&gt;
  &lt;li&gt;Close&lt;/li&gt;
  &lt;li&gt;Wait&lt;/li&gt;
  &lt;li&gt;Create&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="system" />
      

      
        <summary type="html">System Call</summary>
      

      
      
    </entry>
  
</feed>
