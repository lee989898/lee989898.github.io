<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://lee989898.github.io/tag/android/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://lee989898.github.io/" rel="alternate" type="text/html" />
  <updated>2022-04-04T21:18:00+09:00</updated>
  <id>https://lee989898.github.io/tag/android/feed.xml</id>

  
  
  

  
    <title type="html">LEE | </title>
  

  
    <subtitle>공부 블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">안드로이드 면접 준비</title>
      <link href="https://lee989898.github.io/ad" rel="alternate" type="text/html" title="안드로이드 면접 준비" />
      <published>2022-03-19T01:06:00+09:00</published>
      <updated>2022-03-19T01:06:00+09:00</updated>
      <id>https://lee989898.github.io/ad</id>
      <content type="html" xml:base="https://lee989898.github.io/ad">&lt;h2 id=&quot;안드로이드-면접-준비&quot;&gt;&lt;strong&gt;안드로이드 면접 준비&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;안드로이드-질문&quot;&gt;&lt;strong&gt;안드로이드 질문&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Context 란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Context는 Application의 글로벌 Infomation에 대한 인터페이스다.&lt;br /&gt;
Context를 이용해서 액티비티를 실행시키거나 인텐트를 broadcasting또는 receiving과 같은 어플리케이션 레벨의 명령을 수행 할 수 있다.&lt;br /&gt;
즉 액티비티나 서비스, 여러 컴포넌트들을 시스템과 연결시키는 역할을 한다.&lt;/p&gt;

&lt;p&gt;어플리케이션 환경에 대한 글로벌 정보를 가진 인터페이스&lt;br /&gt;
안드로이드 시스템에 의해 구현이 제공되는 Abstract class&lt;br /&gt;
어플리케이션에 특화된 리소스와 클래스들에 대한 접근&lt;br /&gt;
launching, 액티비티, 브로드케스팅과 intents 수신 등과 같이 어플리케이션 레벨의 동작에 대한 업콜도 가능&lt;br /&gt;
즉, 안드로이드 시스템이 애플리케이션이나 컴포넌트 등을 관리하기 위한 것이라 생각&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;AAC 란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;AAC는 Android Architecture Components를 뜻하며 테스트와 유지관리가 쉬운 앱을 디자인하도록 돕는 라이브러리 모음이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Intent 란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Intent는 다른 앱 구성요소로 부터 작업을 요청하는 메세지 객체이다.&lt;br /&gt;
두가지 종류가 있으며, 명시적 인텐트는 수신하는 컴포넌트가 명시적으로 지정된 인텐트이다.&lt;br /&gt;
암시적 인텐트는 해당 작업을 수행 할 수 있는 컴포넌트를 찾아서 수행을 요청하는 인텐트이다.&lt;br /&gt;
주로 액티비티, 서비스를 시작하거나 브로드 캐스트를 전달할 때 사용된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Parcelable 이란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Parcelable은 JAVA의 Serializable의 안드로이드 구현체다.&lt;br /&gt;
서로 다른 컴포넌트 사이의 데이터 교환에 사용된다.&lt;br /&gt;
안드로이드는 Intent를 통해서 데이터를 전달할 때 Parcelable을 이용해서 전달하는 것을 권장하고 있다.&lt;br /&gt;
만약 다른 앱이 수신할 수 있는 Intent의 경우 Parcelable을 이용하면 안된다.&lt;br /&gt;
그 이유는 다른 앱에서 Parcelable로 구현된 클래스에 접근하지 못하면 런타임 에러가 발생하기 때문이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;4가지의 앱 구성 요소&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;안드로이드 앱은 컴포넌트로 구성되어 있다.&lt;br /&gt;
각 컴포넌트들은 하나의 독립된 형태로 존재하며, 정해진 역할을 수행한다.&lt;br /&gt;
앱의 필수적인 구성 요소로 시스템 또는 사용자가 앱에 들어올 수 있는 진입점이다.
컴포넌트? = 앱의 구성 단위, 컴포넌트를 조합하여 하나의 앱을 만드는 것을 의미&lt;/p&gt;

&lt;h3 id=&quot;activity&quot;&gt;Activity&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;UI 화면을 담당하는 컴포넌트&lt;/li&gt;
  &lt;li&gt;특징
    &lt;ol&gt;
      &lt;li&gt;안드로이드 어플리케이션은 반드시 하나 이상의 Activity를 가지고 있어야 합니다.&lt;/li&gt;
      &lt;li&gt;두개의 액티비티를 동시에 Display할 수 없습니다.&lt;/li&gt;
      &lt;li&gt;다른 어플리케이션의 액티비티도 불러낼 수 있습니다.&lt;/li&gt;
      &lt;li&gt;액티비티 내에는 프래그먼트(Fragment)를 추가하여 화면을 분할시킬 수 있습니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;service&quot;&gt;Service&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;화면에 존재하지 않고 백그라운드에서 실행되는 컴포넌트&lt;/li&gt;
  &lt;li&gt;특징
    &lt;ol&gt;
      &lt;li&gt;화면이 없습니다. 그저 백그라운드에서 돌아가는 컴포넌트입니다.&lt;/li&gt;
      &lt;li&gt;한번 시작된 서비스는 어플리케이션이 종료되도 계속해서 백그라운드에서 돌아갑니다.&lt;/li&gt;
      &lt;li&gt;모든 서비스는 Service클래스를 상속받아서 사용합니다.&lt;/li&gt;
      &lt;li&gt;네트워크를 통해서 데이터를 가져올 수 있습니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;서비스에는 크게 3가지로 나뉜다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;포그라운드 서비스 : 알림을 표시해 놓고 사용자와 상호 작용하지 않아도 계속 실행되는 걸 말함&lt;/li&gt;
  &lt;li&gt;백그라운드 서비스 : 사용자가 직접 알지 못하는 작업을 수행할 떄 사용&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;바운드 서비스 : 앱 내에서 서비스를 사용하여 간단한 클라이언트 - 서버 환경을 구성하는 것을 말함(특정 컴포넌트와 서비스간 상호작용)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;startService&lt;br /&gt;
⇒ 단순 서비스를 시작, 종료하게 하는 서비스이다.&lt;br /&gt;
생명주기는 onCreate - onStartCommand - onDestroy&lt;br /&gt;
onStartCommand return result&lt;br /&gt;
START_STICKY : 안드로이드가 서비스를 강제 정지한 경우, null intent를 보내서 재시작한다.&lt;br /&gt;
START_NOT_STICKY : 안드로이드가 서비스를 강제 정지한 경우, 재시작 하지 않는다.&lt;br /&gt;
START_REDELIVER_INTENT : 안드로이드가 서비스를 강제 정지한 경우, 동일한 intent를 보내서 재시작한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;bindService&lt;br /&gt;
⇒ 특정 컴포넌트와 서비스간 상호작용이 있을 때 사용하는 서비스이다.&lt;br /&gt;
생명주기는 onCreate - onBind - onUnbind - onDestroy&lt;/p&gt;

&lt;p&gt;intentService&lt;br /&gt;
⇒ 액티비티와 프래그먼트 LifeCycle에 의존하지 않고 백그라운드에서 처리하고 싶은 경우 사용한다. 이 서비스는 핸들스레드루퍼 + 핸들러를 조합해 구현되어 있다. 콜백메소드를 구현할 필요 없고 onHandleIntent()만 구현하면 되고 요청한 작업이 완료되면 자동적으로 서비스를 중단한다.&lt;/p&gt;

&lt;h3 id=&quot;broadcast-receiver&quot;&gt;Broadcast Receiver&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;단말기에서 발생하는 다양한 이벤트, 정보를 받고 반응하는 컴포넌트&lt;/li&gt;
  &lt;li&gt;안드로이드 단말기에서 발생하는 다양한 이벤트 정보(화면이 켜지거나 꺼짐, 리부팅 등)를 받고 반응하는 컴포넌트&lt;/li&gt;
  &lt;li&gt;특징
    &lt;ol&gt;
      &lt;li&gt;디바이스에서 발생하는 일 중에서 어플리케이션이 알아야 하는 상황이 발생하면 알려줍니다.&lt;/li&gt;
      &lt;li&gt;수신기를 통해 디바이스의 상황을 감지하고 적절한 작업을 수행합니다.&lt;/li&gt;
      &lt;li&gt;대부분 UI가 존재하지 않습니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;정적 리시버: 매니페스트에 등록하여 리시버를 구현하는 형태인데 한 번 등록하면 해제할 수 없는 방식이다.
동적 리시버: 클래스 파일에서 리시버를 등록, 해제할 수 있는 형태이기 때문에 앱에 부하를 줄 일 수 있다. 하지만 해제를 적절히
해주지 않는다면 메모리 락이 발생할 수 있다.&lt;/p&gt;

&lt;p&gt;(❌ 리시버에는 너무 많은 작업, 시간이 오래걸리는 작업을 하면 안된다. 처리 지연시간이 길어진 경우 ANR이 발생하기 떄문에 리시버에는 간단한 일을 처리하도록 하고, 스레드를 별도로 생성해서 처리하도록 해야한다)&lt;/p&gt;

&lt;h3 id=&quot;content-provider&quot;&gt;Content Provider&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;데이터를 저장하고,가져오고, 모든 App에서 접근할 수 있도록 하는 컴포넌트&lt;/li&gt;
  &lt;li&gt;데이터를 관리하고 다른 애플리케이션 데이터를 제공&lt;/li&gt;
  &lt;li&gt;데이터베이스의 데이터를 전달할때 많이 사용&lt;/li&gt;
  &lt;li&gt;콘텐트 제공자는 생명주기를 가지고 있지 않음
    &lt;ol&gt;
      &lt;li&gt;파일 입출력, SQLiteDB, Web 등을 통해서 데이터를 관리&lt;/li&gt;
      &lt;li&gt;콘텐트 제공자를 통하여 다른 어플리케이션의 데이터도 변경 가능&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;RxJava or RxKotlin and RxAndroid&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;rx가-무엇이며-사용한-이유&quot;&gt;Rx가 무엇이며, 사용한 이유&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Rx는 Reactive Programming 을 좀 더 편하게 사용하기 위한 라이브러리&lt;/li&gt;
  &lt;li&gt;Reactive Programming은 반응형 프로그래밍으로, 어떤 데이터를 관찰(Observe)하고 있다가, 데이터가 변경이 되면 반응을 하고, 그 변경된 이벤트를 가지고 관련된 업데이트 로직을 처리하는 것을 뜻함&lt;/li&gt;
  &lt;li&gt;사용 이유는 설명 그대로 데이터 흐름에 관해 중복되는 코드들을 제거하고 간단히 구성하기 위해 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reactive-programming&quot;&gt;Reactive Programming&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;데이터 흐름과 전달에 관한 프로그래밍 패러다임&lt;/li&gt;
  &lt;li&gt;데이터 흐름을 먼저 정의하고, 그 데이터가 변경 시 연관되는 함수나 수식이 업데이트 될 수 있는 것을 의미&lt;/li&gt;
  &lt;li&gt;메모리 누수를 해결하기 위한 방법
    &lt;ol&gt;
      &lt;li&gt;Disposable Interface를 이용한 명시적 자원해제
   onCreate()에서 subscribe()를 호출하면 onDestroy()에서 메모리 참조를 해제하고 onResume()에서 호출하면 onPause()에서 해제합니다.&lt;/li&gt;
      &lt;li&gt;CompositeDisposable class 사용 시 생성된 모든 Observable을 안드로이드 라이프 사이클에 맞춰서 한 번에 모두 메모리 해제를 할 수 있습니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;ANR?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Android 앱의 UI 스레드가 너무 오랫동안 차단되면 ‘ANR(Application Not Respoding, 애플리케이션 응답 없음)’ 오류가 트리거&lt;/p&gt;

&lt;h3 id=&quot;정의&quot;&gt;정의&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Application Not Responding 로, Main Thread(UI Thread)가 일정 시간 어떤 Task에 잡힘으로써 발생&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;발생-요인&quot;&gt;발생 요인&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;액티비티가 포그라운드에 있는 동안, 앱이 5초 이내에 입력 이벤트 또는 BroadcastReceiver(예: 키 누름 또는 화면 터치 이벤트)에 응답하지 않을 때&lt;/li&gt;
  &lt;li&gt;포그라운드에 액티비티가 없을 때, BroadcastReceiver가 상당한 시간 내에 실행을 완료하지 못할 때&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;회피-방법&quot;&gt;회피 방법&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;매인 스레드(UI Thread)에서 실행되는 메소드는 가능한 한 적은 작업을 수행해야 합니다. 특히 엑티비티의 onCreate() 그리고 onResume() 에서는 가능한한 최소한의 작업만을 수행해야 함. 네트워크 접근, 데이터 처리 또는 비트맵 리사이징과 같은 잠재적으로 오래 걸리는 작업은 작업 스레드(Worker Thread)에서 처리해야 합니다.&lt;/li&gt;
  &lt;li&gt;UI 변동이 있을 때는 프로그레스와 같은 화면을 띄어 사용자에게 기달릴 것을 명시&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Compile Time? Run Time?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;compiletime&quot;&gt;CompileTime&lt;/h3&gt;

&lt;p&gt;개발자에 의해 작성된 프로그래밍 언어를 컴퓨터가 인식할 수 있는 기계어 코드로 변환되어 실행 가능한 응용 프로그램이 되는 과정&lt;/p&gt;

&lt;p&gt;ex) Compile time error? 소스 코드가 컴파일 되는 과정 중 발생하는 Syntax Error로 파일 참조 오류 등과 같은 문제들로 인해 컴파일이 방해되어 발생하는 오류 형태, 즉, 소스 코드 문제다! 라고 말해주는 시간!&lt;/p&gt;

&lt;h3 id=&quot;runtime&quot;&gt;RunTime&lt;/h3&gt;

&lt;p&gt;컴파일 과정을 마친 응용 프로그램이 사용자에 의해 실행되어 지는 “Time”, 즉 프로그램이 실행되는 동안의 그 time을 의미!&lt;/p&gt;

&lt;p&gt;ex) Run time error? 이미 컴파일이 완료되어 프로그램이 실행 중 임에도 불구하고, 의도치 않은 예외 상황으로 인해 프로그램 실행 중 발생하는 오류 형태&lt;/p&gt;

&lt;p&gt;예를 들어, “0 으로 나눌 때, null 참조”는 RunTime 시 발생하는 error이며, “타입 체크가 잘못 되었을 때 에러”는 CompileTime 시 발생하는 error 이다.&lt;/p&gt;

&lt;파트 기술질문=&quot;&quot;&gt;
이전 협업에서 본인이 어떤 역할을 했는지, 기술적으로 어느 부분을 담당했는지 자세히

객체지향 언어가 무엇인지 알고 있는지?
클래스란 무엇인지?

성공적인 프로젝트를 이뤄내기 위해 팀에 어떤 부분에 기여하여 어떻게 할 것인지?

&amp;gt; FragmentManager vs SupportFragmentManager

fragmentManager : fragment 객체를 관리하기 위한 것

Activity에서의 fragmentManager 와 supportFragmentManager 의 차이는, FragmentManager의 경우 Activity class에서 가져오고 SupportFragmentManager는 FragmentActivity에서 가져오는 것.
FragmentActivity 역시 Activity를 상속받지만, 상속받으면서 androidx로 마이그레이션 된다. 즉, supportFragmentManager는 androidx에서 사용하기 위한 fragmentManager이다.

Fragment에서의 fragmentManager 와 childFragmentManager 의 차이는, fragmentManager는 Activity와 Fragment 둘 다에서 관리가 가능하며, childFragmentManager는 Fragment에서만 관리가 가능하다.

&amp;gt; Android Jetpack

개발자가 고품질 앱을 손쉽게 개발할 수 있게 돕는 라이브러리, 도구, 가이드 모음으로, 플랫폼 API와는 별도로 제공되는 androidx.* 패키지 라이브러리로 구성  
향상된 Android 기능의 이점을 활용하기 위한 일련의 구성 요소인 Support Library 로, 이전 버전까지 호환한다.  
구성요소는 Architecture(아키텍처), Foundation(기초), Behavior(동작), UI로 총 4가지로 나뉜다.  

가장 많이 사용하고 있는 부분은 Architecture Component 이다.  

---

• 실력있는 개발자가 되고 싶다 하였는데 실력있는 개발자란 무엇인지?
• MVC 패턴과 MVVM 패턴의 차이점은?
• Observer 패턴이란?
• 오버로딩과 오버라이딩의 차이점은?
• 멀티 프로세싱과 멀티 스레드의 차이는?
• 최근 카카오와 같은 IT회사에서 주간근무시간을 초과하는 일에 대해 어떻게 생각하는지
정시 퇴근 후 정말 중요한 약속이 잡혔을 때 팀장님께서 추가업무를 부탁하면 어떻게 대처할
지

&amp;gt; Context란?

자신이 어떤 어플리케이션을 나타내고 있는지 알려주는 ID 역할 ActivityManagerService 에 접근 할수 있도록 하는 통로 역할

ANR(Application Not Responding) 이란

메인 스레드가 일정 시간 어떤 TASK 에 잡혀 있으면 발생한다. 시간 소모가 많은 작업은 스레드를 통해 처리해야 함

ViewModel 의 장점

화면 회전시 데이터를 유지할 수 있는 구조로 디자인하였으며 Android Lifecycle 의 onDestroy코드가 동작한다. Lifecycle 을 내부적으로 알아서 호출해주기 때문에 좋다.

ConstraintLayout vs RelativeLayout vs LinearLayout 차이(ConstraintLayout 장점)

LinearLayout 은 orientation 이 있어서 가로 또는 세로로 차곡차곡 쌓여지는 방식이다. RelativeLayout 은 상대적인 기준으로 어떤 위젯의 왼쪽 오른쪽등등의 방향으로 배치 할 수 있게 해주는 레이아웃이다. ConstraintLayout 은 복잡한 레이아웃을 단순한 계층구조를 이용하여 표현할 수 있는 ViewGroup 이다. RelativeLayout과 비슷하지만 더 유연하고 다양하고 강력한 기능을 제공한다.

CustomView 와 Fragment 의 차이점

Fragment 는 자체 생명주기를 따르고 Activity 의 생명주기에 따라 직접적으로 영향을 받는다. Fragment를 사용하려면 Activity 내에서 또는 상위 프래그먼트내에서 사용이 가능하고 다른 액티비티에서 재사용이 가능하다. 여기서 CustomView 는 자체 생명주기는 가지고 있지 않고 Fragment 보다는 더 작은 단위?를 커스터마이징해서 재사용을 할 수 있다.

Android KTX 란 무엇인가?
안드로이드 프레임워크와 서포트 라이브러리를 모두 지원하여 안드로이드를 위한 코틀린(Kotlin) 코드를 간결하고 편하게 사용할 수 있게 설계된 확장 라이브러리이다.

mvp 패턴과 mvvm 패턴의 차이

mvp 와 mvvm 의 차이는 presenter와 viewModel 의 차이가 가장 크다. presenter 는 view의 interface 를 가지고 있고 view 관련 처리를 요청한다. 하지만 viewModel 은 view 의 참조를 하지않고 Rx를 사용하거나 LiveData를 사용해서 데이터가 변경될때 같이 자동으로 변경될수 있게 구조가 되어있다.

LiveData 는 인터럽트방식인가 폴링방식인가

폴링방식은 정해진 시간 또는 순번에 상태를 확인해서 상태 변화가 있는지 없는지 체크 하는 방식이고 인터럽트방식은 main문을 실행 하는 동중 외부에서 정해져 있는 인터럽트 핀에 신호가 들어오면 MCU는 즉각적으로 하고 있는 동작을 멈추고 인터럽트 서비스 루틴을 실행하는 것이다.
LiveData 는 데이터가 변경된 시점에 Observer 가 실행 되기 때문에 인터럽트 방식이라고 볼 수 있다.
옵저버패턴 설명

한객체의 상태가바뀌면 그 객체에 의존하는 다른 객체들한테 연락이 가고 자동으로 내용이 갱신되는 방식으로 일대다(one-to-many) 의존성을 정의한다.
데이터 전달 방식은 2가지가 있다 주제 객체에서 옵저버로 데이터를 보내는 방식 (푸시방식) 옵저버에서 주제객체의 데이터를 가져가는 방식(풀 방식)
Subject 와 Observer 가 존재하고 Subject에 Observer 를 등록하고 난 뒤 subject 의 데이터가 변경 되면 등록된 Observer 가 호출 되는 방식

어댑터패턴 설명

한 클래스의 인터페이스를 클라이언트에서 사용하고자하는 다른 인터페이스로 변환한다. 어댑터를 이용하면 인터페이스 호환성 문제 때문에 같이 쓸 수 없는 클래스들을 연결해서 쓸 수 있다.

프로토콜이란?

통신 프로토콜 또는 통신 규약은 컴퓨터나 원거리 통신 장비 사이에서 메세지를 주고 받는 양식과 규칙의 체계이다. 통신 프로토콜은 신호 체계, 인증 그리고 오류 감지 및 수정기능을 포함할 수 있다. 간단히 말해서 데이터 주고받는 상호간에 미리 약속된 규칙, 규약이다!!

ViewModel 상속받은 클래스에서 ViewModel 상속을 받지 않는다면 달라지는점은?
viewModel 상속을 받지 않는다면 생명주기에 따른 처리,rotate상황 등등을 추가 해주어야한다는 점이 달라진다.

반응형 프로그래밍 - RXJava
리액티브 프로그래밍은 데이터 흐름(data flow)과 변화 전파에 중점을 둔 프로그래밍 패러다임프로그래밍 언어로 정적 또는 동적인 데이터 흐름을 쉽게 표현데이터 흐름을 통해 하부 실행 모델이 자동으로 변화를 전파할 수 있는 것을 의미

Observable
• 데이터 흐름
• 주기적으로 데이터를 처리하고 변화를 방출하며 데이터 흐름을 다른 구성요소에게 전달
Observer
• Observable이 방출한 데이터를 받아서 데이터 흐름의 변화를 관찰
• Observable이 방출한 데이터를 메인 스레드나 UI에 전달하는 역할
• onComplete()Observable이 더 이상 방출할 데이터가 없을 때 호출
• onError(Throwable e)Error 발생 시 호출
• onNext(Object o)새로운 데이터가 방출될 때 호출방출된 데이터는 매개변수에서 찾을 수 있음
Schedulers
• Rx의 핵심은 비동기 처리에 있음
• Observable과 Observer가 어떤 스레드에서 작업을 수행할지 지정
• subscribeOn(Thread)Observable이 실행되어야 하는 스레드 지정
• observeOn(Thread)Observer가 실행되어야 하는 스레드 지정
Manifest file
• 애플리케이션에 관한 정보를 입력하는 파일로 xml 형태
• 패키지 이름, 앱 이름, 앱 설명, 아이콘, 앱이나 구성요서에서 필요한 권한, 앱에서 사용되는 액티비티, 서비스, 브로드캐스트에 대한 정보 등 전반적 앱 정보 저장
Activity
• 화면에 UI를 표시하는 기본요소
• 대부분의 경우 액티비티는 꽉찬 화면을 구성하지만, 예외적으로 floating windows, multi-window mode 처럼 화면의 일부를 차지하게 할수 있다.
• Acitivty 의 종류 중 하나로 FragmentActivity가 있는데, nested fragment는 fragment 안에 다른 fragment가 있는 경우 고려
• AppCompatActivity는 안드로이드 하위버전의 안드로이드를 지원하기 위해 사용
• AppCompatActivity는 FragmentActivity를 상속
Activity Life Cycle
• 재개 (create, start, resume)
• 일시정지 (pause)
• 멈춤 (stop, destroy)
• onCreate (액티비티 생성 직전)onRestart (액티비티가 stop상태에서 재시작될 경우)onStart (액티비티가 화면에 보여지기 직전)onResumed (액티비티가 사용자와 상호작용하기 직전)onPause (액티비티가 부분적으로 가려짐)onStopped (액티비티가 더 이상 보이지 않을때)onDestroy (액티비티가 소멸되기 직전)
Fragment
• 프래그먼트는 액티비티의 부분부분을 동적으로 동작시키기 위해 생긴 개념
• 탭레이아웃의 탭을 눌러서 다른화면으로 전환하는 앱의 경우, 한 액티비티안에서 탭을 눌렀을 때 보여지는 프래그먼트만 변경되며, 프래그먼트는 액티비티와 달리 스택에 쌓이지 않기 때문에 백버튼을 누른다고 해서 이전 프래그먼트로 돌아가지 않는다. (이는 BackStack을 추가하여 직접 구현)
• 프래그먼트의 라이프사이클은 액티비티와 거의 동일한데, onAttach, onCreateView, onDestroyView, onDetach라는 콜백이 추가
Thread &amp;amp; Handler &amp;amp; Looper
Thread
• 안드로이드는 기본적으로 하나의 메인 스레드로 작동
• UI 조작은 메인 스레드만 가능 &amp;gt; 두 개 이상의 스레드가 UI에 동시에 접근 시 의도와 다르게 동작할 가능성이 크기 때문
• 멀티 스레드 환경에서 동기화 이슈를 차단하고 스레드 간 통신을 위해 사용되는 것이 Handler &amp;amp; Looper

1. Java IO에서 제공하는 파이프 이용
2. 스레드 간 공유 메모리를 통한 접근
3. Synchronized를 이용한 시그널링
4. BlockingQueue를 이용한 방법
스레드 통신 메커니즘핸들러 - 루퍼 - 메시지 큐 - 메시지
android.os.Looper - UI 스레드에 하나가 존재하며 소비자 스레드와 연관된 메시지 발송자 (데이터를 읽는 역활)
android.os.Handler - 큐에 메시지를 삽입하는 생산자 스레드를 위한 인터페이스와 소비자 스레드 메시지 처리, 하나의 Looper 객체는 많은 핸들러를 갖지만 모두 같은 큐에 삽입
android.os.MessageQueue - 소비자 스레드에서 처리할 메시지들이 담긴 무제한의 연결 리스트. 모든 루퍼와 스레드는 최대 하나의 메시지 큐를 가진다.
android.os.Message : 소비자 스레드에서 실행하는 메시지
Handler
• 핸들러 생성 시 기본적으로 행들러를 생성한 스레드와 루퍼에 연결
• postDelayed / postAtFrontOfQueue와 같이 메시지 순서나 보내는 시간 조작 함수 보유 &amp;gt; 스케줄링가능
Looper
• MessageQueue의 메시지나 Runnable 객체를 꺼내 핸들러에게 전달
• run() 메소드 내부에 MessageQueue 생성 &amp;gt; Looper.loop()를 통해 메시지 전달 대기
AsyncTask
• 백그라운드에서 작업 수행 뒤 결과를 UI Thread에서 생신할때 주로 사용
• 순차적으로 실행
단점
• 액티비티 종료 시 따로 명시하지 않으면 메모리에 남아 Memory leak 발생
• 한 번만 실행되고 재사용 불가
• 처리 작업의 수가 1개
• Configuration 변경 시 크래쉬 발생
대안으로 java.util.concurrent API / Kotlin coroutine / RxJAVA 사용 권장
Intent
• 구성 요소 실행 &amp;amp; 구성 요소 간 데이터 전달
• putExtra()를 통해 데이터 보관 &amp;gt; getExtra()로 전달 받을 수 있음
CustomView
• 기존에 있는 View (ImageView, TextView 등)로 표현할 수 없는 모양의 View를 구현해야 할때 필요
• View를 상속받는 자손 클래스를 만들어서 구현

1.기존 View 상속
2.onDraw(), onMeasure(), onKeyDown() 처럼 'on'으로 시작하는 슈퍼클래스 메서드를 오버라이드

• onDraw()
• 뷰를 실제 그릴때 사용
• Canvas 객체를 매개변수로 받음
• Canvas 객체는 어떤 도형을 그릴지 설정
• Paint 객체는 도형의 색, 스타일, 글꼴 등을 설정
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)
뷰의 크기 설정 시 사용

Rx관련 질문 :
새로운 스레드를 생성해도 되는데 왜 Schedulers.io() 를 사용하는가? 내부 동작이 어떻게 돌아가는 것인가를 묻는 질문
화면단에서 사용되는 request 가 하나가 아니라 적게는 한자리수 많게는 두세자리수까지 갈수 있는데 이부분에서 Thread를 계속해서 생성,수거 하게 된다면 사용할 때마다 드는 비용을 무시할수 없다. 그렇기 때문에 Thread Pool 이 사용된다. 몇개의 스레드를 생성한뒤 큐에 Task를 넣고 작업하고 있지 않은 Thread에 Task를 할당하는 방식이다. 작업이 끝난 Thread 는 다시 어플리케이션에 결과값을 리턴한다. Thread를 재사용 하기때문에 성능저하를 방지할 수 있다. 하지만 Thread를 너무 많이 만들어 놓게 되면 메모리만 낭비하게 되므로 주의해서 사용해야 한다.

프로가드
코드 축소와 바이트코드를 최적화하고 미사용 코드 명령을 제거하며 남아 있는 클래스,필드 및 메서드를 짧은 이름으로 난독 처리한다. 난독 처리된 코드는 APK 의 리버스 엔지니어링을 어렵게 만들며 보안에 민감한 기능이 앱에 사용되는 경우 특히 유용하다. 64K 참조 제한을 해결하기 위한 유용한 도구 이기도 하다.

코틀린 by lazy
lateinit은 필요할 경우 언제든 초기화가 가능한 Properties 이지만 lazy properties는 생성 후 값을 변경할 수 없는 val 로 되어 있다. by lazy 정의에 의해서 초기화를 진행하고 val 이므로 값을 교체하는 건 불가능하다. lazy를 사용하는 경우 기본 synchronized 로 동작한다.

viewModel rotate 상황에서 파기 왜 안되는지 과정 ?
ViewModelStoreOwner 인터페이스를 가지고 있는 Activity 또는 Fragment 는 viewModelStore를 가지고 있다. rotate 될 때 onDestroy 가 불리게 되는데

```kotlin
      boolean isChangingConfigurations = activity != null &amp;amp;&amp;amp; activity.isChangingConfigurations();
        if (this.mViewModelStore != null &amp;amp;&amp;amp; !isChangingConfigurations) {
            this.mViewModelStore.clear();
        }
```

viewModelStore 가 null 이 아니고 configuration변화가 없을때 clear 를 불러 주기 때문에 rotate상황에서 viewModel이 clear 되지 않는다.

Multi dex
안드로이드 앱을 구성하는 코드는 컴파일 되어 덱스 파일로 만들어 진다. 하나의 덱스 파일에는 64K 메소드참조만 저장할 수 있다. 큰 규모 앱을 작성하다 보면 앞의 메소드 제한을 훌쩍 넘게 되는데 멀티덱스를 사용하면 덱스 파일을 여러 개로 나누어 이러한 문제를 피할 수 있다.

액티비티 생명 주기
onCreate onStart onResume Running onPause onStop onDestroy

프래그먼트 생명 주기
onAttach onCreate onCreateView onActivityCreated onStart onResume Running onPause onStop onDestroyView onDestroy onDetach

서비스 생명 주기 2가지
onCreate onStartCommand() return start_sticky , start_not_sticky, start_redeliver_intent Service Running onDestroy

onCreate onBind onUnbind onDestroy

FLAG_ACTIVITY_CLEAR_TOP 과 FLAG_ACTIVITY_SINGLE_TOP 차이
CLEARTOP 은 A -&amp;gt; B -&amp;gt; A 일 때 최상위 A 만 남고 나머지 다 destroy SINGLETOP 은 A -&amp;gt; B -&amp;gt; B 일때 A -&amp;gt; B 로 B가 하나로 됨.

스레드 통신방법?
스레드가 시작 되면 이 스레드는 루퍼! 핸들러! 메세지 큐! 를 하나씩 가지고 있다. 메세지큐는 외부 스레드로부터 핸들러를 통하여 받은 message 혹은 Task 를 저장하는 역할을 한다. 루퍼는 메세지큐에서 메세지를 순차적으로 꺼내서 핸들러에게 전달하는 역할!! 핸들러는 두가지 기능이 있다.

루퍼에게서 받은 메세지 혹은 Task 를 일정한 시간에 수행하는 기능을 한다.
외부 스레드로부터 받은 메세지를 핸들러를 통하여 Message Queue에 집어 넣는 역할을 한다.
스레드 충돌을 막으려면?
두개 이상의 스레드가 같이 참조 하는 메소드 혹은 블럭구문을 synchronized , synchronized block 사용해서 해결할 수 있다.

Viewholder 패턴에 대해 설명
예전 ListView 를 사용할 때 getView() 를 오버라이드 해서 뷰를 인플레이팅 시키는데 이부분에서 계속해서 생성하고 findviewById 를 불러주게 되면 부담이 많이 가는 작업이 된다. 데이터가 많아 질 수록 버벅거리는 현상이 일어날 확률이 높다. 그래서 viewHolder 패턴이 나오게 되었는데 해당 뷰가 널일때만 view를 인플레이트 시키고 viewHolder 클래스에 findviewById 를 사용해서 viewHolder 는 해당 뷰에 태깅처리해서 다음번 부터는 태그한 viewHolder 를 가져와서 사용한다. 그 이후에 viewHolder 를 강제로 구현하게 나온것이 RecyclerView 이다.

Dangerous permission
시스템 권한은 두가지로 나눠 지는데 정상권한과 위험권한이 있다. 정상권한은 사용자 개인정보를 직접 위험에 빠뜨리지않는다. 앱이 매니페스트에 정산 권한을 나열하는 경우 시스템은 자동으로 권한을 부여. 위험권한은 사용자 기밀 데이터에 대한 액세스를 앱에 부여할 수 있다. 위험권한을 나열하는 경우, 사용자는 앱에 대한 명시적 승인을 제공해야 한다.

Intent service 란?
IntentService 는 Intent를 사용해서 시작되고 하나의 workerThread 가 생성 되고 Queue에 작업이 들어 가게 된다. onHandleIntent() 메소드가 이 스레드 내에서 호출되고 작업이 다 끝나면 알아서 destroy 되는 방식이라 stopSelf를 불러줄 필요가 없다.

Foreground service 사용?
Fragment 사용 장점 ?
Activity를 분할하여 화면의 한 부분을 정의할수 있고 자신의 생명주기를 가진다. 액티비티내에서 실행 중 추가 제거가 가능하고 다른 액티비티에서도 사용 할 수 있어 재사용성이 뛰어나다. 태블릿 지원하게 될 때 용이하게 사용 가능하다.

Parcelable serializable 차이와 성능은?
복잡한 클래스의 객체를 이동시키려고 할 때 Serializable 또는 Parcelable 을 사용해서 직렬화하여 인텐트에 추가합니다. Serializable 은 Java 의 인터페이스이다. 해당 객체에 인터페이스 Serializable 을 사용해주면 되기 때문에 사용하기 쉽다. 하지만 내부에서 Reflection 을 사용하여 직렬화 처리하기 때문에 성능 저하 및 배터리 소모가 발생되게 된다. Parcelable 은 Android SDK 의 인터페이스이다. 직렬화 방법을 사용자가 명시적으로 작성하기 때문에 작동으로 처리하기 위한 reflection이 필요없다. 속도적인 측면에서는 Parcelable 이 10배 이상 빠르다.

하지만 Serializable 을 사용할 때 writeObject 와 readObject 를 구현해 주면 Parcelable 보다 쓰기는 속도가 3배 읽기의 경우 1.6배 더 빠르다. 어떻게 사용하느냐에 따라 속도적인 측면에서 비교할 수 있다.

onSaveInstanceState 와 onRestoreInstanceState
Activity 또는 Fragment 가 종료 될 때 onSaveInstanceState은 onPause 다음 상태에서 불리게 된다. 이때 파라미터로 받은 Bundle에 데이터를 저장하고 onCreate 시점에서 savedInstanceState bundle 을 통해 값을 가져와서 사용할 수 있다. onRestoreInstanceState 은 정상적인 경우는 불리지 않고 메모리 부족한 경우 프로세스 자체에서 Activity 또는 Fragment 를 강제종료할 때 onRestoreInstanceState가 불리게 된다. bundle 통해서 데이터 백업 가능
&lt;/파트&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="android" />
      

      
        <summary type="html">안드로이드 면접 준비</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">코틀린 면접 준비</title>
      <link href="https://lee989898.github.io/ad" rel="alternate" type="text/html" title="코틀린 면접 준비" />
      <published>2022-03-18T01:06:00+09:00</published>
      <updated>2022-03-18T01:06:00+09:00</updated>
      <id>https://lee989898.github.io/ad</id>
      <content type="html" xml:base="https://lee989898.github.io/ad">&lt;h2 id=&quot;코틀린-면접-준비&quot;&gt;&lt;strong&gt;코틀린 면접 준비&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;코틀린-질문&quot;&gt;&lt;strong&gt;코틀린 질문&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;코틀린 사용의 장점&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;널 안전성&lt;/li&gt;
  &lt;li&gt;가변/불변 구분&lt;/li&gt;
  &lt;li&gt;람다 표현식 지원&lt;/li&gt;
  &lt;li&gt;스트림 API 지원&lt;/li&gt;
  &lt;li&gt;완벽한 자바 호환성&lt;/li&gt;
  &lt;li&gt;Java에 비해 훨씬 간결한 코드&lt;/li&gt;
  &lt;li&gt;객체지향이면서 함수형 프로그래밍 언어&lt;/li&gt;
  &lt;li&gt;자바와 상호운용 가능 (자바에서 코틀린으로 작성된 클래스를 부를 수 있으며 반대로도 가능)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;클래스, 객체, 인스턴스&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;클래스: 객체를 만들어 내기 위한 설계도 혹은 툴
객채: 소프트웨어 셰계에 구현할 대상
인스턴스: 설계도를 바탕으로 소프트웨어 세계에 구현된 구체적인 실체&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Array와 List의 차이&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Array의 경우 고전적인 의미의 배열이며, 고정된 사이즈의 연속된 메모리 공간에 할당된다.&lt;br /&gt;
따라서 인덱스를 통해 값을 변경하는 것이 가능하며(mutable), 사이즈를 변경하는 것이 불가능하다.&lt;br /&gt;
List의 경우 크게 List와 MutableList가 있는데, ArrayList또는 LinkedList의 구현체다.
Default로는 ArrayList의 구현체를 따른다.&lt;br /&gt;
이름에서도 볼 수 있듯이 List는 Immutable이며 MutableList는 Mutable이다.
성능이 중요시 되는 부분을 제외하고는 List를 쓰는것이 바람직 하다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Scope Function&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;코틀린에서 제공하는 기본 라이브러리 함수로, 객체를 context내에서 코드 단위 블럭으로 실행하는데 묵적을 가진 함수&lt;br /&gt;
5개의 스코프 함수가 존재: let, run, with, apply, and also&lt;/p&gt;

&lt;p&gt;리시버와 람다 함수&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;스코프 함수를 사용할 떄 넘겨주는 두 객체&lt;/li&gt;
  &lt;li&gt;차이점
    &lt;ul&gt;
      &lt;li&gt;객채를 접근하는 방법: this, it
        &lt;ul&gt;
          &lt;li&gt;run, with, apply -&amp;gt; 자기 자신을 블럭(this)으로 넘기고 this를 사용해 객체에 접근&lt;/li&gt;
          &lt;li&gt;let, alse -&amp;gt; 자기 자신을(람다) 인자(it)으로 넘기고 it을 사용해 객체에 접근&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;리턴 값
        &lt;ul&gt;
          &lt;li&gt;apply, also -&amp;gt; 리시버 객체를 마지막에 리턴(자기 자신을 리턴)&lt;/li&gt;
          &lt;li&gt;let, run, with -&amp;gt; 람다 함수의 마지막 결과를 리턴(코드 블럭의 결과를 리턴)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;let : 이 함수를 호출한 객체를 이어지는 함수 블록의 인자로 전달한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it으로 리시버에 접근하고 람다 함수의 마지막 결과를 리턴&lt;/li&gt;
  &lt;li&gt;리시버의 여러 함수들을 호출할 떄 사용&lt;/li&gt;
  &lt;li&gt;리시버 객체의 확장 함수로 사용 -&amp;gt; val length = str?.let {it.length}&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;getPadding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;은&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;패딩&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;값&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setPadding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;with : 인자로 받은 객체를 이어지는 함수 블록의 리시버로 전달, block 함수의 결과를 반환&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;this로 리시버에 접근, 람다 함수의 마지막 결과를 리턴(리턴 값을 사용하지 않는 경우에 쓸 것을 권장)&lt;/li&gt;
  &lt;li&gt;리시버 객체의 확장 함수로 사용하지 않음 -&amp;gt; with(리시버 객체) { 람다 함수}&lt;/li&gt;
  &lt;li&gt;run과 동일한 기능&lt;/li&gt;
  &lt;li&gt;인스턴스를 참조연산자 대신 parameter로 받아 사용 ( &amp;lt;-&amp;gt; run과 차이)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;textView!!!&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;gravity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gravity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CENTER_HORIZONTAL&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;run : 인자가 없는 익명 함수처럼 사용하는 형태와 객체에서 호출하는 형태 제공 함수형 인자 block 을 호출하고 결과반환 또는 호출한 객체를 함수형 인자 block의 리시버로 전달하고 그 결과를 반환한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;this로 리시버에 접근하고, 람다 함수의 마지막 결과를 리턴&lt;/li&gt;
  &lt;li&gt;마지막 구문의 결과 값을 반환한다. ( &amp;lt;-&amp;gt; apply와 차이)&lt;/li&gt;
  &lt;li&gt;with와 동일한 기능&lt;/li&gt;
  &lt;li&gt;리시버의 확장 함수로 사용 -&amp;gt; 리시버.run { 람다 함수 }&lt;/li&gt;
  &lt;li&gt;람다함수에서 여러 값을 초기화하고 리턴 값을 어떤 객체의 초기값으로 사용할 때 사용&lt;/li&gt;
  &lt;li&gt;이미 인스턴스가 만들어진 후에 인스턴스의 함수나 속성을 scope 내에서 사용해야 할 떄 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;AplusB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;textView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;와&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;비슷하지만&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textView&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;의&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;널체크를&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;해야&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;하는경우&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;사용하면&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;좋다&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;textView!!!&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;gravity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gravity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CENTER_HORIZONTAL&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;apply : 이 함수를 호출한 객체를 이어지는 함수 블록의 리시버로 전달한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it으로 리시버에 접근하고, 리시버 객체를 리턴&lt;/li&gt;
  &lt;li&gt;리시버 스스로를 리턴하기 때문에 빌더패턴처럼 연속적으로 함수 호출 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1f&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;를&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;리시버로&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;전달&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;받았기&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;때문에&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;이나&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topMargin&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;바로사용&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;topMargin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;처리가 끝나면 인스턴스를 반환 : apply, also&lt;/li&gt;
  &lt;li&gt;처리가 끝나면 최종 값을 반환 : run, let, with(?)&lt;/li&gt;
  &lt;li&gt;참조 연산자 없이 인스턴스의 변수와 함수 사용 → apply, run&lt;/li&gt;
  &lt;li&gt;파라미터로 인스턴스를 넘긴 것처럼 it을 통해 인스턴스를 사용 : also, let&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;LiveData 란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;주어진 lifecycle 내에서 관찰할 수 있는 data holder class.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;get()과 직접 참조(=)의 차이&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MutableLiveData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LiveData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LiveData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;직접 선언하는 것(b)과 get() = … 으로 선언하는 것(c)의 차이점은, 직접 선언하면 b 와 a 는 서로 동일한 객체를 바라보게 되는 것이고, get() 으로 선언할 경우엔 내부적으로 함수가 호출되고, 해당 함수의 결과 값으로 a 객체를 리턴하는 것.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;by lazy vs lateinit&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;쉽게 설명하자면, var에서만 사용 가능한 lateInit, val에서만 사용 가능한 by lazy.&lt;br /&gt;
lateInit은 언제든 null을 제외한 값으로 초기화 값을 변경할 수 있지만, by lazy 는 값을 교체하는게 불가능하다.&lt;br /&gt;
null이 필요할 때를 생각해서 사용해야 한다!&lt;/p&gt;

&lt;h3 id=&quot;by-lazy--initializer-&quot;&gt;by lazy { initializer }&lt;/h3&gt;

&lt;p&gt;지정된 초기화 함수 “initializer” 과 기본 thread-safety 모드인 “LazyThreadSafetyMode.SYNCHRONIZED” 을 사용한 “Lazy” interface의 새 인스턴스를 만든다.
값의 초기화에서 exception이 발생하면, 다음 access에서 값을 재 초기화를 시도한다.&lt;br /&gt;
반환된 인스턴스는 동기화하는데 자기 자신을 사용한다. 반환된 인스턴스의 외부 코드로부터 동기화를 하지 마라. 그건 우연히 deadLock을 야기시킬 수 있다. 또한, 이 행동은 나중에 변경될 수도 있다.&lt;/p&gt;

&lt;p&gt;즉, 기본 쓰레드 세잎 모드를 사용해 initializer 함수에 해당하는 새로운 인스턴스를 만들어 사용하는 것이며, kotlin.jvm 에서 동작한다.
이외 (1)스레드를 컨트롤 할 수 있고, (2)객체를 지정해 동기화할 수도 있다.&lt;/p&gt;

&lt;p&gt;즉, 첫 인스턴스를 생성한 후로는 그 인스턴스의 값 만을 가지고 사용한다.&lt;/p&gt;

&lt;h3 id=&quot;lateinit&quot;&gt;lateInit&lt;/h3&gt;

&lt;p&gt;사용 전 반드시 초기화를 해줘야 한다. 물론 초기화가 되어있는지 확인하는 함수가 있긴 하지만, 초기화 하지 않고 사용할 경우 익셉션이 발생한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;companion object 란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;properties(속성)과 functions(함수)가 클래스에 연결되어 있지만, 해당 클래스의 인스턴스에는 연결되어 있지 않은 싱글톤 오브젝트이다. 기본적으로 java의 “static” 키워드와 같지만, 꼬임이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ex-1 : 기본 사용법 ( 클릭 )&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;LATTE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;latte&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bestBeverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;c1&quot;&gt;// all return &quot;latte&quot;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Companion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bestBeverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ex-1을 보고 아래와 같이 생각할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cafe class의 메소드는 companion object 내에 어떤 프로퍼티든 참조할 수 있다. 마치 프로퍼티가 Cafe class 자체에서 field로 선언된 것 처럼&lt;/li&gt;
  &lt;li&gt;companion object 내 프로퍼티들은 ContainingClass.PROPERTY_IN_COMPANION_OBJECT 처럼 “statically”하게 참조될 수 있다.&lt;/li&gt;
  &lt;li&gt;companion object에 대한 기본 이름은 Companion 이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;ex-2 : companion object 에 이름 붙이기 ( 클릭 )&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;LATTE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;latte&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bestBeverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// all return &quot;latte&quot;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bestBeverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// this no longer compiles&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Companion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;ex-3 : companion object 내 프로퍼티에 private ( 클릭 )&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;LATTE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;latte&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bestBeverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// both of these will give you an error&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// this still evaluates to &quot;latte&quot;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bestBeverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;companion object 는 최초 한번만 선언되고 두 개 이상 선언이 되지 않는다. 또한, 인터페이스를 상속받아 작업할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ex-4 : interface 상속 ( 클릭 )&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Drinkable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;LATTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Drinkable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;I like coffee&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;LATTE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LATTE&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;가능&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그럼 일반 object 대신 companion object 를 사용하는 이유는 뭘까?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ex-5 : &lt;del&gt;companion&lt;/del&gt; object&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;LATTE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;latte&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bestBeverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LATTE&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ex-5를 보면 아래와 같은 차이점을 발견할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Companion 의 기본 이름이 지정된 companion object와 달리, 일반 object 선언은 이름을 지어야만 한다.&lt;/li&gt;
  &lt;li&gt;일반 object 내 fields를 참조하기 위해선 객체 이름을 명시적으로 사용한 포함된 클래스를 요구한다. companion object를 가지고, 간단하게 Cafe.LATTE를 만들 수 있지만, 일반 object를 가지고는, Cafe.Beverage.LATTE를 써야만 한다.&lt;/li&gt;
  &lt;li&gt;Companion object 는 포함된 클래스가 처음 로드될 때 초기화 된다. - 비록 companion object가 사용되지 않더라도. 결과적으로, companion objects는 lazy가 아니다. 위 예제 내 일반 object는 그들이 처름 접근할 때 초기화 된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;그래서-왜-companion-object를-쓰는-걸까&quot;&gt;그래서 왜 companion object를 쓰는 걸까?&lt;/h3&gt;

&lt;p&gt;“static” 프로퍼티/함수에 접근하기 위한 편리한 약칭을 제공하기 때문. 그게 전부다. 뭔 이유가 있다면, 만약 늦은 초기화를 해야 한다면, 일반 object를 대신 사용해라.&lt;/p&gt;

&lt;hr /&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="android" />
      

      
        <summary type="html">코틀린 면접 준비</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">컴퓨터과학 면접 준비</title>
      <link href="https://lee989898.github.io/ad" rel="alternate" type="text/html" title="컴퓨터과학 면접 준비" />
      <published>2022-03-17T01:06:00+09:00</published>
      <updated>2022-03-17T01:06:00+09:00</updated>
      <id>https://lee989898.github.io/ad</id>
      <content type="html" xml:base="https://lee989898.github.io/ad">&lt;h2 id=&quot;컴퓨터과학-면접-준비&quot;&gt;&lt;strong&gt;컴퓨터과학 면접 준비&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;1분자기소개&lt;/p&gt;

&lt;p&gt;안녕하십니까 명지대학교 컴퓨터공학과 4학년 이준경입니다.
일단 면접의 기회를 주셔서 고맙습니다
제가 솝트에 지원하게 된 이유는&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;인성-질문&quot;&gt;&lt;strong&gt;인성 질문&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;자신의 장점과 단점 3가지&lt;/p&gt;

&lt;p&gt;자신의 단점을 극복했던 방법&lt;/p&gt;

&lt;p&gt;협업 중 갈등상황을 겪었던 경험이 있는지, 어떻게 해소했는지&lt;/p&gt;

&lt;p&gt;팀 내에 자기주장이 강한 사람/사기가 없는 사람 이 있을 때 어떻게 해결할 것인가?&lt;/p&gt;

&lt;p&gt;팀 내에 실력적으로 부족한 팀원이 있을 때 어떻게 할 것인가?&lt;/p&gt;

&lt;p&gt;갈등이 일어나지 않게 하기 위해 노력할 부분은 무엇일까?&lt;/p&gt;

&lt;p&gt;협업할 때 지원자와 가장 안 맞는 유형&lt;/p&gt;

&lt;p&gt;협업에서 가장 중요하다고 생각하는 것&lt;/p&gt;

&lt;p&gt;솝트를 통해서 얻고 싶은 3가지&lt;/p&gt;

&lt;p&gt;친구들 사이에서 지원자는 어떤 친구인가?&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;컴퓨터-과학&quot;&gt;&lt;strong&gt;컴퓨터 과학&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;프레임워크와 라이브러리&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;자동차의 뼈대(프레임워크)가 있고 이 뼈대를 기초로 승용차, suv등의 자동차를 완성한다. 여기에 추가적인 기능인 네비게이션이나
쿠션, 유리 등(라이브러리)을 가져와 차를 꾸민다.&lt;/p&gt;

&lt;h2 id=&quot;프레임워크-란-&quot;&gt;프레임워크 란 ?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;기본적인 뼈대가 완성되어 있고, 규칙이 존재하는 개발 환경&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;특징&quot;&gt;특징&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;개발자들이 따라야 할 가이드라인을 가진다.&lt;/li&gt;
  &lt;li&gt;개발할 수 있는 범위가 정해져 있다.&lt;/li&gt;
  &lt;li&gt;개발자를 위한 다양한 도구들이 지원된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;장점&quot;&gt;장점&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;개발 편의성이 오르고 시간을 절약할 수 있다.&lt;/li&gt;
  &lt;li&gt;오류의 폭을 좁힐 수 있다.&lt;/li&gt;
  &lt;li&gt;어느 정도의 코드 품질을 보장한다.&lt;/li&gt;
  &lt;li&gt;유지 보수하기 좋다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;단점&quot;&gt;단점&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;프레임워크의 의존도가 늘어나 개발 능력이 저하될 수 있다.&lt;/li&gt;
  &lt;li&gt;개발자의 자유도가 떨어진다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;라이브러리-란&quot;&gt;라이브러리 란?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;개발 시 활용 가능한 도구들을 모아 모듈화한 것&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;라이브러리와-api-차이&quot;&gt;라이브러리와 API 차이&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;라이브러리 : 실제로 “실행이 되는 기능”을 담당하는 단편화된 프로그램&lt;/li&gt;
  &lt;li&gt;API(Application Programming Interface) : 다른 목적으로 개발된 프로그램/라이브러리 들의 특정 기능을 “호출”하기 위해서 인터페이스를 노출시킨 것&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;프레임워크와-라이브러리-&quot;&gt;프레임워크와 라이브러리 ?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;프레임워크는 단순히 “라이브러리의 집합”은 아니다!&lt;/li&gt;
  &lt;li&gt;프레임워크는 개발자들의 “환경”을 제한하는 대신 일정 “환경”을 제공&lt;/li&gt;
  &lt;li&gt;라이브러리는 내가 원하는 코드를 원할 때 원하는 곳에 가져다 넣을 수 있다. → 즉, “환경”은 없고 의도와 목적만이 존재&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;큐와 스택&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;큐queue&quot;&gt;큐(Queue)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;FIFO(First In First Out), 즉, 선입선출의 방식으로 동작하며, 프로세스 처리, CPU관리 등에 많이 사용된다.&lt;/li&gt;
  &lt;li&gt;큐에 자료를 한 개 집어 넣는 동작을 인큐(EnQueue)라고 하며, 큐 안에 있는 자료를 한 개 꺼내는 동작을 디큐(DeQueue)라고 한다.&lt;/li&gt;
  &lt;li&gt;리스트를 이용한 큐 구현(Linear Queue(선형 큐)) 에서는 디큐로 맨 앞자리를 날렸을 때 남은 부분이 앞으로 한 칸씩 땡겨져 오다 보니 속도 측면에서 단점이 있다.&lt;/li&gt;
  &lt;li&gt;Linear Queue를 보완하기 위해 Circular Queue(원형 큐)가 등장했고, 이는 디큐로 빼 놓은 자리에 인큐로 넣음으로써 낭비를 막는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ex) 버스 또는 택시 등 줄 서기, 롤에서 “큐를 돌린다” 등의 예가 있다.&lt;/p&gt;

&lt;h3 id=&quot;스택stack&quot;&gt;스택(Stack)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;LIFO(Last In First Out), 즉, 후입선출의 방식으로 동작하며, 문서 작업에서 ctrl+z, 캐시 등에 많이 사용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ex) 쌓여 있는 접시 또는 책 등&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;쿠키, 세션, 캐시&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP(HyperText Transfer Protocol)은 브라우저 같은 응용 프로그램을 통해 사용자와 서버 사이에 전송하는 프로토콜이며, 이는 연결 상태를 유지하지 않는 비 연결 프로토콜이라는 특징을 가짐&lt;/li&gt;
  &lt;li&gt;사용자의 요청에 따라 서버에 접속해 응답 데이터를 전송한 뒤 연결을 종료시켜 주다 보니, 매 번 재 연결을 해야 했고, 이러한 단점을 해결하기 위해 쿠키나 세션을 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;쿠키cookie&quot;&gt;쿠키(Cookie)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;사용자의 브라우저에 저장되기 때문에 서버의 자원을 사용할 수 없고, 사용자의 컴퓨터만 있으면 누구나 쿠키 안에 데이터를 확인할 수 있기 때문에 보안성이 낮다.&lt;/li&gt;
  &lt;li&gt;Cookie는 인터넷 사용자가 특정 웹서버에 접속할 때, 생성되는 개인 아이디와 비밀번호, 방문한 사이트의 정보를 담은 임시 파일로써, Server가 아닌 Client에 텍스트 파일로 저장되어 다음에 해당 웹서버를 찾을 경우 웹서버에서는 그가 누구인지 어떤 정보를 주로 찾았는지 등을 파악할 때 사용&lt;/li&gt;
  &lt;li&gt;예를 들어, 검색 키워드 정보나 자동 로그인 유지 정보, 팝업 보지 않기, 쇼핑 카트나 위시 리스트 저장, 특정 웹사이트에 방문한 적이 있는지, 또 접속했다면 얼마나 자주 방문했는지 등에 관한 정보들을 담고 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;세션session&quot;&gt;세션(Session)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;클라이언트와 웹 서버간에 네트워크 연결이 지속적으로 유지되고 있는 상태&lt;/li&gt;
  &lt;li&gt;서버에 접속하지 않는 이상 데이터를 탈취할 수 어렵기 때문에 중요한 데이터를 저장하는데 주로 사용&lt;/li&gt;
  &lt;li&gt;세션에 관련된 데이터는 서버에 저장 → 쿠키에 비해 보안성이 높음&lt;/li&gt;
  &lt;li&gt;웹 브라우저의 캐시에 저장되어 브라우저가 닫히거나 서버에서 삭제 시 사라짐&lt;/li&gt;
  &lt;li&gt;예를 들어, 로그인 정보 유지에 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;캐시cache&quot;&gt;캐시(Cache)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;데이터나 값을 미리 복사해 임시로 저장해두는 장소를 의미&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Process vs Thread&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;process&quot;&gt;Process&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;운영체제로부터 자원을 할당받는 작업의 단위&lt;/li&gt;
  &lt;li&gt;컴퓨터에서 실행 중인 컴퓨터 프로그램&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;thread&quot;&gt;Thread&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;프로세스가 할당받은 자원을 이용하는 실행의 단위&lt;/li&gt;
  &lt;li&gt;하나의 프로세스가 생성되면 하나의 스레드가 같이 생성 → 메인 스레드&lt;/li&gt;
  &lt;li&gt;여러 개의 스레드를 가질 수 있음 → 멀티 스레드&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;컨텍스트 스위칭 오버헤드 정도&lt;/li&gt;
  &lt;li&gt;자원 공유 가능 여부&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;MultiThread 에서 작업할 때 발생하는 문제&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;Thread 란? 위에 설명 했듯, 프로그램의 흐름을 말한다.&lt;/li&gt;
  &lt;li&gt;Multi Thread 란? 프로그램의 흐름이 2개 이상인 것을 말한다. 매우 빠른 시간 간격으로 스위칭 되기 때문에 동시( = concurrent )에 실행되는 것처럼 보인다.&lt;/li&gt;
  &lt;li&gt;Process Synchronization(프로세스 동기화 = Thread Synchronization) 이란? 서로 간에 영향을 주고 받는 데이터들 간에 데이터의 일관성이 유지될 수 있도록 해주는 것!&lt;/li&gt;
  &lt;li&gt;MultiThead 실행 방법&lt;br /&gt;
동시성( Concurrency ) : 멀티 작업을 위해 1개의 코어로 스레드마다 돌아가면서 실행하지만, 너무 빨라 독립적으로 돌아가는 것 처럼 보임&lt;br /&gt;
병렬성( Parallelism ) : 스레드마다 독립적인 core가 할당되어 독립적인 core에서 작업이 이뤄지는 것을 말함&lt;br /&gt;
코어 &amp;gt; 쓰레드 → 병렬성 보장&lt;br /&gt;
코어 &amp;lt; 쓰레드 → 병렬설 보장 x, 동시성 보장을 위해 우선순위를 매겨줌 → 쓰레드 스케쥴링&lt;/li&gt;
  &lt;li&gt;쓰레드 스케쥴링 방식&lt;br /&gt;
우선 순위( Priority ) 방식 : 우선 순위가 높은( 1 : 낮음, 10 : 높음 ) 쓰레드가 실행을 더 많이 하도록 스케줄링하는 방법&lt;br /&gt;
순환 할당( Round-Robin ) 방식 : 시간 할당량을 정해 쓰레드를 정해진 시간 만큼만 실행하는 방법으로, JVM 안에서 이루어 지기 떄문에 개발자가 제어할 수 없음&lt;/li&gt;
  &lt;li&gt;Multi Thread(Thread 2개)에서 하나의 공통된 값을 가져다 쓰면서 변경해, 그럴 경우 값을 유지하는 방법은?&lt;br /&gt;
3번에서 얘기한 대로, 동기화를 이용하면 된다. 동기화 방법으로 동기화 메소드와 동기화 블록 방법 등이 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hash 란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;Hash 함수 ? Hash 알고리즘을 구현하여 원본 데이터만 넣으면 Hash 값을 내보내 주는 함수&lt;br /&gt;
Hash 알고리즘 ? 가변적인 데이터의 길이를 고정적인 데이터 길이로 변환해 주는 알고리즘&lt;/p&gt;

&lt;p&gt;Hash 값의 특징 ?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Hash 값은 원본으로 되돌릴 수 없음( 계산을 통해 원본을 얻어내기 어렵다 → 원본을 알아낼 수 없게 암호화하는 단방향 암호화에 많이 사용 )&lt;/li&gt;
  &lt;li&gt;원본 데이터가 같으면 Hash 값도 일정( 정해진 알고리즘을 통해 원본 데이터를 규칙에 맞게 변경하므로 원본 데이터가 같으면 Hash도 같다  )&lt;/li&gt;
  &lt;li&gt;충돌 가능성이 존재( Hash 값은 정해진 길이(길이는 알고리즘마다 다르게 정해짐)의 값 이기 때문에 원본이 다르다고 무조건 다른 값을 만들 순 없다 → 확률이 적다 )&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hash 알고리즘의 용도 ?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;무결성의 확인 ?&lt;br /&gt;
무결성이란 데이터가 변했는지 변하지 않았는지의 여부&lt;br /&gt;
Hash 알고리즘을 사용하면 원본이 같으면 같은 Hash 값 나오기 때문에, 원본과 Hash 값을 직접 비교할 수 있다는 장점이 있다.&lt;br /&gt;
아무리 큰 데이터여도 고정된 길이의 Hash 값으로 바꿀 수 있기 때문에 비교 속다가 빠르다는 장점이 있다.&lt;/li&gt;
  &lt;li&gt;검색 속도를 높이는 용도로 사용 ?&lt;br /&gt;
예를 들어, 많은 데이터를 가진 DB에서 “chu”를 찾기 위해선 한 글자씩 찾아야 한다. → 퍼포먼스 떨어짐 → Hash 함수를 통해 DB의 데이터를 고정된 크기의 Hash 값을 가진 공간(Bucket)을 만들어 저장하고 원본에 링크해 놓는 다면, 검색 값인 “chu”를 Hash 함수를 거친 Hash 값으로 bucket과 매칭시킨다면, 바로 링크된 원본을 찾아낼 수 있다. → bucket을 만드는 공간이 소요되지만, 검색이 굉장히 빨라지는 장점이 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;질문!&lt;br /&gt;
Hash 값으로 변경되더라도 하나씩 비교해줘야 하는거 같은데, 왜 빠르지?&lt;br /&gt;
해시 검색을 위해서는 검색에 효율적인 이진 트리 방식을 사용한다. 이를 사용하기 위해서는 모든 값이 같은 크기의 공간에 담을 수 있는 서로 비교 가능한 숫자여야 하기 때문에 &lt;em&gt;Hash 함수를 통해 정수 값으로 만든 후 이진 트리 형태로 정렬하여 검색에 사용&lt;/em&gt;하는 것.&lt;br /&gt;
Hash 함수는 Hash 형식에 따라 특정 길이(128비트, 256비트, 512비트 등)로 정해져 있다. 이는 해당 길이 만큼의 정수 값으로 변환 시켜주는 것. 따라서 구조적으로 가변적인 길이의 문자열을 1바이트씩 직접 비교하는 것보다 빠릅니다.&lt;/p&gt;

&lt;p&gt;Hash 함수 사용 시 주의점 ?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Salt 의 사용?&lt;br /&gt;
보안 목적으로 사용 시 반드시 사용 → 원본 데이터에 첨가(salt)해서 Hash 알고리즘을 통해 salt를 첨가한 Hash 값을 보낸다.&lt;br /&gt;
→ 즉, 원본 데이터에 salt를 첨가해 Hash 값을 다르게 만들기 위해 사용한다.&lt;br /&gt;
→ 왜 다르게 하지? → Hash 값을 통해 원본을 알아낼 수 있는 방법이 있다!? → Brute-Forca Attack( 무작위로 문자열을 대입하는 해킹 방법 ) 으로 가능하며, 이는 Hash 함수에 무작위 값을 넣어 나온 Hash 값을 해킹해 낸 Hash 값과 대조하여 원본을 알아내는 것이다.&lt;br /&gt;
따라서, 아래와 같은 사항을 따르는게 좋다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1) Salt를 첨가하여 Hash 값을 다르게 한다.&lt;br /&gt;
2) Salt의 길이를 허용하는 한 길게 함&lt;br /&gt;
3) Salt를 안전하게 보관함&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Key stretching 의 사용?&lt;br /&gt;
Hash 함수를 여러 번 통과시키는데 사용 → 이는 Hash 함수를 거쳐 나온 Hash 값을 다른 Hash 함수에 거치는 작업을 반복함으로써 어렵게 하는 방식이다.&lt;/li&gt;
  &lt;li&gt;충돌의 회피 ?&lt;br /&gt;
데이터 저장의 목적으로 사용 시 사용 → 단점인 서로 다른 값 이더라도 Hash 값이 같을 확률이 존재! → 보안에도, 데이터 저장에도 큰 문제!! → 이를 위해 아래와 같은 사항이 추가된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1) 리스트로 데이터를 관리하는 Chaining&lt;br /&gt;
2) 위치를 조정하는 Open Addressing&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;RestFul Api ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;REpresentational State Transfer, 즉, 서버로 자원을 전달 시, 대표적인 “상태”를 함께 주고 그 상태에 맞는 응답을 서버에서 받는 것을 의미한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rest-&quot;&gt;REST ?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP URI(Uniform Resource Identifier)를 통해 자원(Resource)을 명시하고, HTTP Method(POST, GET, PUT, DELETE)를 통해 해당 자원에 대한 CRUD Operation을 적용하는 방식으로 동작&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rest-api-&quot;&gt;REST API ?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;REST 기반으로 서비스 API를 구현한 것&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;http-method&quot;&gt;HTTP Method&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;POST : URI 요청 시 리소스 생성을 위해 설계되었기 때문에 body에 데이터를 담아 보내기 때문에 url에 보이지 않는다. 즉, 정보를 생성하기 위해 만들어짐.&lt;/li&gt;
  &lt;li&gt;GET : 해당 리소스를 조회하게 설계되었기 때문에, 원하는 값을 url에 보여준다. 즉, 정보를 조회하기 위해 만들어짐.&lt;/li&gt;
  &lt;li&gt;PUT or PATCH or UPDATE : 해당 리소스를 수정&lt;/li&gt;
  &lt;li&gt;DELETE : 해당 리소스를 삭제&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="android" />
      

      
        <summary type="html">컴퓨터과학 면접 준비</summary>
      

      
      
    </entry>
  
</feed>
