<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://lee989898.github.io/tag/kotlin/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://lee989898.github.io/" rel="alternate" type="text/html" />
  <updated>2021-10-25T18:48:50+09:00</updated>
  <id>https://lee989898.github.io/tag/kotlin/feed.xml</id>

  
  
  

  
    <title type="html">LEE | </title>
  

  
    <subtitle>공부 블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Kotlin 24</title>
      <link href="https://lee989898.github.io/kotlin-24" rel="alternate" type="text/html" title="Kotlin 24" />
      <published>2021-08-09T01:07:00+09:00</published>
      <updated>2021-08-09T01:07:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-24</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-24">&lt;h3 id=&quot;__&quot;&gt;&lt;em&gt;__&lt;/em&gt;&lt;/h3&gt;

&lt;hr /&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">__</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Kotlin 23</title>
      <link href="https://lee989898.github.io/kotlin-23" rel="alternate" type="text/html" title="Kotlin 23" />
      <published>2021-08-09T01:07:00+09:00</published>
      <updated>2021-08-09T01:07:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-23</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-23">&lt;h3 id=&quot;__&quot;&gt;&lt;em&gt;__&lt;/em&gt;&lt;/h3&gt;

&lt;hr /&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">__</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Kotlin 22</title>
      <link href="https://lee989898.github.io/kotlin-22" rel="alternate" type="text/html" title="Kotlin 22" />
      <published>2021-08-09T01:07:00+09:00</published>
      <updated>2021-08-09T01:07:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-22</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-22">&lt;h3 id=&quot;__&quot;&gt;&lt;em&gt;__&lt;/em&gt;&lt;/h3&gt;

&lt;hr /&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">__</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Kotlin 21</title>
      <link href="https://lee989898.github.io/kotlin-21" rel="alternate" type="text/html" title="Kotlin 21" />
      <published>2021-08-09T01:07:00+09:00</published>
      <updated>2021-08-09T01:07:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-21</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-21">&lt;h3 id=&quot;__&quot;&gt;&lt;em&gt;__&lt;/em&gt;&lt;/h3&gt;

&lt;hr /&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">__</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Kotlin 20</title>
      <link href="https://lee989898.github.io/kotlin-20" rel="alternate" type="text/html" title="Kotlin 20" />
      <published>2021-08-09T01:07:00+09:00</published>
      <updated>2021-08-09T01:07:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-20</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-20">&lt;h3 id=&quot;__&quot;&gt;&lt;em&gt;__&lt;/em&gt;&lt;/h3&gt;

&lt;hr /&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">__</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Data Class, Enum Class</title>
      <link href="https://lee989898.github.io/kotlin-19" rel="alternate" type="text/html" title="Data Class, Enum Class" />
      <published>2021-08-09T01:07:00+09:00</published>
      <updated>2021-08-09T01:07:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-19</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-19">&lt;h3 id=&quot;data-class-enum-class&quot;&gt;&lt;strong&gt;Data class, Enum class&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Data class&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;데이터를 다루는 데에 최적화된 class로 5가지 기능을 내부적으로 자동으로 생성해줍니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;내용의 동일성을 판단하는 equals()의 자동구현&lt;/li&gt;
  &lt;li&gt;객체의 내용에서 고유한 코드를 생성하는 hashcode()의 자동구현&lt;/li&gt;
  &lt;li&gt;포함된 속성을 보기쉽게 나타내는 toString()의 자동구현&lt;/li&gt;
  &lt;li&gt;객체를 복사형 똑깥은 내용의 새 객체를 만드는 copy()의 자동구현 (아무 패러미터가 없으면 똑같은 내용으로 생성합니다.)&lt;/li&gt;
  &lt;li&gt;속성을 순서대로 반환하는 componentX()의 자동구현&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;noscript&gt;&lt;pre&gt;fun main(){
   
    val a = General(&amp;quot;보영&amp;quot;, 212)
    
    println(a == General(&amp;quot;보영&amp;quot;,212))
    println(a.hashCode())
    println(a)
    
    val b = Data(&amp;quot;루다&amp;quot;, 306)
    
    println(b == Data(&amp;quot;보영&amp;quot;,306))
    println(b.hashCode())
    println(b)
    
    println(b.copy())
    println(b.copy(&amp;quot;아린&amp;quot;))
    println(b.copy(id = 618))
    
    val list = listOf(Data(&amp;quot;보영&amp;quot;,212),
                     Data(&amp;quot;루다&amp;quot;, 306),
                     Data(&amp;quot;아린&amp;quot;, 618))
    
    for((a,b) in list){
        println(&amp;quot;${a}, ${b}&amp;quot;)
    }
    
}

class General(val name: String, val id: Int)

data class Data(val name: String, val id: Int)&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/e23d9ca9273b34cb3db29a2e1939e1ee.js&quot;&gt; &lt;/script&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Enum class&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;enum 클래스 안의 객체들은 관행적으로 상수를 나타낼 때 사용하는 대문자로 기술합니다
일반 클래스처럼 함수도 추가할 수 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;noscript&gt;&lt;pre&gt;fun main(){
   
    var state = State.SING
    println(state)
    
    state = State.SLEEP
    println(state.isSleeping())
    
    state = State.EAT
    println(state.message)
   
}

enum class State(val message: String){
    SING(&amp;quot;노래를 부릅니다&amp;quot;),
    EAT(&amp;quot;밥을 먹습니다&amp;quot;),
    SLEEP(&amp;quot;잠을 잡니다&amp;quot;);
    
    fun isSleeping() = this == State.SLEEP
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/d097f4a47ad6697acbc4de13c4e8c628.js&quot;&gt; &lt;/script&gt;

&lt;hr /&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">Data class, Enum class</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">중첩클래스와 내부클래스</title>
      <link href="https://lee989898.github.io/kotlin-18" rel="alternate" type="text/html" title="중첩클래스와 내부클래스" />
      <published>2021-08-09T01:07:00+09:00</published>
      <updated>2021-08-09T01:07:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-18</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-18">&lt;h3 id=&quot;중첩클래스와-내부클래스&quot;&gt;&lt;strong&gt;중첩클래스와 내부클래스&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;중첩클래스&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;하나의 클래스가 다른 클래스의 기능과 강하게 연관되어 있다는 의미를 전달하기 위해 만들어진 형식입니다.
외부 클래스의 내용을 공유할 수 없습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;내부클래스&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;혼자서 객체를 만들 수 는 없고 외부 클래스의 객체가 있어야만 생성과 사용이 가능한 클래스입니다.
외부 클래스의 속성과 함수의 사용이 가능합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;noscript&gt;&lt;pre&gt;fun main(){
    Outer.Nested().introduce()
    
    val outer = Outer()
    val inner = outer.Inner()
    
    inner.introduceInner()
    inner.introduceOuter()
    
    outer.text = &amp;quot;Changed Outer Class&amp;quot;
    inner.introduceOuter()
    
}

class Outer{
    var text = &amp;quot;Outer Class&amp;quot;
    
    class Nested{
        fun introduce(){
            println(&amp;quot;Nested Class&amp;quot;)
        }
    }
    
    inner class Inner{
        var text = &amp;quot;Inner Class&amp;quot;
        
        fun introduceInner(){
            println(text)
        }
        
        fun introduceOuter(){
            println(this@Outer.text)
        }
    }
    
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/c44bedfff6e95fdb2ccc0009ecea148b.js&quot;&gt; &lt;/script&gt;

&lt;hr /&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">중첩클래스와 내부클래스</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">함수의 argument</title>
      <link href="https://lee989898.github.io/kotlin-17" rel="alternate" type="text/html" title="함수의 argument" />
      <published>2021-08-09T01:07:00+09:00</published>
      <updated>2021-08-09T01:07:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-17</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-17">&lt;h3 id=&quot;함수의-argument를-다루는-방법과-infix-함수&quot;&gt;&lt;strong&gt;함수의 argument를 다루는 방법과 infix 함수&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;오버로딩&lt;/p&gt;
&lt;/blockquote&gt;

&lt;noscript&gt;&lt;pre&gt;fun main() {
    
    read(7)
    read(&amp;quot;감사합니다&amp;quot;)
    
}

fun read(x: Int){
    println(&amp;quot;숫자 $x 입니다&amp;quot;)
}

fun read(x: String){
    println(x)
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/13d8d849738102a035de17912f51828c.js&quot;&gt; &lt;/script&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;default arguments&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;noscript&gt;&lt;pre&gt;fun main(){
    
    deliveryItem(&amp;quot;짬뽕&amp;quot;)
    deliveryItem(&amp;quot;책&amp;quot;,3)
    deliveryItem(&amp;quot;노트북&amp;quot;,30,&amp;quot;학교&amp;quot;)
    
}

fun deliveryItem(name: String, count: Int = 1, destination: String = &amp;quot;집&amp;quot;){
    println(&amp;quot;${name}, ${count}개를 ${destination}에 배달하였습니다&amp;quot;)
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/9de11bfc480624f5bc06d19911a4c6e3.js&quot;&gt; &lt;/script&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;named arguments&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;noscript&gt;&lt;pre&gt;fun main(){
    
    deliveryItem(&amp;quot;짬뽕&amp;quot;)
    deliveryItem(&amp;quot;책&amp;quot;,3)
    deliveryItem(&amp;quot;노트북&amp;quot;,30,&amp;quot;학교&amp;quot;)
    
    deliveryItem(&amp;quot;선물&amp;quot;, destination = &amp;quot;친구집&amp;quot;)
    
}

fun deliveryItem(name: String, count: Int = 1, destination: String = &amp;quot;집&amp;quot;){
    println(&amp;quot;${name}, ${count}개를 ${destination}에 배달하였습니다&amp;quot;)
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/4fb2130c74025ce5f00c6b013a33d1ad.js&quot;&gt; &lt;/script&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;variable number of arguments(vararg)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다른 패러미터랑 같이 쓸때는 맨 마지막에 위치해야 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;noscript&gt;&lt;pre&gt;fun main(){
    
    sum(1,2,3,4)
    
}

fun sum(vararg numbers: Int){
    var sum = 0
    
    for(n in numbers)
    {
        sum += n
    }
    
    print(sum)
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/478bfd4a8bf47ef613cc44616873fb1b.js&quot;&gt; &lt;/script&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;infix function&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;noscript&gt;&lt;pre&gt;fun main(){
    
    println(6 multiply 4)
    
    println(6.multiply(4))
    
}

infix fun Int.multiply(x: Int): Int = this * x
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/b355c68ffe68f3b0a8b04bb0361fedbd.js&quot;&gt; &lt;/script&gt;

&lt;hr /&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">함수의 argument를 다루는 방법과 infix 함수</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">문자열을 다루는 법</title>
      <link href="https://lee989898.github.io/kotlin-16" rel="alternate" type="text/html" title="문자열을 다루는 법" />
      <published>2021-08-09T01:07:00+09:00</published>
      <updated>2021-08-09T01:07:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-16</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-16">&lt;h3 id=&quot;문자열을-다루는-법&quot;&gt;&lt;strong&gt;문자열을 다루는 법&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;유용한 문자열 함수&lt;/p&gt;
&lt;/blockquote&gt;

&lt;noscript&gt;&lt;pre&gt;fun main(){
    
    val test1 = &amp;quot;Test.Kotlin.String&amp;quot;
    
    println(test1.length)
    
    println(test1.toLowerCase())
    println(test1.toUpperCase())
    
    val test2 = test1.split(&amp;quot;.&amp;quot;)
    println(test2)
    
    println(test2.joinToString())
    println(test2.joinToString(&amp;quot;-&amp;quot;))
    
    println(test1.substring(5..10))
}
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/a5b7e13ea3ad4457e843903930d7e2d0.js&quot;&gt; &lt;/script&gt;

&lt;hr /&gt;

&lt;noscript&gt;&lt;pre&gt;fun main(){
    
    val nullString: String? = null
    val emptyString = &amp;quot;&amp;quot;
    val blankString = &amp;quot; &amp;quot;
    val normalString = &amp;quot;A&amp;quot;
    
    println(nullString.isNullOrEmpty())
    println(emptyString.isNullOrEmpty())
    println(blankString.isNullOrEmpty())
    println(normalString.isNullOrEmpty())
    
    println()
    
    println(nullString.isNullOrBlank())
    println(emptyString.isNullOrBlank())
    println(blankString.isNullOrBlank())
    println(normalString.isNullOrBlank())
    
    
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/df707ad93358fb3318c6f07768da786a.js&quot;&gt; &lt;/script&gt;

&lt;hr /&gt;

&lt;noscript&gt;&lt;pre&gt;fun main(){
    
    var test3 = &amp;quot;kotlin.kt&amp;quot;
    var test4 = &amp;quot;java.java&amp;quot;
    
    println(test3.startsWith(&amp;quot;java&amp;quot;))
    println(test4.startsWith(&amp;quot;java&amp;quot;))
    
    println(test3.endsWith(&amp;quot;.kt&amp;quot;))
    println(test4.endsWith(&amp;quot;.kt&amp;quot;))
    
    println(test3.contains(&amp;quot;lin&amp;quot;))
    println(test4.contains(&amp;quot;lin&amp;quot;))
    
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/7034239446c17184289ecf1947e49d41.js&quot;&gt; &lt;/script&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;null 값 처리하는 방법&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;nullable 변수는 null 상태로 속성이나 함수를 쓰려고 하면 null pointer excption이 발생합니다.
null체크를 하기 위해 일일히 if문으로 조건을 체크할 수 있습니다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;?. (null safe operator): 참조연산자를 실행하기 전에 먼저 객체가 null인지를 확인부터 하고 객체가 null이라면 뒤 따라오는 구문을 실행하지 않습니다.&lt;/li&gt;
  &lt;li&gt;?: (elvis operator): 객체가 null이 아니라면 그대로 사용하지만 null이라면 연산자가 우측의 객체로 대체됩니다.&lt;/li&gt;
  &lt;li&gt;!!.(non-null assertion operator): 참조연산자를 사용할때 null 여부를 컴파일시 확인하지 않도록 하여 런타임시 null pointer exeception이 나도록 의도적으로 방치하는 연산자입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;noscript&gt;&lt;pre&gt;fun main() {
    
    var a: String? = null
    
    println(a?.toUpperCase())
    println(a?:&amp;quot;default&amp;quot;.toUpperCase())
    println(a!!.toUpperCase())
    
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/58110a0c5b3dcd922dc0e79188dfe841.js&quot;&gt; &lt;/script&gt;

&lt;hr /&gt;

&lt;p&gt;null safe 연산자는 스코프 함수와 사용하면 더욱 편리합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;noscript&gt;&lt;pre&gt;fun main() {
    
    var a: String? = &amp;quot;Kotlin Exam&amp;quot;
    
    a?.run{
        println(toUpperCase())
        println(toUpperCase())
    }
    
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/41388a281fe1bf59704261003cd05604.js&quot;&gt; &lt;/script&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;변수의 동일성 체크&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;동일성에는 두가지 개념이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;내용의 동일성: 메모리상의 서로 다른 곳에 할당된 객체라고 해도 그 내용이 같으면 동일 하다고 판단합니다
ex) a == b&lt;/li&gt;
  &lt;li&gt;객체의 동일성: 서로다른 변수가 메모리 상의 같은 객체를 가리키고 있을때만 동일 하다고 판단합니다
ex) a === b&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;noscript&gt;&lt;pre&gt;fun main() {
    
    var a = Product(&amp;quot;콜라&amp;quot;, 1000)
    var b = Product(&amp;quot;콜라&amp;quot;, 1000)
    var c = a
    var d = Product(&amp;quot;사이다&amp;quot;, 1000)
    
    println(a == b)
    println(a === b)
    
    println(a == c)
    println(a === c)
    
    println(a == d)
    println(a === d)
     
}

class Product(val name: String, val price: Int){
    override fun equals(other: Any?): Boolean{
        if(other is Product)
        {
            return other.name == name &amp;amp;&amp;amp; other.price == price
        }else{
            return false
        }
    }
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/ce37157d8e6b2bba98a9a9909582ca95.js&quot;&gt; &lt;/script&gt;

&lt;hr /&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">문자열을 다루는 법</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">리스트</title>
      <link href="https://lee989898.github.io/kotlin-15" rel="alternate" type="text/html" title="리스트" />
      <published>2021-08-09T01:07:00+09:00</published>
      <updated>2021-08-09T01:07:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-15</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-15">&lt;h3 id=&quot;리스트&quot;&gt;&lt;strong&gt;리스트&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;List&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;데이터를 모아 관리하는 Collection 클래스를 상속받는 서브 클래스중 가장 단순한 형태입니다.
리스트에는 2가지가 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;List&amp;lt;out T&amp;gt;&lt;/li&gt;
  &lt;li&gt;MutableList&amp;lt;T&amp;gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;noscript&gt;&lt;pre&gt;fun main(){
    
    val a = listOf(&amp;quot;사과&amp;quot;, &amp;quot;딸기&amp;quot;, &amp;quot;배&amp;quot;)
    println(a[1])
    
    for(fruit in a)
    {
        print(&amp;quot;${fruit}&amp;quot;)
    }
    
    println()
    
    val b = mutableListOf(6,3,1)
    println(b)
    
    b.add(4)
    println(b)
    
    b.add(2,8)
    println(b)
    
    b.removeAt(1)
    println(b)
    
    b.shuffle()
    println(b)
    
    b.sort()
    println(b)
    
  
}
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/6f0f9568e1c2b73e70d3508f022f52c8.js&quot;&gt; &lt;/script&gt;

&lt;hr /&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">리스트</summary>
      

      
      
    </entry>
  
</feed>
