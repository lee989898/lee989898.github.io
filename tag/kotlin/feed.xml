<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://lee989898.github.io/tag/kotlin/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://lee989898.github.io/" rel="alternate" type="text/html" />
  <updated>2021-10-19T23:37:51+09:00</updated>
  <id>https://lee989898.github.io/tag/kotlin/feed.xml</id>

  
  
  

  
    <title type="html">LEE | </title>
  

  
    <subtitle>공부 블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">클래스의 상속</title>
      <link href="https://lee989898.github.io/kotlin-10" rel="alternate" type="text/html" title="클래스의 상속" />
      <published>2021-09-25T01:07:00+09:00</published>
      <updated>2021-09-25T01:07:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-10</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-10">&lt;h1 id=&quot;클래스의-상속&quot;&gt;클래스의 상속&lt;/h1&gt;

&lt;hr /&gt;

&lt;noscript&gt;&lt;pre&gt;fun main() {
    var intValue:Int = 1234
    var LongValue:Long = 1234L
    var intValueByHex:Int = 0x1af
    var intValueByBin:Int = 0b10110110
    
    var doubleValue:Double = 123.5
    var doubleValueWithExp: Double = 123.5e10
    var floatValue:Float = 123.5f
    
    var charValue: Char = &amp;#39;a&amp;#39;
    var koreanCharValue: Char = &amp;#39;가&amp;#39;
    
    var booleanValue: Boolean = true
    
    var stringValue = &amp;quot;one line string test&amp;quot;
    
    val multiLineStringValue = &amp;quot;&amp;quot;&amp;quot;multiline
    string
    test&amp;quot;&amp;quot;&amp;quot;
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/c6ccc4221fdbd96eae8b91fa55199f92.js&quot;&gt; &lt;/script&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">클래스의 상속</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">클래스의 생성</title>
      <link href="https://lee989898.github.io/kotlin-09" rel="alternate" type="text/html" title="클래스의 생성" />
      <published>2021-09-25T01:07:00+09:00</published>
      <updated>2021-09-25T01:07:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-09</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-09">&lt;h1 id=&quot;클래스의-생성&quot;&gt;클래스의 생성&lt;/h1&gt;

&lt;hr /&gt;

&lt;noscript&gt;&lt;pre&gt;fun main() {
    var intValue:Int = 1234
    var LongValue:Long = 1234L
    var intValueByHex:Int = 0x1af
    var intValueByBin:Int = 0b10110110
    
    var doubleValue:Double = 123.5
    var doubleValueWithExp: Double = 123.5e10
    var floatValue:Float = 123.5f
    
    var charValue: Char = &amp;#39;a&amp;#39;
    var koreanCharValue: Char = &amp;#39;가&amp;#39;
    
    var booleanValue: Boolean = true
    
    var stringValue = &amp;quot;one line string test&amp;quot;
    
    val multiLineStringValue = &amp;quot;&amp;quot;&amp;quot;multiline
    string
    test&amp;quot;&amp;quot;&amp;quot;
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/c6ccc4221fdbd96eae8b91fa55199f92.js&quot;&gt; &lt;/script&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">클래스의 생성</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">클래스의 기본구조</title>
      <link href="https://lee989898.github.io/kotlin-08" rel="alternate" type="text/html" title="클래스의 기본구조" />
      <published>2021-09-25T01:07:00+09:00</published>
      <updated>2021-09-25T01:07:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-08</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-08">&lt;h1 id=&quot;클래스의-기본구조&quot;&gt;클래스의 기본구조&lt;/h1&gt;

&lt;hr /&gt;

&lt;noscript&gt;&lt;pre&gt;fun main() {
    var intValue:Int = 1234
    var LongValue:Long = 1234L
    var intValueByHex:Int = 0x1af
    var intValueByBin:Int = 0b10110110
    
    var doubleValue:Double = 123.5
    var doubleValueWithExp: Double = 123.5e10
    var floatValue:Float = 123.5f
    
    var charValue: Char = &amp;#39;a&amp;#39;
    var koreanCharValue: Char = &amp;#39;가&amp;#39;
    
    var booleanValue: Boolean = true
    
    var stringValue = &amp;quot;one line string test&amp;quot;
    
    val multiLineStringValue = &amp;quot;&amp;quot;&amp;quot;multiline
    string
    test&amp;quot;&amp;quot;&amp;quot;
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/c6ccc4221fdbd96eae8b91fa55199f92.js&quot;&gt; &lt;/script&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">클래스의 기본구조</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">흐름제어와 논리연산자</title>
      <link href="https://lee989898.github.io/kotlin-07" rel="alternate" type="text/html" title="흐름제어와 논리연산자" />
      <published>2021-09-25T01:07:00+09:00</published>
      <updated>2021-09-25T01:07:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-07</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-07">&lt;h1 id=&quot;흐름제어와-논리연산자&quot;&gt;흐름제어와 논리연산자&lt;/h1&gt;

&lt;hr /&gt;

&lt;noscript&gt;&lt;pre&gt;fun main() {
    var intValue:Int = 1234
    var LongValue:Long = 1234L
    var intValueByHex:Int = 0x1af
    var intValueByBin:Int = 0b10110110
    
    var doubleValue:Double = 123.5
    var doubleValueWithExp: Double = 123.5e10
    var floatValue:Float = 123.5f
    
    var charValue: Char = &amp;#39;a&amp;#39;
    var koreanCharValue: Char = &amp;#39;가&amp;#39;
    
    var booleanValue: Boolean = true
    
    var stringValue = &amp;quot;one line string test&amp;quot;
    
    val multiLineStringValue = &amp;quot;&amp;quot;&amp;quot;multiline
    string
    test&amp;quot;&amp;quot;&amp;quot;
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/c6ccc4221fdbd96eae8b91fa55199f92.js&quot;&gt; &lt;/script&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">흐름제어와 논리연산자</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">반복문과 증감연산자</title>
      <link href="https://lee989898.github.io/kotlin-06" rel="alternate" type="text/html" title="반복문과 증감연산자" />
      <published>2021-09-25T01:07:00+09:00</published>
      <updated>2021-09-25T01:07:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-06</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-06">&lt;h1 id=&quot;반복문과-증감연산자&quot;&gt;반복문과 증감연산자&lt;/h1&gt;

&lt;hr /&gt;

&lt;noscript&gt;&lt;pre&gt;fun main() {
    var intValue:Int = 1234
    var LongValue:Long = 1234L
    var intValueByHex:Int = 0x1af
    var intValueByBin:Int = 0b10110110
    
    var doubleValue:Double = 123.5
    var doubleValueWithExp: Double = 123.5e10
    var floatValue:Float = 123.5f
    
    var charValue: Char = &amp;#39;a&amp;#39;
    var koreanCharValue: Char = &amp;#39;가&amp;#39;
    
    var booleanValue: Boolean = true
    
    var stringValue = &amp;quot;one line string test&amp;quot;
    
    val multiLineStringValue = &amp;quot;&amp;quot;&amp;quot;multiline
    string
    test&amp;quot;&amp;quot;&amp;quot;
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/c6ccc4221fdbd96eae8b91fa55199f92.js&quot;&gt; &lt;/script&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">반복문과 증감연산자</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">조건문과 비교연산자</title>
      <link href="https://lee989898.github.io/kotlin-05" rel="alternate" type="text/html" title="조건문과 비교연산자" />
      <published>2021-09-25T01:07:00+09:00</published>
      <updated>2021-09-25T01:07:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-05</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-05">&lt;h1 id=&quot;조건문과-비교연산자&quot;&gt;조건문과 비교연산자&lt;/h1&gt;

&lt;hr /&gt;

&lt;noscript&gt;&lt;pre&gt;fun main() {
    var intValue:Int = 1234
    var LongValue:Long = 1234L
    var intValueByHex:Int = 0x1af
    var intValueByBin:Int = 0b10110110
    
    var doubleValue:Double = 123.5
    var doubleValueWithExp: Double = 123.5e10
    var floatValue:Float = 123.5f
    
    var charValue: Char = &amp;#39;a&amp;#39;
    var koreanCharValue: Char = &amp;#39;가&amp;#39;
    
    var booleanValue: Boolean = true
    
    var stringValue = &amp;quot;one line string test&amp;quot;
    
    val multiLineStringValue = &amp;quot;&amp;quot;&amp;quot;multiline
    string
    test&amp;quot;&amp;quot;&amp;quot;
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/c6ccc4221fdbd96eae8b91fa55199f92.js&quot;&gt; &lt;/script&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">조건문과 비교연산자</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">타입추론과 함수</title>
      <link href="https://lee989898.github.io/kotlin-04" rel="alternate" type="text/html" title="타입추론과 함수" />
      <published>2021-09-25T01:07:00+09:00</published>
      <updated>2021-09-25T01:07:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-04</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-04">&lt;h1 id=&quot;타입추론과-함수&quot;&gt;타입추론과 함수&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;타입추론&quot;&gt;타입추론&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;타입추론은 변수나 함수들을 선언할 때나 연산이 이루어 질 떄
자료형을 코드에 명시하지 않아도 코틀린이 자동으로 자료형을 추론해주는
기능입니다&lt;/p&gt;

&lt;p&gt;변수가 선언될 때 할당된 값의 형태로 해당 변수가 어떤 자료형을 가지는지 
추론이 가능하기 때문입니다&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;fun main() {
    
   var a = 1234
   var b = 1234L
   
   var c = 12.45
   var d = 12.45f
    
   var e = 0xABCD
   var f = 0b01010101
    
   var g = true
   var h = &amp;#39;c&amp;#39;
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/425656230beda11e903155fee1a0eb07.js&quot;&gt; &lt;/script&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;함수&quot;&gt;함수&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;함수는 특정한 동작을 하거나 원하는 결과값을 연산하는데 사용합니다.&lt;/p&gt;

&lt;p&gt;함수안에서 return은 뒤에 오는 값을 반환하는 키워드로 return이 발생하면
함수의 중간이더라도 값을 반환하고 함수를 종료합니다&lt;/p&gt;

&lt;p&gt;코틀린은 함수를 좀 더 간단하게 기술할 수
 있도록 단일 표현식 함수를 지원합니다&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;fun main() {
    
    println(add(5,6,7))
   
}

fun add(a: Int, b: Int, c: Int): Int{
    return a+b+c    
}

fun add(a: Int, b: Int, c: Int) = a + b + c //위 함수와 동일합니다&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/9e247743b379a5df3a1bc54a6c16124f.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;코틀린에서 함수는 내부적으로 기능을 가진 형태이지만 외부에서
볼 때는 파라미터를 넣는다는 점 외에는 자료형이 결정된 변수라는 개념으로
접근합니다&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">타입추론과 함수</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">형변환과 배열</title>
      <link href="https://lee989898.github.io/kotlin-03" rel="alternate" type="text/html" title="형변환과 배열" />
      <published>2021-09-25T01:07:00+09:00</published>
      <updated>2021-09-25T01:07:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-03</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-03">&lt;h1 id=&quot;형변환과-배열&quot;&gt;형변환과 배열&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;형변환&quot;&gt;형변환&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;형변환은 하나의 변수에 지정된 자료형을 
호환되는 다른 자료형으로 변경하는 기능입니다&lt;/p&gt;

&lt;p&gt;코틀린은 형변환시 발생할 수 있는 오류를 막기 위해 자동으로 형변환 
해주는 암시적 형변환은 지원하지 않습니다&lt;/p&gt;

&lt;p&gt;명시적 형변환은 변환될 자료형을 개발자가 직접 지정하는 것입니다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;형변환 함수
    &lt;ul&gt;
      &lt;li&gt;toByte()&lt;/li&gt;
      &lt;li&gt;toShort()&lt;/li&gt;
      &lt;li&gt;toInt()&lt;/li&gt;
      &lt;li&gt;toLong()&lt;/li&gt;
      &lt;li&gt;toFloat()&lt;/li&gt;
      &lt;li&gt;toDouble()&lt;/li&gt;
      &lt;li&gt;toChar()&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;noscript&gt;&lt;pre&gt;fun main() {
    var a: Int = 54321
    var b: Long = a.toLong()
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/c96b8a54be145f7b4b07f03f4e1336e6.js&quot;&gt; &lt;/script&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;배열&quot;&gt;배열&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;배열은 내부적으로 Array&lt;T&gt; 클래스로 제공되는 기능입니다&lt;/T&gt;&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;fun main() {
    
    var intArr = arrayOf(1,2,3,4,5)
    
    val nullArr = arrayOfNulls&amp;lt;Int&amp;gt;(5) //비어있는 배열 만들기
    
    intArr[2] = 8
    
    println(intArr[4])
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/6e915687a4c5bcea20ac0c89e590ce74.js&quot;&gt; &lt;/script&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">형변환과 배열</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">변수와 자료형</title>
      <link href="https://lee989898.github.io/kotlin-02" rel="alternate" type="text/html" title="변수와 자료형" />
      <published>2021-09-24T01:07:00+09:00</published>
      <updated>2021-09-24T01:07:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-02</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-02">&lt;h1 id=&quot;변수와-자료형&quot;&gt;변수와 자료형&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;변수&quot;&gt;변수&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;var: 일반적으로 통용되는 변수 언제든지 읽기 쓰기가 가능합니다&lt;/p&gt;

&lt;p&gt;val: 선언시에만 초기화 가능 중간에 값을 변경할 수 없습니다&lt;/p&gt;

&lt;p&gt;runtime시 변경되지 말아야 할 값은 안전하게 val로 선언하는 것이 좋습니다&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;fun main() {
    var a: Int = 123
    val b: Int = 456
    println(a)
    println(b)
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/df68e4e45ea2877dd691d7ba89877f15.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;초기화 하지 않고 null을 허용하는 nullable 변수로 선언할 수 있습니다&lt;br /&gt;
ex) var a: Int? = null&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;자료형&quot;&gt;자료형&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;기본 자료형에는 숫자형,실수형,논리형인 8가지가 있습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;숫자형: Byte Short Int Long&lt;/li&gt;
  &lt;li&gt;실수형: Float Double&lt;/li&gt;
  &lt;li&gt;논리형: Boolean&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;정수형의 리터럴은 10진수, 16진수, 2진수로 표기 가능합니다&lt;/p&gt;

&lt;p&gt;8진수의 표기는 지원하지 않습니다&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;fun main() {
    var intValue:Int = 1234
    var LongValue:Long = 1234L
    var intValueByHex:Int = 0x1af
    var intValueByBin:Int = 0b10110110
    
    var doubleValue:Double = 123.5
    var doubleValueWithExp: Double = 123.5e10
    var floatValue:Float = 123.5f
    
    var charValue: Char = &amp;#39;a&amp;#39;
    var koreanCharValue: Char = &amp;#39;가&amp;#39;
    
    var booleanValue: Boolean = true
    
    var stringValue = &amp;quot;one line string test&amp;quot;
    
    val multiLineStringValue = &amp;quot;&amp;quot;&amp;quot;multiline
    string
    test&amp;quot;&amp;quot;&amp;quot;
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/lee989898/c6ccc4221fdbd96eae8b91fa55199f92.js&quot;&gt; &lt;/script&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">변수와 자료형</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">코틀린 규칙들</title>
      <link href="https://lee989898.github.io/kotlin-01" rel="alternate" type="text/html" title="코틀린 규칙들" />
      <published>2021-09-24T01:05:00+09:00</published>
      <updated>2021-09-24T01:05:00+09:00</updated>
      <id>https://lee989898.github.io/kotlin-01</id>
      <content type="html" xml:base="https://lee989898.github.io/kotlin-01">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;Kotlin 공부는 여러 절로 구성되어 있습니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./kotlin-01&quot;&gt;코틀린 규칙들&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./kotlin-02&quot;&gt;변수와 자료형 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./kotlin-03&quot;&gt;형변환과 배열 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./kotlin-04&quot;&gt;타입추론과 함수 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./kotlin-05&quot;&gt;조건문과 비교연산자 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./kotlin-06&quot;&gt;반복문과 증감연산자 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./kotlin-07&quot;&gt;흐름제어와 논리연산자 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./kotlin-08&quot;&gt;클래스의 기본구조 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./kotlin-09&quot;&gt;클래스의 생성 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./kotlin-10&quot;&gt;클래스의 상속 &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;코틀린-규칙들&quot;&gt;코틀린 규칙들&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;한줄 짜리 주석 //&lt;br /&gt;
 여러 줄 주석 /* */&lt;/p&gt;

    &lt;noscript&gt;&lt;pre&gt;fun main() {
//안녕하세요
  
/*안
 *녕
 *하
 *세
 *요*/
}&lt;/pre&gt;&lt;/noscript&gt;
    &lt;script src=&quot;https://gist.github.com/lee989898/83354dae381c489de07c898ee9a384eb.js&quot;&gt; &lt;/script&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;구문이 끝날때 세미콜론(;)을 붙이지 않아도 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;클래스 이름은 파스칼 표기법 ex) ClassName&lt;/li&gt;
  &lt;li&gt;함수나 변수 이름은 카멜 표기법 ex) functionName&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;warning: 불필요한 구문이 있거나 잠재적 문제가 있을 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;글자 하나하나가 2bytes의 메모리 공간을 사용합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;+클래스에 선언된 변수 Property(속성)&lt;br /&gt;
 이 외의 Scope 내에 선언된 변수 Local Variable(로컬변수)&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>lee989898</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">Kotlin 공부는 여러 절로 구성되어 있습니다. 코틀린 규칙들 변수와 자료형 형변환과 배열 타입추론과 함수 조건문과 비교연산자 반복문과 증감연산자 흐름제어와 논리연산자 클래스의 기본구조 클래스의 생성 클래스의 상속</summary>
      

      
      
    </entry>
  
</feed>
